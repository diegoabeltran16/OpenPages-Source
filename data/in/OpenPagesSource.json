[{"created":"20250531001441132","text":"{\n  \"id\": \"_____Nombre del Proyecto\",\n  \"title\": \"_____Nombre del Proyecto\",\n  \"tags\": [\n    \"--- 🎯 Detalles del proyecto\",\n    \"--- 🗂 Principios de programación\",\n    \"--- 🌀 Helices de desarrollo\",\n    \"--- Codigo\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"--- 🎯 Detalles del proyecto\",\n      \"--- 🗂 Principios de programación\",\n      \"--- 🌀 Helices de desarrollo\",\n      \"--- Codigo\"\n    ]\n  },\n  \"textPlain\": \"Nodo central del proyecto. Este tiddler representa la identidad general del sistema y actúa como punto de anclaje para los 4 ejes conceptuales y funcionales del sistema.\",\n  \"textMarkdown\": \"## Nodo Central del Proyecto\\nEste es el nodo raíz que define y organiza todos los ejes de diseño, implementación y documentación del sistema.\\n\\n### Define:\\n- --- 🎯 Detalles del proyecto\\n- --- 🗂 Principios de programación\\n- --- 🌀 Helices de desarrollo\\n- --- Codigo\\n\\n### Propósito\\nServir como mapa maestro para orquestar el diseño modular y evolutivo del proyecto.\\n\\n---\\n> Este nodo no contiene lógica de implementación, sino que consolida los fundamentos conceptuales del sistema.\"\n}\n","tags":"[[--- 🌀 Helices de desarrollo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[--- Codigo]] [[_____Nombre del Proyecto]]","title":"_____Nombre del Proyecto","modified":"20250531034604074","tmap.id":"0b5b1111-22d6-441a-aa08-aaaf5cd6520d","color":"#fffafa","type":"application/json","source":""},{"created":"20250417160412249","text":"{\n  \"title\": \"--- 🌀 Helices de desarrollo\",\n  \"id\": \"--- 🌀 Helices de desarrollo\",\n  \"tags\": [\n    \"--- 🌀 Helices de desarrollo\",\n    \"--- 🎯 Detalles del proyecto\",\n    \"--- 🗂 Principios de programación\",\n    \"--- Codigo\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"🎯 9. Plan de desarrollo\",\n      \"🎯 Espectros de desarrollo\",\n      \"🗂 Evolución Semántica\"\n    ],\n    \"requiere\": [\n      \"--- 🎯 Detalles del proyecto\",\n      \"--- 🗂 Principios de programación\"\n    ],\n    \"usa\": [\n      \"🎯🧬 0.1 Pre-Impacto\",\n      \"🎯🧬 0.2 Impacto\",\n      \"🎯🧬 0.3 Post-Impacto\"\n    ],\n    \"parte_de\": [\n      \"_____Nombre del Proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler representa la estrategia evolutiva del desarrollo. Define cómo las fases (o vueltas) agregan madurez al sistema, permiten trazabilidad semántica y expresan métricas de impacto.\",\n  \"textMarkdown\": \"## 🌀 Helices de desarrollo\\nModelo de desarrollo continuo, iterativo y trazable.\\n\\n### Define:\\n- 🎯 9. Plan de desarrollo\\n- 🎯 Espectros de desarrollo\\n- 🗂 Evolución Semántica\\n\\n### Requiere:\\n- --- 🎯 Detalles del proyecto\\n- --- 🗂 Principios de programación\\n\\n### Usa:\\n- 🎯🧬 0.1 Pre-Impacto\\n- 🎯🧬 0.2 Impacto\\n- 🎯🧬 0.3 Post-Impacto\\n\\n### Parte de:\\n- _____Nombre del Proyecto\\n\\n---\\n> Este nodo organiza el desarrollo como una hélice: cada vuelta incrementa madurez sin borrar el pasado. Permite visualizar el sistema como un organismo que evoluciona funcionalmente.\"\n}\n\n{\"section\": \"🧬 Identidad del Proyecto\", \"titulo\": \"Nombre del Proyecto\", \"descripcion\": \"Breve descripción de su propósito general y campo de acción\"}\n\n{\"section\": \"🧭 Filosofía Evolutiva\", \"contenido\": [\n  {\"principio\": \"🧩 Modularidad Funcional\", \"descripcion\": \"El sistema está compuesto por unidades independientes que cumplen roles específicos. Cada unidad puede evolucionar sin romper el conjunto.\"},\n  {\"principio\": \"🧬 Desarrollo Helicoidal\", \"descripcion\": \"El progreso se mide por vueltas. Cada vuelta profundiza la robustez, claridad o alcance funcional del sistema.\"},\n  {\"principio\": \"🧠 Trazabilidad Semántica\", \"descripcion\": \"Cada cambio queda registrado con propósito, impacto estructural y nivel de madurez. Las vueltas no se eliminan: se acumulan y transforman.\"},\n  {\"principio\": \"🔒 Ética del Diseño\", \"descripcion\": \"El sistema prioriza el control, la transparencia y la utilidad directa para sus usuarios. Se evita dependencia innecesaria de terceros.\"}\n]}\n\n{\"section\": \"📊 Automatización y Métricas\", \"descripcion\": \"El proyecto genera salidas compatibles con seguimiento y análisis\", \"permite\": [\n  \"Visualizar el impacto de cada vuelta\",\n  \"Medir robustez y estructura (r(t), c(t))\",\n  \"Integrarse con dashboards, bitácoras o IA asistida\"\n]}\n\n{\"section\": \"🌀 Vueltas Helicoidales\", \"tabla\": [\n  {\"vuelta\": \"V1\", \"nombre\": \"Inicio Funcional\", \"componentes\": [\"propuesta\", \"prototipo\", \"logo\"], \"enfoque\": \"Primera expresión del sistema\"},\n  {\"vuelta\": \"V2\", \"nombre\": \"Robustez Básica\", \"componentes\": [\"manual\", \"workflow\", \"pruebas\"], \"enfoque\": \"Estructura replicable y probada\"},\n  {\"vuelta\": \"V3\", \"nombre\": \"Interacción Real\", \"componentes\": [\"feedback\", \"UI\", \"métricas\"], \"enfoque\": \"Mejora por contacto con usuarios\"},\n  {\"vuelta\": \"V4\", \"nombre\": \"Automatización y Escalado\", \"componentes\": [\"CI/CD\", \"exportadores\", \"analítica\"], \"enfoque\": \"Listo para despliegue distribuido\"},\n  {\"vuelta\": \"V5\", \"nombre\": \"Preparación para Inteligencia\", \"componentes\": [\"estructura semántica\", \"log de eventos\", \"sugerencias inteligentes\"], \"enfoque\": \"Interoperabilidad con sistemas inteligentes\"}\n]}\n\n{\"section\": \"📦 Unidades Funcionales\", \"tabla\": [\n  {\"unidad\": \"presentacion.md\", \"rol\": \"Resumen del propósito y público del proyecto\"},\n  {\"unidad\": \"prototipo.png\", \"rol\": \"Primera visualización o producto tangible\"},\n  {\"unidad\": \"formulario.csv\", \"rol\": \"Entrada de datos o conocimiento\"},\n  {\"unidad\": \"evaluador.py\", \"rol\": \"Valida estructura y formato de entradas\"},\n  {\"unidad\": \"exportador.jsonl\", \"rol\": \"Salida estructurada para IA o dashboard\"}\n]}\n\n{\"section\": \"📈 Seguimiento de Evolución\", \"descripcion\": \"Cada unidad puede registrar métricas de impacto y madurez\", \"variables\": [\n  \"r(t): impacto estructural acumulado\",\n  \"c(t): madurez alcanzada en claridad, documentación, validación\",\n  \"r′(t), c′(t): ritmo de evolución funcional por vuelta\"\n], \"usos\": \"Permite entender la evolución del sistema como un organismo en maduración.\"}\n\n{\"section\": \"📘 Conclusión\", \"metafora\": \"Este proyecto no se desarrolla por versiones, sino por evolución funcional iterativa.\", \"proposito\": \"Construir sistemas estructurados, sostenibles y legibles por humanos e inteligencia artificial.\", \"manifiesto\": [\n  \"No crece por parches. Evoluciona por sentido.\",\n  \"No borra el pasado. Lo transforma.\",\n  \"No solo funciona. Aprende.\"\n], \"frase_final\": \"Cada vuelta agrega madurez. Cada unidad expresa un nuevo conocimiento útil.\"}\n\n","tags":"[[--- 🌀 Helices de desarrollo]] [[--- Codigo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[_____Nombre del Proyecto]]","title":"--- 🌀 Helices de desarrollo","modified":"20250531034201339","tmap.id":"72b16a8d-534f-4d73-95e1-d0b3eacc1136","color":"#00db70","type":"application/json"},{"created":"20250417031939761","text":"{\n  \"title\": \"--- 🎯 Detalles del proyecto\",\n  \"id\": \"--- 🎯 Detalles del proyecto\",\n  \"tags\": [\n    \"--- 🎯 Detalles del proyecto\",\n    \"--- 🗂 Principios de programación\",\n    \"--- 🌀 Helices de desarrollo\",\n    \"--- Codigo\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"🎯 1. Objetivos\",\n      \"🎯 2. Requisitos\",\n      \"🎯 3. DOFA\",\n      \"🎯 4. Flujo de interaccion\",\n      \"🎯 5. Arquitectura\",\n      \"🎯 6. Componentes\",\n      \"🎯 7. Algoritmos y matematicas\",\n      \"🎯 8. Estructura\",\n      \"🎯 9. Plan de desarrollo\",\n      \"🎯 Espectros de desarrollo\",\n      \"🎯🧬 0.1 Pre-Impacto\",\n      \"🎯🧬 0.2 Impacto\",\n      \"🎯🧬 0.3 Post-Impacto\"\n    ],\n    \"requiere\": [\n      \"--- 🗂 Principios de programación\",\n      \"--- 🌀 Helices de desarrollo\"\n    ],\n    \"usa\": [\n      \"🎯 3. DOFA\",\n      \"🎯 4. Flujo de interaccion\"\n    ],\n    \"parte_de\": [\n      \"_____Nombre del Proyecto\"\n    ]\n  }\n}\n{\"subsection\": \"🧠 Propósito Central\", \"descripcion\": \"Breve descripción de la función principal del proyecto, lo que resuelve o transforma.\", \"nota\": \"🎯 Define su rol único dentro de un flujo más grande (ej. preparación, procesamiento, análisis, etc.)\"}\n{\"subsection\": \"📌 Nombre y Naturaleza\", \"atributos\": {\n  \"Nombre completo\": \"Nombre descriptivo y claro\",\n  \"Tipo de proyecto\": \"CLI, web, app móvil, API, etc.\",\n  \"Licencia\": \"MIT, GPL, Apache 2.0, etc.\",\n  \"Inspiración\": \"Modelos teóricos, referentes técnicos o biológicos\",\n  \"Relación\": \"Parte de qué sistema, ecosistema o stack\",\n  \"Metáfora\": \"Analogía conceptual del rol del sistema (opcional)\"\n}}\n{\"subsection\": \"🧬 Función en el Ecosistema\", \"sistema\": [\n  {\"actor\": \"Actor A\", \"rol\": \"Qué produce o recibe\"},\n  {\"actor\": \"Este proyecto\", \"rol\": \"Qué hace exactamente en ese flujo\"},\n  {\"actor\": \"Actor B\", \"rol\": \"Cómo lo usa o transforma\"}\n]}\n{\"subsection\": \"⚙️ Detalles técnicos\", \"elementos\": {\n  \"Lenguaje\": \"Lenguaje principal del código fuente\",\n  \"Entrada esperada\": \"Formato y estructura de input\",\n  \"Salida generada\": \"Formato y estructura de output\",\n  \"Campos estándar\": \"Elementos obligatorios y claves\",\n  \"CLI\": \"Comando de ejecución mínimo\",\n  \"Modo de uso\": \"Interacción con el sistema\"\n}}\n{\"subsection\": \"🧪 Validaciones incluidas\", \"validaciones\": [\n  {\"tipo\": \"Tipo de verificación (formato, duplicados, etc.)\", \"objetivo\": \"Qué error previene\"}\n]}\n{\"subsection\": \"📦 Distribución esperada\", \"entregables\": [\n  {\"tipo\": \"Ejecutable, script, binario, etc.\", \"detalle\": \"Dónde o cómo se entrega\"}\n]}\n{\"subsection\": \"🔐 Seguridad y privacidad\", \"caracteristicas\": [\n  \"¿Trabaja local o en la nube?\",\n  \"¿Envía o almacena información?\",\n  \"¿Evalúa código externo?\",\n  \"¿Depende de APIs o servicios externos?\"\n]}\n{\"subsection\": \"🧬 Trazabilidad helicoidal\", \"descripcion\": \"Cómo se mide la evolución del sistema en fases o 'vueltas'\", \"principios\": [\n  \"Cada vuelta agrega capacidad funcional\",\n  \"Ninguna vuelta borra lo anterior, lo integra\",\n  \"Toda vuelta tiene propósito, pruebas y entregables\"\n]}\n{\"subsection\": \"🧠 Público objetivo\", \"usuarios\": [\n  {\"perfil\": \"Tipo de usuario o rol\", \"motivo\": \"Por qué este sistema le es útil\"}\n]}\n{\"subsection\": \"📘 Documentación incluida\", \"archivos\": [\n  \"README.md – guía rápida y objetivo general\",\n  \"plan_helicoidal.md – roadmap evolutivo\",\n  \"arquitectura.md – estructura de módulos y flujos\",\n  \"dofa.md – diagnóstico estratégico\",\n  \"manifiesto.md – principios filosóficos o técnicos\"\n]}\n","title":"--- 🎯 Detalles del proyecto","color":"#002bdb","modified":"20250531033409514","type":"application/json","tags":"[[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[--- 🌀 Helices de desarrollo]] [[--- Codigo]] [[🎯 1. Objetivos]] [[🎯 2. Requisitos]] [[🎯 3. DOFA]] [[🎯 4. Flujo de interaccion]] [[🎯 5. Arquitectura]] [[🎯 6. Componentes]] [[🎯 7. Algoritmos y matematicas]] [[🎯 8. Estructura]] [[🎯 9. Plan de desarrollo]] [[🎯 Espectros de desarrollo]] [[🎯🧬 0.1 Pre-Impacto]] [[🎯🧬 0.2 Impacto]] [[🎯🧬 0.3 Post-Impacto]] [[_____Nombre del Proyecto]]","tmap.id":"517da0ac-fcff-4a05-b0e4-4ad331b49c10"},{"created":"20250417132020369","text":"{\n  \"title\": \"--- 🗂 Principios de programación\",\n  \"id\": \"--- 🗂 Principios de programación\",\n  \"tags\": [\n    \"--- 🗂 Principios de programación\",\n    \"--- 🎯 Detalles del proyecto\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"🗂 Diseño\",\n      \"🗂 Calidad del Código\",\n      \"🗂 Modularidad y Estado\",\n      \"🗂 Estructura de commits\",\n      \"🗂 Usabilidad y Robustez\",\n      \"🗂 Epigenética Computacional\",\n      \"🗂 Evolución Semántica\"\n    ],\n    \"requiere\": [\n      \"--- 🎯 Detalles del proyecto\"\n    ],\n    \"usa\": [\n      \"🎯 5. Arquitectura\",\n      \"🎯 6. Componentes\",\n      \"🎯 7. Algoritmos y matematicas\"\n    ],\n    \"parte_de\": [\n      \"_____Nombre del Proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler define los principios fundamentales de desarrollo utilizados en el sistema, incluyendo diseño orientado a objetos, simplicidad, modularidad, pruebas, robustez y epigenética computacional. Requiere conocer la visión general del proyecto y se aplica en decisiones arquitectónicas y de implementación.\",\n  \"textMarkdown\": \"## 🗂 Principios de programación\\nEste nodo define el marco conceptual y técnico que guía toda decisión de desarrollo en el sistema.\\n\\n### Define:\\n- 🗂 Diseño\\n- 🗂 Calidad del Código\\n- 🗂 Modularidad y Estado\\n- 🗂 Estructura de commits\\n- 🗂 Usabilidad y Robustez\\n- 🗂 Epigenética Computacional\\n- 🗂 Evolución Semántica\\n\\n### Requiere:\\n- --- 🎯 Detalles del proyecto\\n\\n### Usa:\\n- 🎯 5. Arquitectura\\n- 🎯 6. Componentes\\n- 🎯 7. Algoritmos y matematicas\\n\\n### Parte de:\\n- _____Nombre del Proyecto\\n\\n---\\n> Este tiddler actúa como marco técnico para todos los demás módulos del sistema. Se mantiene simple, evolutivo y enfocado en principios con analogías biológicas claras.\"\n}\n\n{\"section\": \"📌 Principios Fundamentales de Programación\", \"descripcion\": \"Aplicados desde la biología a la ingeniería de software\"}\n{\"principio\": \"🔸 Diseño Orientado a Objetos\", \"tag\": \"🗂 Diseño\", \"reglas\": [\n  \"Una responsabilidad clara (SRP)\",\n  \"Abierto a extensión y no romper el sistema si cambia (OCP)\",\n  \"Sustituible, encapsulado y compuesto en vez de heredado\"\n], \"analogía\": \"🧬 Un gen mutado no debe romper la hélice: debe integrarse con armonía.\"}\n{\"principio\": \"🔸 Simplicidad y Código Limpio\", \"tag\": \"🗂 Calidad\", \"reglas\": [\n  \"Diseñamos para ser entendidos: KISS\",\n  \"No codificamos por si acaso: YAGNI\",\n  \"No duplicamos funciones que ya están en el ADN: DRY\"\n], \"analogía\": \"🧬 La redundancia en el genoma puede causar enfermedades. Lo mismo en el código.\"}\n{\"principio\": \"🔸 Modularidad y Estado\", \"tag\": \"🗂 Modularidad\", \"reglas\": [\n  \"Separación de intereses = genes especializados\",\n  \"Estado compartido mínimo = evitar colisiones genéticas\",\n  \"Inmutabilidad = estabilidad en la expresión\"\n], \"analogía\": \"🧬 Cada gen se expresa cuando debe, no todo el tiempo.\"}\n{\"principio\": \"🔸 Pruebas y Claridad\", \"tag\": \"🗂 Commits\", \"reglas\": [\n  \"TDD = evolución dirigida por entorno\",\n  \"El código debe ser comprensible → el ADN necesita leerse para replicarse con precisión\"\n], \"analogía\": \"🧬 Sin pruebas, el sistema no puede regenerarse ni evolucionar sin errores.\"}\n{\"principio\": \"🔸 Usabilidad y Robustez\", \"tag\": \"🗂 Robustez\", \"reglas\": [\n  \"Principio del menor asombro → expresión predecible\",\n  \"Convenciones claras → coherencia semántica\",\n  \"Programación defensiva → inmunidad ante entradas hostiles\"\n], \"analogía\": \"🧬 Un gen bien diseñado se comporta igual, sin importar el ambiente.\"}\n{\"section\": \"🧬 Modelo Genético-Helicoidal\", \"tag\": \"🗂 Evolución Semántica\", \"tabla\": [\n  {\"concepto\": \"Gen funcional\", \"interpretacion\": \"Cada módulo del pipeline representa una unidad de comportamiento específico (`validator.py`, `parser.py`, etc.)\"},\n  {\"concepto\": \"Expresión génica\", \"interpretacion\": \"El módulo se activa en una vuelta específica del desarrollo (por CLI, test, o integración)\"},\n  {\"concepto\": \"Mutación semántica\", \"interpretacion\": \"Cambios en el código que refinan o transforman la funcionalidad sin perder su rol esencial\"},\n  {\"concepto\": \"Epigenética de configuración\", \"interpretacion\": \"Preferencias externas (como `config.yaml`, flags CLI) que determinan cuándo y cómo se activa el módulo\"},\n  {\"concepto\": \"Fenotipo técnico\", \"interpretacion\": \"El resultado observable de la expresión del módulo: archivos `.jsonl`, logs, respuestas API, etc.\"},\n  {\"concepto\": \"Derivada de madurez c′(t)\", \"interpretacion\": \"Tasa de evolución semántica del módulo: integración, cobertura, documentación, claridad\"},\n  {\"concepto\": \"Derivada de cambio r′(t)\", \"interpretacion\": \"Amplitud de refactorización o expansión técnica del módulo en una vuelta\"}\n], \"relaciones_internas\": [\n  \"Un gen puede tener múltiples mutaciones a lo largo de distintas vueltas, pero su propósito se mantiene.\",\n  \"La madurez de un módulo no depende solo de su código, sino de su contexto de ejecución y sus condiciones de activación.\"\n], \"frase\": \"🧬 Un sistema evoluciona cuando sus genes se expresan con mayor claridad, precisión y adaptabilidad.\"}\n{\"principio\": \"🔸 Epigenética Computacional\", \"tag\": \"🗂 Epigenética Computacional\", \"reglas\": [\n  \"Activarse solo si el entorno lo requiere\",\n  \"Tener un dominio condicional claro\",\n  \"Regularse mutuamente sin romper el sistema\",\n  \"Aportar trazabilidad y eficiencia semántica\"\n], \"analogía\": \"🧬 Un gen expresado sin necesidad, genera ruido. Un gen bien activado, transforma el sistema.\"}\n{\"section\": \"🧠 ¿Qué permite esta integración?\", \"beneficios\": [\n  \"Mapear desarrollo como una curva viva y analizable\",\n  \"Documentar cada módulo como una unidad genética navegable\",\n  \"Visualizar el pipeline como un organismo que madura y se adapta\",\n  \"Conectar cada principio de software con su par biomolecular\",\n  \"Permitir que una IA lea y entienda el sistema como un ser en evolución y no como un conjunto de archivos planos\"\n]}\n{\"section\": \"📘 Conclusión\", \"descripcion\": \"OpenPages Pipeline es una hélice viva. No es un software que se escribe, es un organismo que se expresa. Cada vuelta es una nueva capa de significado; cada función, un gen en acción.\", \"cita\": \"“No versionamos. Evolucionamos.”\"}\n","type":"application/json","title":"--- 🗂 Principios de programación","modified":"20250531033820456","tags":"[[--- 🗂 Principios de programación]] [[--- 🎯 Detalles del proyecto]] [[🗂 Diseño]] [[🗂 Estructura de commits]] [[🗂 Modularidad y Estado]] [[🗂 Calidad del Código]] [[🗂 Usabilidad y Robustez]] [[🗂 Evolución Semántica]] [[🗂 Epigenética Computacional]] [[_____Nombre del Proyecto]]","color":"#dbbe00","tmap.id":"fb77e866-d7bd-4e8b-9d29-7459616658a9","tmap.edges":"{\"1ed8d863-af9e-4653-b52a-7170ffb2c31c\":{\"to\":\"a30a6844-bece-4f9c-add6-6f2d45090b42\",\"type\":\"unknown\"}}"},{"created":"20250417170811837","text":"{\n  \"title\": \"--- Codigo\",\n  \"id\": \"--- Codigo\",\n  \"tags\": [\n    \"--- Codigo\",\n    \"--- 🎯 Detalles del proyecto\",\n    \"--- 🗂 Principios de programación\",\n    \"--- 🌀 Helices de desarrollo\",\n    \"_____Nombre del Proyecto\",\n    \"🗂 Calidad del Código\",\n    \"🗂 Diseño\",\n    \"🗂 Epigenética Computacional\",\n    \"🗂 Estructura de commits\",\n    \"🗂 Evolución Semántica\",\n    \"🗂 Modularidad y Estado\",\n    \"🗂 Usabilidad y Robustez\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"🧠 Nivel 2: Sistemas del Cuerpo\",\n      \"🧩 Nivel 3: Órganos del Sistema\",\n      \"🧠 Nivel 4: Flujo Funcional General\"\n    ],\n    \"requiere\": [\n      \"--- 🎯 Detalles del proyecto\",\n      \"--- 🗂 Principios de programación\",\n      \"--- 🌀 Helices de desarrollo\"\n    ],\n    \"usa\": [\n      \"🗂 Calidad del Código\",\n      \"🗂 Diseño\",\n      \"🗂 Epigenética Computacional\",\n      \"🗂 Estructura de commits\",\n      \"🗂 Evolución Semántica\",\n      \"🗂 Modularidad y Estado\",\n      \"🗂 Usabilidad y Robustez\"\n    ],\n    \"parte_de\": [\n      \"_____Nombre del Proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler organiza la estructura funcional del sistema como si fuera un organismo biológico. Define sus sistemas internos, órganos y el flujo de procesamiento desde entrada hasta salida.\",\n  \"textMarkdown\": \"## 🧠 Anatomía del Código\\nModelo funcional basado en una analogía biológica.\\n\\n### Define:\\n- 🧠 Nivel 2: Sistemas del Cuerpo\\n- 🧩 Nivel 3: Órganos del Sistema\\n- 🧠 Nivel 4: Flujo Funcional General\\n\\n### Requiere:\\n- --- 🎯 Detalles del proyecto\\n- --- 🗂 Principios de programación\\n- --- 🌀 Helices de desarrollo\\n\\n### Usa:\\n- 🗂 Calidad del Código\\n- 🗂 Diseño\\n- 🗂 Epigenética Computacional\\n- 🗂 Estructura de commits\\n- 🗂 Evolución Semántica\\n- 🗂 Modularidad y Estado\\n- 🗂 Usabilidad y Robustez\\n\\n### Parte de:\\n- _____Nombre del Proyecto\\n\\n---\\n> Este nodo establece las bases estructurales sobre las que se codifican las funcionalidades del sistema. Permite mantener la coherencia, trazabilidad y evolución desde un núcleo anatómico bien definido.\"\n}\n{\"section\": \"📘 Anatomía del Sistema\", \"titulo\": \"Nombre del Proyecto\", \"descripcion\": \"Modelo general de arquitectura funcional inspirado en biología sistémica. Organiza el software como un organismo dividido en niveles: organismo, sistemas, órganos y flujo funcional.\"}\n{\"nivel\": \"🧱 Nivel 1: El Organismo\", \"descripcion\": \"Representa el sistema completo como una unidad coherente. Tiene un propósito definido, recibe entradas, las transforma internamente y produce salidas útiles. Se comporta como un organismo funcional.\"}\n{\"nivel\": \"🧠 Nivel 2: Sistemas del Cuerpo\", \"tipo\": \"Sistema y Función\", \"sistemas\": [\n  {\"sistema\": \"Sistema de Entrada\", \"funcion\": \"Gestiona cómo se reciben los datos o estímulos desde el exterior (archivos, API, UI, sensores, etc.)\"},\n  {\"sistema\": \"Sistema de Transformación\", \"funcion\": \"Procesa o transforma los datos siguiendo reglas internas (normalización, parseo, análisis, validación semántica)\"},\n  {\"sistema\": \"Sistema de Coordinación\", \"funcion\": \"Orquesta el comportamiento general del sistema y establece el flujo de información entre módulos\"},\n  {\"sistema\": \"Sistema de Salida\", \"funcion\": \"Entrega resultados, respuestas o datos ya procesados a otros sistemas o usuarios\"},\n  {\"sistema\": \"Sistema de Validación\", \"funcion\": \"Verifica la integridad, formato, valores o reglas de negocio de los datos entrantes\"},\n  {\"sistema\": \"Sistema de Interfaz\", \"funcion\": \"Permite interacción humana o de otras máquinas (CLI, API, interfaces gráficas o comandos externos)\"},\n  {\"sistema\": \"Sistema de Definición Estructural\", \"funcion\": \"Contiene los esquemas, contratos o modelos de datos que definen la forma interna del conocimiento\"},\n  {\"sistema\": \"Sistema de Consistencia Interna\", \"funcion\": \"Mantiene coherencia de campos como fechas, identificadores, relaciones y estados\"}\n]}\n{\"nivel\": \"🧩 Nivel 3: Órganos del Sistema\", \"descripcion\": \"Cada sistema está compuesto por órganos: componentes especializados que cumplen funciones concretas. Los órganos son instancias técnicas específicas (módulos, funciones, clases o servicios) que realizan una tarea clara y delimitada dentro de su sistema.\"}\n{\"nivel\": \"🧠 Nivel 4: Flujo Funcional General\", \"flujo\": [\n  \"Recepción de datos externos o comandos\",\n  \"Conversión a estructuras internas consistentes\",\n  \"Verificación de integridad y formato\",\n  \"Transformación estructural o análisis\",\n  \"Producción de salidas útiles\"\n]}\n{\"subsection\": \"📎 Notas Técnicas\", \"descripcion\": \"Este modelo permite estructurar sistemas complejos de manera legible, mantenible y escalable. Cada componente cumple una función delimitada dentro de un sistema mayor coordinado.\"}\n","type":"application/json","title":"--- Codigo","modified":"20250531034836091","tags":"[[--- Codigo]] [[--- 🌀 Helices de desarrollo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[_____Nombre del Proyecto]] [[🗂 Calidad del Código]] [[🗂 Diseño]] [[🗂 Epigenética Computacional]] [[🗂 Estructura de commits]] [[🗂 Evolución Semántica]] [[🗂 Modularidad y Estado]] [[🗂 Usabilidad y Robustez]]","tmap.id":"6a302a06-5761-4a66-b58d-d79b5638d4b9","color":"#dc1800"},{"title":"-.github_dependabot.yml","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```bash\n# To get started with Dependabot version updates, you'll need to specify which\n# package ecosystems to update and where the package manifests are located.\n# Please see the documentation for all configuration options:\n# https://docs.github.com/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file\n\nversion: 2\nupdates:\n  - package-ecosystem: \"pip\" # See documentation for possible values\n    directory: \"/\" # Location of package manifests\n    schedule:\n      interval: \"weekly\"\n\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531223113417","modified":"20250531223113417","tmap.id":"c85bd7a7-fc78-4c52-b564-8205a413ef51"},{"title":"-.github_workflows_go-test.yml","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```bash\nname: Go CI\n\n# Se ejecuta en cada push o PR a main (puedes ajustar rama)\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Chequear código\n        uses: actions/checkout@v3\n\n      - name: Instalar Go\n        uses: actions/setup-go@v4\n        with:\n          go-version: '1.21'\n\n      - name: Cache de módulos\n        uses: actions/cache@v3\n        with:\n          path: ~/.cache/go-build\n          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}\n          restore-keys: |\n            ${{ runner.os }}-go-\n\n      - name: Descarga dependencias\n        run: go mod download\n\n      - name: Ejecutar tests\n        run: go test ./... -v\n\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531223113418","modified":"20250531223113418","tmap.id":"82b07b1f-b0eb-4109-8843-f67b4542b8a8"},{"title":"-.gitignore","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```gitignore\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# UV\n#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#uv.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control\n.pdm.toml\n.pdm-python\n.pdm-build/\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n\n# Ruff stuff:\n.ruff_cache/\n\n# PyPI configuration file\n.pypirc\n\n# Estructura\nestructura.txt\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531223113410","modified":"20250531223113410","tmap.id":"437a3a5a-fdb8-4418-a2fa-d010ca50a3ca"},{"title":"-cmd_exporter_main.go","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```go\n// main.go – Orquestador principal del pipeline\n// --------------------------------------------------------------------------------\n// Contexto pedagógico\n// -------------------\n// Este archivo *amarra* los tres componentes del pipeline: *reader.go*,\n// *converter.go* y *writer.go*.\n//\n// --------------------------------------------------------------------------------\n// RESPONSABILIDAD PRINCIPAL\n// --------------------------------------------------------------------------------\n// 1. **Parsear flags**:  `-input` para el export JSON de TiddlyWiki y `-output`\n//    para el archivo destino JSONL.\n// 2. Validar que ambos argumentos existan; si no, mostrar *usage* y abortar.\n// 3. Orquestar:\n//      • Leer tiddlers       → `ReadTiddlers`.\n//      • Convertir a records → `ConvertTiddlers`.\n//      • Escribir JSONL      → `WriteJSONL`.\n// 4. Reportar progreso y errores de forma amigable.\n//\n// --------------------------------------------------------------------------------\n// CÓMO COMPILAR Y EJECUTAR\n// --------------------------------------------------------------------------------\n//   go run ./cmd/exporter \\\n//     -input /home/naveen/Documents/OpenPages-Source/data/in/tiddlers.json \\\n//     -output /home/naveen/Documents/OpenPages-Source/data/out/tiddlers.jsonl\n//\n// --------------------------------------------------------------------------------\n\n// cmd/exporter/main.go\npackage main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/diegoabeltran16/OpenPages-Source/internal/exporter\"\n\t\"github.com/diegoabeltran16/OpenPages-Source/internal/importer\"\n\t\"github.com/diegoabeltran16/OpenPages-Source/internal/transform\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\n\t// ------------------------------------------------------------ Flags\n\tin := flag.String(\"input\", \"\", \"JSON exportado de TiddlyWiki\")\n\tout := flag.String(\"output\", \"\", \"Archivo JSONL de salida\")\n\tmode := flag.String(\"mode\", \"v1\", \"v1 | v2  (estructura del JSONL)\")\n\tpretty := flag.Bool(\"pretty\", false, \"MarshalIndent en lugar de compacto\")\n\tflag.Parse()\n\n\tif *in == \"\" || *out == \"\" {\n\t\tfmt.Println(\"Uso: exporter -input tiddlers.json -output sal.jsonl [-mode v2]\")\n\t\tos.Exit(1)\n\t}\n\n\t// ------------------------------------------------------ Leer tiddlers\n\ttiddlers, err := importer.Read(ctx, *in)\n\tif err != nil {\n\t\tlog.Fatalf(\"❌ error leyendo tiddlers: %v\", err)\n\t}\n\tfmt.Printf(\"📦 %d tiddlers cargados\\n\", len(tiddlers))\n\n\t// -------------------------------------------------- Convertir según modo\n\tswitch *mode {\n\tcase \"v2\":\n\t\trecs := transform.ConvertTiddlersV2(tiddlers)\n\t\tif err := exporter.WriteJSONL(ctx, *out, recs, *pretty); err != nil {\n\t\t\tlog.Fatalf(\"❌ escribir JSONL v2: %v\", err)\n\t\t}\n\tcase \"v1\":\n\t\trecs := transform.ConvertTiddlers(tiddlers)\n\t\tif err := exporter.WriteJSONL(ctx, *out, recs, *pretty); err != nil {\n\t\t\tlog.Fatalf(\"❌ escribir JSONL v1: %v\", err)\n\t\t}\n\tdefault:\n\t\tlog.Fatalf(\"modo desconocido: %s (use v1 o v2)\", *mode)\n\t}\n\n\tfmt.Printf(\"✅ Exportación completada (%s)\\n\", *out)\n}\n\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531224148699","modified":"20250531224148699","tmap.id":"c21edb35-6383-42e1-a95d-cb2a6c35ceba"},{"title":"-data_in_tiddlers.json","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```json\n[{\"created\":\"20250531001441132\",\"text\":\"{\\n  \\\"id\\\": \\\"_____Nombre del Proyecto\\\",\\n  \\\"title\\\": \\\"_____Nombre del Proyecto\\\",\\n  \\\"tags\\\": [\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"--- 🌀 Helices de desarrollo\\\",\\n    \\\"--- Codigo\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"--- 🎯 Detalles del proyecto\\\",\\n      \\\"--- 🗂 Principios de programación\\\",\\n      \\\"--- 🌀 Helices de desarrollo\\\",\\n      \\\"--- Codigo\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Nodo central del proyecto. Este tiddler representa la identidad general del sistema y actúa como punto de anclaje para los 4 ejes conceptuales y funcionales del sistema.\\\",\\n  \\\"textMarkdown\\\": \\\"## Nodo Central del Proyecto\\\\nEste es el nodo raíz que define y organiza todos los ejes de diseño, implementación y documentación del sistema.\\\\n\\\\n### Define:\\\\n- --- 🎯 Detalles del proyecto\\\\n- --- 🗂 Principios de programación\\\\n- --- 🌀 Helices de desarrollo\\\\n- --- Codigo\\\\n\\\\n### Propósito\\\\nServir como mapa maestro para orquestar el diseño modular y evolutivo del proyecto.\\\\n\\\\n---\\\\n> Este nodo no contiene lógica de implementación, sino que consolida los fundamentos conceptuales del sistema.\\\"\\n}\\n\",\"tags\":\"[[--- 🌀 Helices de desarrollo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[--- Codigo]] [[_____Nombre del Proyecto]]\",\"title\":\"_____Nombre del Proyecto\",\"modified\":\"20250531034604074\",\"tmap.id\":\"0b5b1111-22d6-441a-aa08-aaaf5cd6520d\",\"color\":\"#fffafa\",\"type\":\"application/json\",\"source\":\"\"},{\"created\":\"20250417160412249\",\"text\":\"{\\n  \\\"title\\\": \\\"--- 🌀 Helices de desarrollo\\\",\\n  \\\"id\\\": \\\"--- 🌀 Helices de desarrollo\\\",\\n  \\\"tags\\\": [\\n    \\\"--- 🌀 Helices de desarrollo\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"--- Codigo\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"🎯 9. Plan de desarrollo\\\",\\n      \\\"🎯 Espectros de desarrollo\\\",\\n      \\\"🗂 Evolución Semántica\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"--- 🎯 Detalles del proyecto\\\",\\n      \\\"--- 🗂 Principios de programación\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🎯🧬 0.1 Pre-Impacto\\\",\\n      \\\"🎯🧬 0.2 Impacto\\\",\\n      \\\"🎯🧬 0.3 Post-Impacto\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"_____Nombre del Proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler representa la estrategia evolutiva del desarrollo. Define cómo las fases (o vueltas) agregan madurez al sistema, permiten trazabilidad semántica y expresan métricas de impacto.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🌀 Helices de desarrollo\\\\nModelo de desarrollo continuo, iterativo y trazable.\\\\n\\\\n### Define:\\\\n- 🎯 9. Plan de desarrollo\\\\n- 🎯 Espectros de desarrollo\\\\n- 🗂 Evolución Semántica\\\\n\\\\n### Requiere:\\\\n- --- 🎯 Detalles del proyecto\\\\n- --- 🗂 Principios de programación\\\\n\\\\n### Usa:\\\\n- 🎯🧬 0.1 Pre-Impacto\\\\n- 🎯🧬 0.2 Impacto\\\\n- 🎯🧬 0.3 Post-Impacto\\\\n\\\\n### Parte de:\\\\n- _____Nombre del Proyecto\\\\n\\\\n---\\\\n> Este nodo organiza el desarrollo como una hélice: cada vuelta incrementa madurez sin borrar el pasado. Permite visualizar el sistema como un organismo que evoluciona funcionalmente.\\\"\\n}\\n\\n{\\\"section\\\": \\\"🧬 Identidad del Proyecto\\\", \\\"titulo\\\": \\\"Nombre del Proyecto\\\", \\\"descripcion\\\": \\\"Breve descripción de su propósito general y campo de acción\\\"}\\n\\n{\\\"section\\\": \\\"🧭 Filosofía Evolutiva\\\", \\\"contenido\\\": [\\n  {\\\"principio\\\": \\\"🧩 Modularidad Funcional\\\", \\\"descripcion\\\": \\\"El sistema está compuesto por unidades independientes que cumplen roles específicos. Cada unidad puede evolucionar sin romper el conjunto.\\\"},\\n  {\\\"principio\\\": \\\"🧬 Desarrollo Helicoidal\\\", \\\"descripcion\\\": \\\"El progreso se mide por vueltas. Cada vuelta profundiza la robustez, claridad o alcance funcional del sistema.\\\"},\\n  {\\\"principio\\\": \\\"🧠 Trazabilidad Semántica\\\", \\\"descripcion\\\": \\\"Cada cambio queda registrado con propósito, impacto estructural y nivel de madurez. Las vueltas no se eliminan: se acumulan y transforman.\\\"},\\n  {\\\"principio\\\": \\\"🔒 Ética del Diseño\\\", \\\"descripcion\\\": \\\"El sistema prioriza el control, la transparencia y la utilidad directa para sus usuarios. Se evita dependencia innecesaria de terceros.\\\"}\\n]}\\n\\n{\\\"section\\\": \\\"📊 Automatización y Métricas\\\", \\\"descripcion\\\": \\\"El proyecto genera salidas compatibles con seguimiento y análisis\\\", \\\"permite\\\": [\\n  \\\"Visualizar el impacto de cada vuelta\\\",\\n  \\\"Medir robustez y estructura (r(t), c(t))\\\",\\n  \\\"Integrarse con dashboards, bitácoras o IA asistida\\\"\\n]}\\n\\n{\\\"section\\\": \\\"🌀 Vueltas Helicoidales\\\", \\\"tabla\\\": [\\n  {\\\"vuelta\\\": \\\"V1\\\", \\\"nombre\\\": \\\"Inicio Funcional\\\", \\\"componentes\\\": [\\\"propuesta\\\", \\\"prototipo\\\", \\\"logo\\\"], \\\"enfoque\\\": \\\"Primera expresión del sistema\\\"},\\n  {\\\"vuelta\\\": \\\"V2\\\", \\\"nombre\\\": \\\"Robustez Básica\\\", \\\"componentes\\\": [\\\"manual\\\", \\\"workflow\\\", \\\"pruebas\\\"], \\\"enfoque\\\": \\\"Estructura replicable y probada\\\"},\\n  {\\\"vuelta\\\": \\\"V3\\\", \\\"nombre\\\": \\\"Interacción Real\\\", \\\"componentes\\\": [\\\"feedback\\\", \\\"UI\\\", \\\"métricas\\\"], \\\"enfoque\\\": \\\"Mejora por contacto con usuarios\\\"},\\n  {\\\"vuelta\\\": \\\"V4\\\", \\\"nombre\\\": \\\"Automatización y Escalado\\\", \\\"componentes\\\": [\\\"CI/CD\\\", \\\"exportadores\\\", \\\"analítica\\\"], \\\"enfoque\\\": \\\"Listo para despliegue distribuido\\\"},\\n  {\\\"vuelta\\\": \\\"V5\\\", \\\"nombre\\\": \\\"Preparación para Inteligencia\\\", \\\"componentes\\\": [\\\"estructura semántica\\\", \\\"log de eventos\\\", \\\"sugerencias inteligentes\\\"], \\\"enfoque\\\": \\\"Interoperabilidad con sistemas inteligentes\\\"}\\n]}\\n\\n{\\\"section\\\": \\\"📦 Unidades Funcionales\\\", \\\"tabla\\\": [\\n  {\\\"unidad\\\": \\\"presentacion.md\\\", \\\"rol\\\": \\\"Resumen del propósito y público del proyecto\\\"},\\n  {\\\"unidad\\\": \\\"prototipo.png\\\", \\\"rol\\\": \\\"Primera visualización o producto tangible\\\"},\\n  {\\\"unidad\\\": \\\"formulario.csv\\\", \\\"rol\\\": \\\"Entrada de datos o conocimiento\\\"},\\n  {\\\"unidad\\\": \\\"evaluador.py\\\", \\\"rol\\\": \\\"Valida estructura y formato de entradas\\\"},\\n  {\\\"unidad\\\": \\\"exportador.jsonl\\\", \\\"rol\\\": \\\"Salida estructurada para IA o dashboard\\\"}\\n]}\\n\\n{\\\"section\\\": \\\"📈 Seguimiento de Evolución\\\", \\\"descripcion\\\": \\\"Cada unidad puede registrar métricas de impacto y madurez\\\", \\\"variables\\\": [\\n  \\\"r(t): impacto estructural acumulado\\\",\\n  \\\"c(t): madurez alcanzada en claridad, documentación, validación\\\",\\n  \\\"r′(t), c′(t): ritmo de evolución funcional por vuelta\\\"\\n], \\\"usos\\\": \\\"Permite entender la evolución del sistema como un organismo en maduración.\\\"}\\n\\n{\\\"section\\\": \\\"📘 Conclusión\\\", \\\"metafora\\\": \\\"Este proyecto no se desarrolla por versiones, sino por evolución funcional iterativa.\\\", \\\"proposito\\\": \\\"Construir sistemas estructurados, sostenibles y legibles por humanos e inteligencia artificial.\\\", \\\"manifiesto\\\": [\\n  \\\"No crece por parches. Evoluciona por sentido.\\\",\\n  \\\"No borra el pasado. Lo transforma.\\\",\\n  \\\"No solo funciona. Aprende.\\\"\\n], \\\"frase_final\\\": \\\"Cada vuelta agrega madurez. Cada unidad expresa un nuevo conocimiento útil.\\\"}\\n\\n\",\"tags\":\"[[--- 🌀 Helices de desarrollo]] [[--- Codigo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[_____Nombre del Proyecto]]\",\"title\":\"--- 🌀 Helices de desarrollo\",\"modified\":\"20250531034201339\",\"tmap.id\":\"72b16a8d-534f-4d73-95e1-d0b3eacc1136\",\"color\":\"#00db70\",\"type\":\"application/json\"},{\"created\":\"20250417031939761\",\"text\":\"{\\n  \\\"title\\\": \\\"--- 🎯 Detalles del proyecto\\\",\\n  \\\"id\\\": \\\"--- 🎯 Detalles del proyecto\\\",\\n  \\\"tags\\\": [\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"--- 🌀 Helices de desarrollo\\\",\\n    \\\"--- Codigo\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"🎯 1. Objetivos\\\",\\n      \\\"🎯 2. Requisitos\\\",\\n      \\\"🎯 3. DOFA\\\",\\n      \\\"🎯 4. Flujo de interaccion\\\",\\n      \\\"🎯 5. Arquitectura\\\",\\n      \\\"🎯 6. Componentes\\\",\\n      \\\"🎯 7. Algoritmos y matematicas\\\",\\n      \\\"🎯 8. Estructura\\\",\\n      \\\"🎯 9. Plan de desarrollo\\\",\\n      \\\"🎯 Espectros de desarrollo\\\",\\n      \\\"🎯🧬 0.1 Pre-Impacto\\\",\\n      \\\"🎯🧬 0.2 Impacto\\\",\\n      \\\"🎯🧬 0.3 Post-Impacto\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"--- 🗂 Principios de programación\\\",\\n      \\\"--- 🌀 Helices de desarrollo\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🎯 3. DOFA\\\",\\n      \\\"🎯 4. Flujo de interaccion\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"_____Nombre del Proyecto\\\"\\n    ]\\n  }\\n}\\n{\\\"subsection\\\": \\\"🧠 Propósito Central\\\", \\\"descripcion\\\": \\\"Breve descripción de la función principal del proyecto, lo que resuelve o transforma.\\\", \\\"nota\\\": \\\"🎯 Define su rol único dentro de un flujo más grande (ej. preparación, procesamiento, análisis, etc.)\\\"}\\n{\\\"subsection\\\": \\\"📌 Nombre y Naturaleza\\\", \\\"atributos\\\": {\\n  \\\"Nombre completo\\\": \\\"Nombre descriptivo y claro\\\",\\n  \\\"Tipo de proyecto\\\": \\\"CLI, web, app móvil, API, etc.\\\",\\n  \\\"Licencia\\\": \\\"MIT, GPL, Apache 2.0, etc.\\\",\\n  \\\"Inspiración\\\": \\\"Modelos teóricos, referentes técnicos o biológicos\\\",\\n  \\\"Relación\\\": \\\"Parte de qué sistema, ecosistema o stack\\\",\\n  \\\"Metáfora\\\": \\\"Analogía conceptual del rol del sistema (opcional)\\\"\\n}}\\n{\\\"subsection\\\": \\\"🧬 Función en el Ecosistema\\\", \\\"sistema\\\": [\\n  {\\\"actor\\\": \\\"Actor A\\\", \\\"rol\\\": \\\"Qué produce o recibe\\\"},\\n  {\\\"actor\\\": \\\"Este proyecto\\\", \\\"rol\\\": \\\"Qué hace exactamente en ese flujo\\\"},\\n  {\\\"actor\\\": \\\"Actor B\\\", \\\"rol\\\": \\\"Cómo lo usa o transforma\\\"}\\n]}\\n{\\\"subsection\\\": \\\"⚙️ Detalles técnicos\\\", \\\"elementos\\\": {\\n  \\\"Lenguaje\\\": \\\"Lenguaje principal del código fuente\\\",\\n  \\\"Entrada esperada\\\": \\\"Formato y estructura de input\\\",\\n  \\\"Salida generada\\\": \\\"Formato y estructura de output\\\",\\n  \\\"Campos estándar\\\": \\\"Elementos obligatorios y claves\\\",\\n  \\\"CLI\\\": \\\"Comando de ejecución mínimo\\\",\\n  \\\"Modo de uso\\\": \\\"Interacción con el sistema\\\"\\n}}\\n{\\\"subsection\\\": \\\"🧪 Validaciones incluidas\\\", \\\"validaciones\\\": [\\n  {\\\"tipo\\\": \\\"Tipo de verificación (formato, duplicados, etc.)\\\", \\\"objetivo\\\": \\\"Qué error previene\\\"}\\n]}\\n{\\\"subsection\\\": \\\"📦 Distribución esperada\\\", \\\"entregables\\\": [\\n  {\\\"tipo\\\": \\\"Ejecutable, script, binario, etc.\\\", \\\"detalle\\\": \\\"Dónde o cómo se entrega\\\"}\\n]}\\n{\\\"subsection\\\": \\\"🔐 Seguridad y privacidad\\\", \\\"caracteristicas\\\": [\\n  \\\"¿Trabaja local o en la nube?\\\",\\n  \\\"¿Envía o almacena información?\\\",\\n  \\\"¿Evalúa código externo?\\\",\\n  \\\"¿Depende de APIs o servicios externos?\\\"\\n]}\\n{\\\"subsection\\\": \\\"🧬 Trazabilidad helicoidal\\\", \\\"descripcion\\\": \\\"Cómo se mide la evolución del sistema en fases o 'vueltas'\\\", \\\"principios\\\": [\\n  \\\"Cada vuelta agrega capacidad funcional\\\",\\n  \\\"Ninguna vuelta borra lo anterior, lo integra\\\",\\n  \\\"Toda vuelta tiene propósito, pruebas y entregables\\\"\\n]}\\n{\\\"subsection\\\": \\\"🧠 Público objetivo\\\", \\\"usuarios\\\": [\\n  {\\\"perfil\\\": \\\"Tipo de usuario o rol\\\", \\\"motivo\\\": \\\"Por qué este sistema le es útil\\\"}\\n]}\\n{\\\"subsection\\\": \\\"📘 Documentación incluida\\\", \\\"archivos\\\": [\\n  \\\"README.md – guía rápida y objetivo general\\\",\\n  \\\"plan_helicoidal.md – roadmap evolutivo\\\",\\n  \\\"arquitectura.md – estructura de módulos y flujos\\\",\\n  \\\"dofa.md – diagnóstico estratégico\\\",\\n  \\\"manifiesto.md – principios filosóficos o técnicos\\\"\\n]}\\n\",\"title\":\"--- 🎯 Detalles del proyecto\",\"color\":\"#002bdb\",\"modified\":\"20250531033409514\",\"type\":\"application/json\",\"tags\":\"[[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[--- 🌀 Helices de desarrollo]] [[--- Codigo]] [[🎯 1. Objetivos]] [[🎯 2. Requisitos]] [[🎯 3. DOFA]] [[🎯 4. Flujo de interaccion]] [[🎯 5. Arquitectura]] [[🎯 6. Componentes]] [[🎯 7. Algoritmos y matematicas]] [[🎯 8. Estructura]] [[🎯 9. Plan de desarrollo]] [[🎯 Espectros de desarrollo]] [[🎯🧬 0.1 Pre-Impacto]] [[🎯🧬 0.2 Impacto]] [[🎯🧬 0.3 Post-Impacto]] [[_____Nombre del Proyecto]]\",\"tmap.id\":\"517da0ac-fcff-4a05-b0e4-4ad331b49c10\"},{\"created\":\"20250417132020369\",\"text\":\"{\\n  \\\"title\\\": \\\"--- 🗂 Principios de programación\\\",\\n  \\\"id\\\": \\\"--- 🗂 Principios de programación\\\",\\n  \\\"tags\\\": [\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"🗂 Diseño\\\",\\n      \\\"🗂 Calidad del Código\\\",\\n      \\\"🗂 Modularidad y Estado\\\",\\n      \\\"🗂 Estructura de commits\\\",\\n      \\\"🗂 Usabilidad y Robustez\\\",\\n      \\\"🗂 Epigenética Computacional\\\",\\n      \\\"🗂 Evolución Semántica\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"--- 🎯 Detalles del proyecto\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🎯 5. Arquitectura\\\",\\n      \\\"🎯 6. Componentes\\\",\\n      \\\"🎯 7. Algoritmos y matematicas\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"_____Nombre del Proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler define los principios fundamentales de desarrollo utilizados en el sistema, incluyendo diseño orientado a objetos, simplicidad, modularidad, pruebas, robustez y epigenética computacional. Requiere conocer la visión general del proyecto y se aplica en decisiones arquitectónicas y de implementación.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🗂 Principios de programación\\\\nEste nodo define el marco conceptual y técnico que guía toda decisión de desarrollo en el sistema.\\\\n\\\\n### Define:\\\\n- 🗂 Diseño\\\\n- 🗂 Calidad del Código\\\\n- 🗂 Modularidad y Estado\\\\n- 🗂 Estructura de commits\\\\n- 🗂 Usabilidad y Robustez\\\\n- 🗂 Epigenética Computacional\\\\n- 🗂 Evolución Semántica\\\\n\\\\n### Requiere:\\\\n- --- 🎯 Detalles del proyecto\\\\n\\\\n### Usa:\\\\n- 🎯 5. Arquitectura\\\\n- 🎯 6. Componentes\\\\n- 🎯 7. Algoritmos y matematicas\\\\n\\\\n### Parte de:\\\\n- _____Nombre del Proyecto\\\\n\\\\n---\\\\n> Este tiddler actúa como marco técnico para todos los demás módulos del sistema. Se mantiene simple, evolutivo y enfocado en principios con analogías biológicas claras.\\\"\\n}\\n\\n{\\\"section\\\": \\\"📌 Principios Fundamentales de Programación\\\", \\\"descripcion\\\": \\\"Aplicados desde la biología a la ingeniería de software\\\"}\\n{\\\"principio\\\": \\\"🔸 Diseño Orientado a Objetos\\\", \\\"tag\\\": \\\"🗂 Diseño\\\", \\\"reglas\\\": [\\n  \\\"Una responsabilidad clara (SRP)\\\",\\n  \\\"Abierto a extensión y no romper el sistema si cambia (OCP)\\\",\\n  \\\"Sustituible, encapsulado y compuesto en vez de heredado\\\"\\n], \\\"analogía\\\": \\\"🧬 Un gen mutado no debe romper la hélice: debe integrarse con armonía.\\\"}\\n{\\\"principio\\\": \\\"🔸 Simplicidad y Código Limpio\\\", \\\"tag\\\": \\\"🗂 Calidad\\\", \\\"reglas\\\": [\\n  \\\"Diseñamos para ser entendidos: KISS\\\",\\n  \\\"No codificamos por si acaso: YAGNI\\\",\\n  \\\"No duplicamos funciones que ya están en el ADN: DRY\\\"\\n], \\\"analogía\\\": \\\"🧬 La redundancia en el genoma puede causar enfermedades. Lo mismo en el código.\\\"}\\n{\\\"principio\\\": \\\"🔸 Modularidad y Estado\\\", \\\"tag\\\": \\\"🗂 Modularidad\\\", \\\"reglas\\\": [\\n  \\\"Separación de intereses = genes especializados\\\",\\n  \\\"Estado compartido mínimo = evitar colisiones genéticas\\\",\\n  \\\"Inmutabilidad = estabilidad en la expresión\\\"\\n], \\\"analogía\\\": \\\"🧬 Cada gen se expresa cuando debe, no todo el tiempo.\\\"}\\n{\\\"principio\\\": \\\"🔸 Pruebas y Claridad\\\", \\\"tag\\\": \\\"🗂 Commits\\\", \\\"reglas\\\": [\\n  \\\"TDD = evolución dirigida por entorno\\\",\\n  \\\"El código debe ser comprensible → el ADN necesita leerse para replicarse con precisión\\\"\\n], \\\"analogía\\\": \\\"🧬 Sin pruebas, el sistema no puede regenerarse ni evolucionar sin errores.\\\"}\\n{\\\"principio\\\": \\\"🔸 Usabilidad y Robustez\\\", \\\"tag\\\": \\\"🗂 Robustez\\\", \\\"reglas\\\": [\\n  \\\"Principio del menor asombro → expresión predecible\\\",\\n  \\\"Convenciones claras → coherencia semántica\\\",\\n  \\\"Programación defensiva → inmunidad ante entradas hostiles\\\"\\n], \\\"analogía\\\": \\\"🧬 Un gen bien diseñado se comporta igual, sin importar el ambiente.\\\"}\\n{\\\"section\\\": \\\"🧬 Modelo Genético-Helicoidal\\\", \\\"tag\\\": \\\"🗂 Evolución Semántica\\\", \\\"tabla\\\": [\\n  {\\\"concepto\\\": \\\"Gen funcional\\\", \\\"interpretacion\\\": \\\"Cada módulo del pipeline representa una unidad de comportamiento específico (`validator.py`, `parser.py`, etc.)\\\"},\\n  {\\\"concepto\\\": \\\"Expresión génica\\\", \\\"interpretacion\\\": \\\"El módulo se activa en una vuelta específica del desarrollo (por CLI, test, o integración)\\\"},\\n  {\\\"concepto\\\": \\\"Mutación semántica\\\", \\\"interpretacion\\\": \\\"Cambios en el código que refinan o transforman la funcionalidad sin perder su rol esencial\\\"},\\n  {\\\"concepto\\\": \\\"Epigenética de configuración\\\", \\\"interpretacion\\\": \\\"Preferencias externas (como `config.yaml`, flags CLI) que determinan cuándo y cómo se activa el módulo\\\"},\\n  {\\\"concepto\\\": \\\"Fenotipo técnico\\\", \\\"interpretacion\\\": \\\"El resultado observable de la expresión del módulo: archivos `.jsonl`, logs, respuestas API, etc.\\\"},\\n  {\\\"concepto\\\": \\\"Derivada de madurez c′(t)\\\", \\\"interpretacion\\\": \\\"Tasa de evolución semántica del módulo: integración, cobertura, documentación, claridad\\\"},\\n  {\\\"concepto\\\": \\\"Derivada de cambio r′(t)\\\", \\\"interpretacion\\\": \\\"Amplitud de refactorización o expansión técnica del módulo en una vuelta\\\"}\\n], \\\"relaciones_internas\\\": [\\n  \\\"Un gen puede tener múltiples mutaciones a lo largo de distintas vueltas, pero su propósito se mantiene.\\\",\\n  \\\"La madurez de un módulo no depende solo de su código, sino de su contexto de ejecución y sus condiciones de activación.\\\"\\n], \\\"frase\\\": \\\"🧬 Un sistema evoluciona cuando sus genes se expresan con mayor claridad, precisión y adaptabilidad.\\\"}\\n{\\\"principio\\\": \\\"🔸 Epigenética Computacional\\\", \\\"tag\\\": \\\"🗂 Epigenética Computacional\\\", \\\"reglas\\\": [\\n  \\\"Activarse solo si el entorno lo requiere\\\",\\n  \\\"Tener un dominio condicional claro\\\",\\n  \\\"Regularse mutuamente sin romper el sistema\\\",\\n  \\\"Aportar trazabilidad y eficiencia semántica\\\"\\n], \\\"analogía\\\": \\\"🧬 Un gen expresado sin necesidad, genera ruido. Un gen bien activado, transforma el sistema.\\\"}\\n{\\\"section\\\": \\\"🧠 ¿Qué permite esta integración?\\\", \\\"beneficios\\\": [\\n  \\\"Mapear desarrollo como una curva viva y analizable\\\",\\n  \\\"Documentar cada módulo como una unidad genética navegable\\\",\\n  \\\"Visualizar el pipeline como un organismo que madura y se adapta\\\",\\n  \\\"Conectar cada principio de software con su par biomolecular\\\",\\n  \\\"Permitir que una IA lea y entienda el sistema como un ser en evolución y no como un conjunto de archivos planos\\\"\\n]}\\n{\\\"section\\\": \\\"📘 Conclusión\\\", \\\"descripcion\\\": \\\"OpenPages Pipeline es una hélice viva. No es un software que se escribe, es un organismo que se expresa. Cada vuelta es una nueva capa de significado; cada función, un gen en acción.\\\", \\\"cita\\\": \\\"“No versionamos. Evolucionamos.”\\\"}\\n\",\"type\":\"application/json\",\"title\":\"--- 🗂 Principios de programación\",\"modified\":\"20250531033820456\",\"tags\":\"[[--- 🗂 Principios de programación]] [[--- 🎯 Detalles del proyecto]] [[🗂 Diseño]] [[🗂 Estructura de commits]] [[🗂 Modularidad y Estado]] [[🗂 Calidad del Código]] [[🗂 Usabilidad y Robustez]] [[🗂 Evolución Semántica]] [[🗂 Epigenética Computacional]] [[_____Nombre del Proyecto]]\",\"color\":\"#dbbe00\",\"tmap.id\":\"fb77e866-d7bd-4e8b-9d29-7459616658a9\",\"tmap.edges\":\"{\\\"1ed8d863-af9e-4653-b52a-7170ffb2c31c\\\":{\\\"to\\\":\\\"a30a6844-bece-4f9c-add6-6f2d45090b42\\\",\\\"type\\\":\\\"unknown\\\"}}\"},{\"created\":\"20250417170811837\",\"text\":\"{\\n  \\\"title\\\": \\\"--- Codigo\\\",\\n  \\\"id\\\": \\\"--- Codigo\\\",\\n  \\\"tags\\\": [\\n    \\\"--- Codigo\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"--- 🌀 Helices de desarrollo\\\",\\n    \\\"_____Nombre del Proyecto\\\",\\n    \\\"🗂 Calidad del Código\\\",\\n    \\\"🗂 Diseño\\\",\\n    \\\"🗂 Epigenética Computacional\\\",\\n    \\\"🗂 Estructura de commits\\\",\\n    \\\"🗂 Evolución Semántica\\\",\\n    \\\"🗂 Modularidad y Estado\\\",\\n    \\\"🗂 Usabilidad y Robustez\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"🧠 Nivel 2: Sistemas del Cuerpo\\\",\\n      \\\"🧩 Nivel 3: Órganos del Sistema\\\",\\n      \\\"🧠 Nivel 4: Flujo Funcional General\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"--- 🎯 Detalles del proyecto\\\",\\n      \\\"--- 🗂 Principios de programación\\\",\\n      \\\"--- 🌀 Helices de desarrollo\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🗂 Calidad del Código\\\",\\n      \\\"🗂 Diseño\\\",\\n      \\\"🗂 Epigenética Computacional\\\",\\n      \\\"🗂 Estructura de commits\\\",\\n      \\\"🗂 Evolución Semántica\\\",\\n      \\\"🗂 Modularidad y Estado\\\",\\n      \\\"🗂 Usabilidad y Robustez\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"_____Nombre del Proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler organiza la estructura funcional del sistema como si fuera un organismo biológico. Define sus sistemas internos, órganos y el flujo de procesamiento desde entrada hasta salida.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🧠 Anatomía del Código\\\\nModelo funcional basado en una analogía biológica.\\\\n\\\\n### Define:\\\\n- 🧠 Nivel 2: Sistemas del Cuerpo\\\\n- 🧩 Nivel 3: Órganos del Sistema\\\\n- 🧠 Nivel 4: Flujo Funcional General\\\\n\\\\n### Requiere:\\\\n- --- 🎯 Detalles del proyecto\\\\n- --- 🗂 Principios de programación\\\\n- --- 🌀 Helices de desarrollo\\\\n\\\\n### Usa:\\\\n- 🗂 Calidad del Código\\\\n- 🗂 Diseño\\\\n- 🗂 Epigenética Computacional\\\\n- 🗂 Estructura de commits\\\\n- 🗂 Evolución Semántica\\\\n- 🗂 Modularidad y Estado\\\\n- 🗂 Usabilidad y Robustez\\\\n\\\\n### Parte de:\\\\n- _____Nombre del Proyecto\\\\n\\\\n---\\\\n> Este nodo establece las bases estructurales sobre las que se codifican las funcionalidades del sistema. Permite mantener la coherencia, trazabilidad y evolución desde un núcleo anatómico bien definido.\\\"\\n}\\n{\\\"section\\\": \\\"📘 Anatomía del Sistema\\\", \\\"titulo\\\": \\\"Nombre del Proyecto\\\", \\\"descripcion\\\": \\\"Modelo general de arquitectura funcional inspirado en biología sistémica. Organiza el software como un organismo dividido en niveles: organismo, sistemas, órganos y flujo funcional.\\\"}\\n{\\\"nivel\\\": \\\"🧱 Nivel 1: El Organismo\\\", \\\"descripcion\\\": \\\"Representa el sistema completo como una unidad coherente. Tiene un propósito definido, recibe entradas, las transforma internamente y produce salidas útiles. Se comporta como un organismo funcional.\\\"}\\n{\\\"nivel\\\": \\\"🧠 Nivel 2: Sistemas del Cuerpo\\\", \\\"tipo\\\": \\\"Sistema y Función\\\", \\\"sistemas\\\": [\\n  {\\\"sistema\\\": \\\"Sistema de Entrada\\\", \\\"funcion\\\": \\\"Gestiona cómo se reciben los datos o estímulos desde el exterior (archivos, API, UI, sensores, etc.)\\\"},\\n  {\\\"sistema\\\": \\\"Sistema de Transformación\\\", \\\"funcion\\\": \\\"Procesa o transforma los datos siguiendo reglas internas (normalización, parseo, análisis, validación semántica)\\\"},\\n  {\\\"sistema\\\": \\\"Sistema de Coordinación\\\", \\\"funcion\\\": \\\"Orquesta el comportamiento general del sistema y establece el flujo de información entre módulos\\\"},\\n  {\\\"sistema\\\": \\\"Sistema de Salida\\\", \\\"funcion\\\": \\\"Entrega resultados, respuestas o datos ya procesados a otros sistemas o usuarios\\\"},\\n  {\\\"sistema\\\": \\\"Sistema de Validación\\\", \\\"funcion\\\": \\\"Verifica la integridad, formato, valores o reglas de negocio de los datos entrantes\\\"},\\n  {\\\"sistema\\\": \\\"Sistema de Interfaz\\\", \\\"funcion\\\": \\\"Permite interacción humana o de otras máquinas (CLI, API, interfaces gráficas o comandos externos)\\\"},\\n  {\\\"sistema\\\": \\\"Sistema de Definición Estructural\\\", \\\"funcion\\\": \\\"Contiene los esquemas, contratos o modelos de datos que definen la forma interna del conocimiento\\\"},\\n  {\\\"sistema\\\": \\\"Sistema de Consistencia Interna\\\", \\\"funcion\\\": \\\"Mantiene coherencia de campos como fechas, identificadores, relaciones y estados\\\"}\\n]}\\n{\\\"nivel\\\": \\\"🧩 Nivel 3: Órganos del Sistema\\\", \\\"descripcion\\\": \\\"Cada sistema está compuesto por órganos: componentes especializados que cumplen funciones concretas. Los órganos son instancias técnicas específicas (módulos, funciones, clases o servicios) que realizan una tarea clara y delimitada dentro de su sistema.\\\"}\\n{\\\"nivel\\\": \\\"🧠 Nivel 4: Flujo Funcional General\\\", \\\"flujo\\\": [\\n  \\\"Recepción de datos externos o comandos\\\",\\n  \\\"Conversión a estructuras internas consistentes\\\",\\n  \\\"Verificación de integridad y formato\\\",\\n  \\\"Transformación estructural o análisis\\\",\\n  \\\"Producción de salidas útiles\\\"\\n]}\\n{\\\"subsection\\\": \\\"📎 Notas Técnicas\\\", \\\"descripcion\\\": \\\"Este modelo permite estructurar sistemas complejos de manera legible, mantenible y escalable. Cada componente cumple una función delimitada dentro de un sistema mayor coordinado.\\\"}\\n\",\"type\":\"application/json\",\"title\":\"--- Codigo\",\"modified\":\"20250531034836091\",\"tags\":\"[[--- Codigo]] [[--- 🌀 Helices de desarrollo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[_____Nombre del Proyecto]] [[🗂 Calidad del Código]] [[🗂 Diseño]] [[🗂 Epigenética Computacional]] [[🗂 Estructura de commits]] [[🗂 Evolución Semántica]] [[🗂 Modularidad y Estado]] [[🗂 Usabilidad y Robustez]]\",\"tmap.id\":\"6a302a06-5761-4a66-b58d-d79b5638d4b9\",\"color\":\"#dc1800\"},{\"created\":\"20250423034529818\",\"text\":\"{\\n  \\\"title\\\": \\\"⚙️ Automatización\\\",\\n  \\\"id\\\": \\\"⚙️ Automatización\\\",\\n  \\\"tags\\\": [\\n    \\\"⚙️ Automatización\\\",\\n    \\\"--- Codigo\\\",\\n    \\\"--- 🗂 Principios de programación\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"🧩 Script Orquestador\\\",\\n      \\\"🧩 Workflow CI/CD\\\",\\n      \\\"🧩 Pruebas Automatizadas\\\",\\n      \\\"🧩 Gestión de Dependencias\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"--- Codigo\\\",\\n      \\\"--- 🗂 Principios de programación\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🗂 Calidad del Código\\\",\\n      \\\"🗂 Estructura de commits\\\",\\n      \\\"🗂 Epigenética Computacional\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"_____Nombre del Proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler representa el subsistema de automatización técnica: orquesta tareas, ejecuta flujos CI/CD, pruebas y asegura consistencia entre ciclos de desarrollo.\\\",\\n  \\\"textMarkdown\\\": \\\"## ⚙️ Sistema de Automatización\\\\nRegulador técnico del sistema: scripts, CI/CD, validaciones.\\\\n\\\\n### Define:\\\\n- 🧩 Script Orquestador\\\\n- 🧩 Workflow CI/CD\\\\n- 🧩 Pruebas Automatizadas\\\\n- 🧩 Gestión de Dependencias\\\\n\\\\n### Requiere:\\\\n- --- Codigo\\\\n- --- 🗂 Principios de programación\\\\n\\\\n### Usa:\\\\n- 🗂 Calidad del Código\\\\n- 🗂 Estructura de commits\\\\n- 🗂 Epigenética Computacional\\\\n\\\\n### Parte de:\\\\n- _____Nombre del Proyecto\\\\n\\\\n---\\\\n> Este tiddler regula los procesos técnicos del sistema como un sistema endocrino computacional. Clave para flujos reproducibles y colaboración distribuida.\\\"\\n}\\n{\\\"section\\\": \\\"⚙️ 🧬 Sistema de Automatización\\\", \\\"titulo\\\": \\\"Nombre del Sistema\\\", \\\"descripcion\\\": \\\"Sistema que regula el comportamiento técnico del proyecto mediante scripts, flujos automatizados y acciones continuas. Equivale al sistema endocrino, que regula funciones internas mediante señales específicas.\\\"}\\n\\n{\\\"subsection\\\": \\\"🧠 Rol del Sistema de Automatización\\\", \\\"comparaciones\\\": [\\n  {\\\"funcion\\\": \\\"Orquestar tareas técnicas\\\", \\\"analogía\\\": \\\"Coordinación central de actividades internas (Hipotálamo)\\\"},\\n  {\\\"funcion\\\": \\\"Construcción y despliegue\\\", \\\"analogía\\\": \\\"Maduración y reproducción técnica (Hormonas de crecimiento / CI/CD)\\\"},\\n  {\\\"funcion\\\": \\\"Validación y pruebas\\\", \\\"analogía\\\": \\\"Defensa y homeostasis técnica (Hormonas inmunológicas)\\\"},\\n  {\\\"funcion\\\": \\\"Ejecutar flujos locales o remotos\\\", \\\"analogía\\\": \\\"Liberación de señales que activan acciones específicas\\\"}\\n]}\\n\\n{\\\"subsection\\\": \\\"📦 Componentes Funcionales\\\", \\\"componentes\\\": [\\n  {\\\"tipo\\\": \\\"Script Orquestador\\\", \\\"descripcion\\\": \\\"Define tareas recurrentes como compilación, pruebas, limpieza o formateo de código. Ej.: Makefile, Rakefile, NPM scripts\\\"},\\n  {\\\"tipo\\\": \\\"Workflow CI/CD\\\", \\\"descripcion\\\": \\\"Define flujos automatizados para integración y despliegue continuo. Ej.: GitHub Actions, GitLab CI, Jenkinsfile\\\"},\\n  {\\\"tipo\\\": \\\"Script de Utilidad\\\", \\\"descripcion\\\": \\\"Herramientas auxiliares para validación, estadísticas, limpieza, conversión de formatos\\\"},\\n  {\\\"tipo\\\": \\\"Pruebas Automatizadas\\\", \\\"descripcion\\\": \\\"Tests unitarios, de integración o validación que se ejecutan localmente o en CI\\\"},\\n  {\\\"tipo\\\": \\\"Gestión de Dependencias\\\", \\\"descripcion\\\": \\\"Archivos que definen y verifican el entorno de ejecución (módulos, bibliotecas, versiones)\\\"},\\n  {\\\"tipo\\\": \\\"Documentación Evolutiva\\\", \\\"descripcion\\\": \\\"Archivos de planificación que determinan en qué fases aplicar automatización o escalar procesos\\\"}\\n]}\\n\\n{\\\"subsection\\\": \\\"🔁 Interacción con otros sistemas\\\", \\\"interacciones\\\": [\\n  {\\\"conecta_con\\\": \\\"Sistema de Entrada / Coordinación\\\", \\\"motivo\\\": \\\"Automatiza comandos de ejecución o validación desde interfaz principal\\\"},\\n  {\\\"conecta_con\\\": \\\"Sistema de Validación\\\", \\\"motivo\\\": \\\"Ejecuta pruebas automáticas sobre datos o funciones\\\"},\\n  {\\\"conecta_con\\\": \\\"Sistema de Transformación / Salida\\\", \\\"motivo\\\": \\\"Verifica salidas o limpia resultados antes de distribuir\\\"},\\n  {\\\"conecta_con\\\": \\\"Repositorio y Servidor CI\\\", \\\"motivo\\\": \\\"Ejecuta flujos en eventos de código: push, pull request, release\\\"}\\n]}\\n\\n{\\\"subsection\\\": \\\"📎 Notas Técnicas\\\", \\\"descripcion\\\": \\\"Este sistema permite mantener consistencia técnica, calidad del código y ciclos de desarrollo reproducibles. Ideal para equipos distribuidos y flujos CI/CD modernos.\\\"}\\n\",\"title\":\"⚙️ Automatización\",\"modified\":\"20250531035442594\",\"tags\":\"[[⚙️ Automatización]] [[--- Codigo]]\",\"tmap.id\":\"82432622-5ac7-4a03-8836-125d7dcf88bd\",\"type\":\"application/json\"},{\"created\":\"20250531042342198\",\"text\":\"\",\"tags\":\"[[--- Codigo]]\",\"title\":\"⚙️ Seguridad\",\"modified\":\"20250531042359702\",\"type\":\"application/json\",\"tmap.id\":\"60559ff0-ea44-4885-8ed8-5c9ae043a62a\"},{\"created\":\"20250423145805723\",\"text\":\"{\\n  \\\"title\\\": \\\"⚙️📘 Documentacion\\\",\\n  \\\"id\\\": \\\"⚙️📘 Documentacion\\\",\\n  \\\"tags\\\": [\\n    \\\"⚙️📘 Documentacion\\\",\\n    \\\"--- Codigo\\\",\\n    \\\"--- 🗂 Principios de programación\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"📘 Tipos de Documentos Técnicos\\\",\\n      \\\"📘 Registro de Cambios\\\",\\n      \\\"📘 Convenciones de Contribución\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"--- Codigo\\\",\\n      \\\"--- 🗂 Principios de programación\\\",\\n      \\\"⚙️ Automatización\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🎯 1. Objetivos\\\",\\n      \\\"🎯 5. Arquitectura\\\",\\n      \\\"🎯 9. Plan de desarrollo\\\",\\n      \\\"🗂 Estructura de commits\\\",\\n      \\\"🗂 Epigenética Computacional\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"_____Nombre del Proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler representa el sistema cognitivo del proyecto. Conserva el conocimiento estructural, registra el cambio, comunica propósitos y facilita el aprendizaje autónomo.\\\",\\n  \\\"textMarkdown\\\": \\\"## 📘 Sistema de Documentación\\\\nEje cognitivo del sistema: memoria, comunicación y entendimiento autónomo.\\\\n\\\\n### Define:\\\\n- 📘 Tipos de Documentos Técnicos\\\\n- 📘 Registro de Cambios\\\\n- 📘 Convenciones de Contribución\\\\n\\\\n### Requiere:\\\\n- --- Codigo\\\\n- --- 🗂 Principios de programación\\\\n- ⚙️ Automatización\\\\n\\\\n### Usa:\\\\n- 🎯 1. Objetivos\\\\n- 🎯 5. Arquitectura\\\\n- 🎯 9. Plan de desarrollo\\\\n- 🗂 Estructura de commits\\\\n- 🗂 Epigenética Computacional\\\\n\\\\n### Parte de:\\\\n- _____Nombre del Proyecto\\\\n\\\\n---\\\\n> Este subsistema sostiene la evolución y sostenibilidad del proyecto al consolidar y comunicar su conocimiento operativo.\\\"\\n}\\n{\\\"section\\\": \\\"📚 Sistema de Documentación\\\", \\\"titulo\\\": \\\"Nombre del Sistema\\\", \\\"descripcion\\\": \\\"Este sistema mantiene, organiza y comunica el conocimiento estructural de un proyecto. Opera como un sistema cognitivo: consolida la arquitectura, guarda historia, facilita el aprendizaje y comunica hacia afuera.\\\"}\\n\\n{\\\"subsection\\\": \\\"🧠 Rol del Sistema de Documentación\\\", \\\"comparaciones\\\": [\\n  {\\\"funcion\\\": \\\"Describir la arquitectura y relaciones del sistema\\\", \\\"analogía_biológica\\\": \\\"Modelo estructural de la corteza frontal\\\"},\\n  {\\\"funcion\\\": \\\"Registrar cambios, versiones y maduración del sistema\\\", \\\"analogía_biológica\\\": \\\"Memoria episódica (hipocampo)\\\"},\\n  {\\\"funcion\\\": \\\"Comunicar propósito, instalación y uso\\\", \\\"analogía_biológica\\\": \\\"Lenguaje como función de expresión\\\"},\\n  {\\\"funcion\\\": \\\"Permitir entendimiento sin supervisión directa\\\", \\\"analogía_biológica\\\": \\\"Capacidad de aprendizaje autónomo del neocórtex\\\"}\\n]}\\n\\n{\\\"subsection\\\": \\\"📄 Tipos de Documentos Técnicos\\\", \\\"tipos\\\": [\\n  {\\\"tipo\\\": \\\"README\\\", \\\"descripcion\\\": \\\"Visión general, propósito, instalación y ejemplo de uso\\\"},\\n  {\\\"tipo\\\": \\\"Plan de Desarrollo\\\", \\\"descripcion\\\": \\\"Roadmap o estrategia de evolución (por versiones o vueltas)\\\"},\\n  {\\\"tipo\\\": \\\"Arquitectura\\\", \\\"descripcion\\\": \\\"Estructura interna, dependencias, flujo de datos, componentes\\\"},\\n  {\\\"tipo\\\": \\\"Guías de Contribución\\\", \\\"descripcion\\\": \\\"Convenciones, estructura del repositorio, testeo, licencias\\\"},\\n  {\\\"tipo\\\": \\\"Bitácora de Cambios\\\", \\\"descripcion\\\": \\\"Changelog, DOFA, decisiones técnicas clave\\\"}\\n]}\\n\\n{\\\"subsection\\\": \\\"🔗 Integración con Otros Sistemas\\\", \\\"interacciones\\\": [\\n  {\\\"conecta_con\\\": \\\"Sistema de Automatización\\\", \\\"motivo\\\": \\\"Los scripts y workflows usan y validan documentación para reproducibilidad\\\"},\\n  {\\\"conecta_con\\\": \\\"Sistema Nervioso / CLI\\\", \\\"motivo\\\": \\\"Ayuda y flags documentados forman parte del sistema cognitivo\\\"},\\n  {\\\"conecta_con\\\": \\\"Sistema Inmunológico\\\", \\\"motivo\\\": \\\"Las políticas y validaciones están definidas en la documentación técnica\\\"},\\n  {\\\"conecta_con\\\": \\\"Usuarios y colaboradores\\\", \\\"motivo\\\": \\\"Permite la comprensión y uso del sistema sin intervención directa\\\"}\\n]}\\n\\n{\\\"subsection\\\": \\\"📎 Notas Técnicas\\\", \\\"descripcion\\\": \\\"El sistema de documentación es clave para la sostenibilidad del proyecto. Permite onboarding, evolución, colaboración externa y auditabilidad. Debe mantenerse versionado, accesible y alineado con el código funcional.\\\"}\\n\",\"type\":\"application/json\",\"title\":\"⚙️📘 Documentacion\",\"modified\":\"20250531035640668\",\"tags\":\"[[⚙️📘 Documentacion]] [[--- Codigo]]\",\"tmap.id\":\"4dfbf1cf-2b67-45f2-908d-42df2ac41aff\"},{\"created\":\"20250423034500542\",\"text\":\"{\\n  \\\"title\\\": \\\"⚙️🧪 tests/\\\",\\n  \\\"id\\\": \\\"⚙️🧪 tests/\\\",\\n  \\\"tags\\\": [\\n    \\\"⚙️🧪 tests/\\\",\\n    \\\"--- Codigo\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"⚙️🧪 Tipos de Validación\\\",\\n      \\\"⚙️🧪 Métodos de Activación\\\",\\n      \\\"⚙️🧪 Sistema Inmunológico\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🎯 2. Requisitos\\\",\\n      \\\"🎯 4. Flujo de interaccion\\\",\\n      \\\"🎯 6. Componentes\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"🗂 Usabilidad y Robustez\\\",\\n      \\\"🗂 Modularidad y Estado\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"--- Codigo\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler representa el sistema inmunológico del código: evita que estructuras inválidas contaminen el sistema. Aplica validaciones antes de integrar entradas al flujo, y está conectado al parser, writer y CI/CD.\\\",\\n  \\\"textMarkdown\\\": \\\"## ⚙️🧪 Sistema Inmunológico de Tests\\\\n\\\\nEste nodo valida y protege el sistema antes de permitir que datos pasen a otras fases.\\\\n\\\\n### Define:\\\\n- ⚙️🧪 Tipos de Validación\\\\n- ⚙️🧪 Métodos de Activación\\\\n- ⚙️🧪 Sistema Inmunológico\\\\n\\\\n### Usa:\\\\n- 🎯 2. Requisitos\\\\n- 🎯 4. Flujo de interaccion\\\\n- 🎯 6. Componentes\\\\n\\\\n### Requiere:\\\\n- 🗂 Usabilidad y Robustez\\\\n- 🗂 Modularidad y Estado\\\\n\\\\n### Parte de:\\\\n- --- Codigo\\\\n\\\\n---\\\\n> Este sistema inmunológico previene fallas silenciosas y promueve integridad estructural desde el diseño del flujo, no como parche posterior.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"🧪 Sistema Inmunológico\\\",\\n  \\\"titulo\\\": \\\"Nombre del Proyecto o Componente\\\",\\n  \\\"descripcion\\\": \\\"Este sistema previene fallas al detectar datos inválidos, estructuras corruptas o entradas malformadas antes de que se integren al sistema principal o sean escritas como salida definitiva.\\\"\\n}\\n{\\n  \\\"subsection\\\": \\\"🧠 Propósito Biológico\\\",\\n  \\\"funcion\\\": \\\"Validar estructuras, formatos y valores antes de continuar el flujo\\\",\\n  \\\"accion\\\": \\\"Detener, reportar o transformar entradas inválidas según reglas explícitas\\\",\\n  \\\"contexto\\\": \\\"Evita contaminación de datos de salida, errores en el runtime o fallas lógicas downstream\\\"\\n}\\n{\\n  \\\"subsection\\\": \\\"🧪 Tipos de Validación\\\",\\n  \\\"validaciones\\\": [\\n    {\\n      \\\"tipo\\\": \\\"Formato de entrada\\\",\\n      \\\"objetivo\\\": \\\"Verificar que archivos sean parseables y cumplan con el esquema esperado\\\"\\n    },\\n    {\\n      \\\"tipo\\\": \\\"Campos requeridos\\\",\\n      \\\"objetivo\\\": \\\"Asegurar presencia de claves mínimas como `title`, `text`, `id`\\\"\\n    },\\n    {\\n      \\\"tipo\\\": \\\"Valores únicos\\\",\\n      \\\"objetivo\\\": \\\"Evitar duplicados en campos clave como `slug`, `uuid`, `record_id`\\\"\\n    },\\n    {\\n      \\\"tipo\\\": \\\"Fechas válidas\\\",\\n      \\\"objetivo\\\": \\\"Detectar y normalizar timestamps inválidos o ausentes\\\"\\n    },\\n    {\\n      \\\"tipo\\\": \\\"Rangos numéricos o longitudes\\\",\\n      \\\"objetivo\\\": \\\"Rechazar entradas con valores extremos, negativos o mal definidos\\\"\\n    }\\n  ]\\n}\\n{\\n  \\\"subsection\\\": \\\"🧩 Métodos de Activación\\\",\\n  \\\"detalles\\\": [\\n    {\\n      \\\"modo\\\": \\\"En tiempo de ejecución\\\",\\n      \\\"tecnica\\\": \\\"Validaciones previas a transformaciones o escritura\\\"\\n    },\\n    {\\n      \\\"modo\\\": \\\"Automatizado\\\",\\n      \\\"tecnica\\\": \\\"Pruebas unitarias o integración que simulan entradas inválidas\\\"\\n    },\\n    {\\n      \\\"modo\\\": \\\"En CI/CD\\\",\\n      \\\"tecnica\\\": \\\"Linter, test de sanitización, validadores de esquemas\\\"\\n    }\\n  ]\\n}\\n{\\n  \\\"subsection\\\": \\\"🔗 Integración con Otros Sistemas\\\",\\n  \\\"interacciones\\\": [\\n    {\\n      \\\"conecta_con\\\": \\\"Sistema Genético / Parser\\\",\\n      \\\"motivo\\\": \\\"Solo transforma si los datos son válidos\\\"\\n    },\\n    {\\n      \\\"conecta_con\\\": \\\"Sistema Excretor / Writer\\\",\\n      \\\"motivo\\\": \\\"Previene que datos corruptos sean exportados como salida final\\\"\\n    },\\n    {\\n      \\\"conecta_con\\\": \\\"Sistema de Automatización\\\",\\n      \\\"motivo\\\": \\\"Ejecución automática de validadores y pruebas sanitarias\\\"\\n    }\\n  ]\\n}\\n{\\n  \\\"subsection\\\": \\\"📎 Notas Técnicas\\\",\\n  \\\"descripcion\\\": \\\"El sistema inmunológico debe ser modular, reutilizable y observable. Los errores deben ser claros, trazables y no destructivos. Se recomienda aislar validaciones en funciones puras y usar mensajes consistentes para facilitar debugging y soporte.\\\"\\n}\\n\",\"title\":\"⚙️🧪 tests/\",\"modified\":\"20250531035831986\",\"tags\":\"[[⚙️🧪 tests/]] [[--- Codigo]]\",\"tmap.id\":\"1fb449db-e799-42e9-a47a-5ebac65a5fef\",\"type\":\"application/json\"},{\"created\":\"20250423034437663\",\"text\":\"{\\n  \\\"title\\\": \\\"⚙️🧬 src/\\\",\\n  \\\"id\\\": \\\"⚙️🧬 src/\\\",\\n  \\\"tags\\\": [\\n    \\\"⚙️🧬 src/\\\",\\n    \\\"--- Codigo\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"parte_de\\\": [\\n      \\\"--- Codigo\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"⚙️🧪 tests/\\\",\\n      \\\"🎯 6. Componentes\\\",\\n      \\\"🎯 7. Algoritmos y matematicas\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"🗂 Modularidad y Estado\\\",\\n      \\\"🗂 Diseño\\\",\\n      \\\"🗂 Calidad del Código\\\"\\n    ],\\n    \\\"define\\\": [\\n      \\\"⚙️🧬 src/ estructura\\\",\\n      \\\"⚙️🧬 src/ módulos\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler representa el contenedor del código fuente activo del sistema. Se basa en principios de diseño y calidad, e implementa directamente módulos funcionales. Usa componentes, algoritmos y se conecta con tests. Es parte del núcleo de Código.\\\",\\n  \\\"textMarkdown\\\": \\\"## ⚙️🧬 src/\\\\nContenedor principal del código fuente funcional y operativo del sistema.\\\\n\\\\n### Parte de:\\\\n- --- Codigo\\\\n\\\\n### Usa:\\\\n- ⚙️🧪 tests/\\\\n- 🎯 6. Componentes\\\\n- 🎯 7. Algoritmos y matematicas\\\\n\\\\n### Requiere:\\\\n- 🗂 Modularidad y Estado\\\\n- 🗂 Diseño\\\\n- 🗂 Calidad del Código\\\\n\\\\n### Define:\\\\n- ⚙️🧬 src/ estructura\\\\n- ⚙️🧬 src/ módulos\\\\n\\\\n---\\\\n> src/ contiene la evolución activa del sistema. Es el espacio donde las decisiones arquitectónicas se hacen código. Respeta jerarquía, separa dominios y prepara el sistema para escalar.\\\"\\n}\\n\\n{\\n  \\\"section\\\": \\\"🧱 ¿Qué es src/ en [Nombre del Proyecto]?\\\",\\n  \\\"descripcion\\\": \\\"Contenedor principal del código fuente funcional. Representa el núcleo estructural del proyecto donde se alojan los módulos activos y sistemas que ejecutan la lógica central.\\\"\\n}\\n{\\n  \\\"subsection\\\": \\\"✅ ¿Por qué usar src/ en este proyecto?\\\",\\n  \\\"justificacion\\\": [\\n    {\\n      \\\"ventaja\\\": \\\"🔍 Claridad estructural\\\",\\n      \\\"resultado\\\": \\\"Separa explícitamente el código fuente de otras áreas como documentación, scripts o pruebas automatizadas\\\"\\n    },\\n    {\\n      \\\"ventaja\\\": \\\"🧪 Organización de pruebas\\\",\\n      \\\"resultado\\\": \\\"Permite mantener una jerarquía limpia al tener tests/ como carpeta paralela, evitando mezclas entre lógica y verificación\\\"\\n    },\\n    {\\n      \\\"ventaja\\\": \\\"🚀 Escalabilidad\\\",\\n      \\\"resultado\\\": \\\"Permite integrar estructuras avanzadas como cmd/, pkg/, internal/, adaptándose a arquitecturas más complejas sin romper orden\\\"\\n    },\\n    {\\n      \\\"ventaja\\\": \\\"🧬 Evolución modular\\\",\\n      \\\"resultado\\\": \\\"Cada componente o módulo puede crecer y refactorizarse dentro de src sin afectar archivos raíz ni la arquitectura general\\\"\\n    },\\n    {\\n      \\\"ventaja\\\": \\\"📦 Empaquetado coherente\\\",\\n      \\\"resultado\\\": \\\"Facilita distribución binaria o empaquetado del sistema sin incluir archivos no esenciales\\\"\\n    }\\n  ]\\n}\\n\",\"title\":\"⚙️🧬 src/\",\"modified\":\"20250531035952662\",\"tags\":\"[[⚙️🧬 src/]] [[--- Codigo]]\",\"tmap.id\":\"c46c9026-89e4-4895-9856-698e0bea13d6\",\"type\":\"application/json\"},{\"created\":\"20250423151515431\",\"text\":\"{\\n  \\\"title\\\": \\\"⚙️🛠 scripts/\\\",\\n  \\\"id\\\": \\\"⚙️🛠 scripts/\\\",\\n  \\\"tags\\\": [\\n    \\\"⚙️🛠 scripts/\\\",\\n    \\\"--- Codigo\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"parte_de\\\": [\\n      \\\"--- Codigo\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🧾 Módulo de salida (writer)\\\",\\n      \\\"⚙️🧪 tests/\\\",\\n      \\\"⚙️🧬 src/\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"🗂 Calidad del Código\\\"\\n    ],\\n    \\\"define\\\": [\\n      \\\"⚙️🛠 scripts/tools\\\",\\n      \\\"⚙️🛠 scripts/stats\\\",\\n      \\\"⚙️🛠 scripts/validate\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler representa el conjunto de scripts externos que apoyan la verificación, análisis o diagnóstico del sistema. Son herramientas auxiliares que se ejecutan fuera del núcleo, pero que permiten revisar outputs sin alterar la lógica.\\\",\\n  \\\"textMarkdown\\\": \\\"## ⚙️🛠 scripts/\\\\nSubsistema de análisis auxiliar post-ejecución.\\\\n\\\\n### Parte de:\\\\n- --- Codigo\\\\n\\\\n### Usa:\\\\n- 🧾 Módulo de salida (writer)\\\\n- ⚙️🧪 tests/\\\\n- ⚙️🧬 src/\\\\n\\\\n### Requiere:\\\\n- 🗂 Calidad del Código\\\\n\\\\n### Define:\\\\n- ⚙️🛠 scripts/tools\\\\n- ⚙️🛠 scripts/stats\\\\n- ⚙️🛠 scripts/validate\\\\n\\\\n---\\\\n> Este subsistema permite observar, validar y analizar resultados sin tocar el núcleo lógico. Su diseño mantiene el sistema limpio y desacoplado, respetando el principio KISS y fomentando una evolución trazable.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"🧬 scripts/ – Sistema Digestivo Auxiliar\\\",\\n  \\\"descripcion\\\": \\\"Contiene herramientas externas al núcleo funcional que permiten observar, analizar y validar los datos procesados. Actúa como un sistema auxiliar que complementa la excreción informacional sin modificar la lógica principal.\\\"\\n}\\n{\\n  \\\"subsection\\\": \\\"🧠 Rol Biológico\\\",\\n  \\\"analogía\\\": \\\"Sistema Digestivo Secundario\\\",\\n  \\\"funcion\\\": \\\"Preprocesar, verificar o analizar salidas de datos generadas por el núcleo del sistema\\\",\\n  \\\"utilidad\\\": \\\"Permite evaluar resultados, hacer debug o extraer estadísticas sin alterar el flujo interno\\\"\\n}\\n{\\n  \\\"subsection\\\": \\\"📦 Archivos Clave en scripts/\\\",\\n  \\\"scripts\\\": [\\n    {\\n      \\\"archivo\\\": \\\"scripts/[nombre]_tools.sh\\\",\\n      \\\"descripcion\\\": \\\"Comandos auxiliares para visualizar y depurar salidas (por ejemplo, con jq, grep, awk)\\\"\\n    },\\n    {\\n      \\\"archivo\\\": \\\"scripts/[nombre]_stats.sh\\\",\\n      \\\"descripcion\\\": \\\"Resumen cuantitativo de las salidas: conteo, distribución, métricas por campo\\\"\\n    },\\n    {\\n      \\\"archivo\\\": \\\"scripts/[nombre]_validate.sh\\\",\\n      \\\"descripcion\\\": \\\"Validación externa de estructura o campos críticos antes de pasar a otros sistemas\\\"\\n    }\\n  ]\\n}\\n{\\n  \\\"subsection\\\": \\\"🔁 Integración con otros sistemas\\\",\\n  \\\"conexiones\\\": [\\n    {\\n      \\\"conecta_con\\\": \\\"🧾 Módulo de salida (writer)\\\",\\n      \\\"motivo\\\": \\\"Permite inspeccionar o validar el output inmediatamente después de su generación\\\"\\n    },\\n    {\\n      \\\"conecta_con\\\": \\\"🌐 Sistema CI/CD o workflows automáticos\\\",\\n      \\\"motivo\\\": \\\"Se puede ejecutar como paso de validación previa a releases o despliegues\\\"\\n    },\\n    {\\n      \\\"conecta_con\\\": \\\"👁️ Usuario técnico\\\",\\n      \\\"motivo\\\": \\\"Facilita la auditoría visual desde la terminal sin necesidad de herramientas gráficas\\\"\\n    }\\n  ]\\n}\\n\",\"title\":\"⚙️🛠 scripts/\",\"modified\":\"20250531040136560\",\"tags\":\"[[⚙️🛠 scripts/]] [[--- Codigo]]\",\"tmap.id\":\"0d632de4-5701-4d2d-be06-940322406f0c\",\"type\":\"application/json\"},{\"created\":\"20250414234000289\",\"text\":\"{\\n  \\\"title\\\": \\\"🎯 1. Objetivos\\\",\\n  \\\"id\\\": \\\"🎯 1. Objetivos\\\",\\n  \\\"tags\\\": [\\n    \\\"🎯 1. Objetivos\\\",\\n    \\\"🎯 2. Requisitos\\\",\\n    \\\"🎯 3. DOFA\\\",\\n    \\\"🎯 6. Componentes\\\",\\n    \\\"🎯 8. Estructura\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- 🗂 Principios de programación\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"🎯 2. Requisitos\\\",\\n      \\\"🎯 8. Estructura\\\",\\n      \\\"🎯 6. Componentes\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🎯 3. DOFA\\\",\\n      \\\"🎯 9. Plan de desarrollo\\\",\\n      \\\"🎯 Espectros de desarrollo\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"--- 🎯 Detalles del proyecto\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"--- 🎯 Detalles del proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler establece el marco de intención del sistema: qué resuelve, para quién, y cómo. Sus objetivos guían los requisitos, componentes, y la estructura funcional. Se conecta directamente al diagnóstico, al plan de desarrollo y a la arquitectura general.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🎯 1. Objetivos\\\\n\\\\nDefine el propósito general y específico del sistema. Estos objetivos estructuran lo que será requerido, diseñado, probado e implementado.\\\\n\\\\n### Define:\\\\n- 🎯 2. Requisitos\\\\n- 🎯 8. Estructura\\\\n- 🎯 6. Componentes\\\\n\\\\n### Usa:\\\\n- 🎯 3. DOFA\\\\n- 🎯 9. Plan de desarrollo\\\\n- 🎯 Espectros de desarrollo\\\\n\\\\n### Requiere:\\\\n- --- 🎯 Detalles del proyecto\\\\n\\\\n### Parte de:\\\\n- --- 🎯 Detalles del proyecto\\\\n\\\\n---\\\\n> Este nodo funciona como semilla estratégica: orienta todo lo que vendrá después desde una lógica funcional, técnica y medible.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"📄 Objetivos y Alcance del Proyecto\\\",\\n  \\\"subsection\\\": \\\"🎯 Objetivo General\\\",\\n  \\\"contenido\\\": \\\"[Nombre del Proyecto] tiene como propósito: [frase funcional precisa, centrada en lo que transforma o resuelve el sistema]. Este proceso no realiza [lo que no hace], sino que [acción estructural que sí realiza] para [propósito final técnico].\\\"\\n}\\n{\\n  \\\"section\\\": \\\"📄 Objetivos y Alcance del Proyecto\\\",\\n  \\\"subsection\\\": \\\"🧱 Objetivos Específicos\\\",\\n  \\\"items\\\": [\\n    \\\"Ingestar [tipo de entrada esperada, ej. archivos, señales, datos de usuario]\\\",\\n    \\\"Soportar estructuras [planas / jerárquicas / mixtas]\\\",\\n    \\\"Transformar la entrada en [formato de salida objetivo: .jsonl, .csv, .sql...]\\\",\\n    \\\"Normalizar campos esenciales: [campos clave según el dominio]\\\",\\n    \\\"Permitir consumo por [sistemas objetivo: IA, dashboards, ETL...]\\\",\\n    \\\"Integrarse con [nombre del ecosistema posterior, si aplica]\\\",\\n    \\\"Ofrecer un CLI / API / servicio portable, usable en CI/CD o despliegues automatizados\\\"\\n  ]\\n}\\n{\\n  \\\"section\\\": \\\"📦 Alcance del Proyecto (versión inicial)\\\",\\n  \\\"items\\\": [\\n    {\\\"elemento\\\": \\\"✅ Entrada soportada\\\", \\\"alcance\\\": \\\"[tipo de archivo o estructura válida]\\\"},\\n    {\\\"elemento\\\": \\\"✅ Salida generada\\\", \\\"alcance\\\": \\\"[formato y finalidad de la salida]\\\"},\\n    {\\\"elemento\\\": \\\"✅ Procesamiento básico\\\", \\\"alcance\\\": \\\"[tipo de transformación que realiza]\\\"},\\n    {\\\"elemento\\\": \\\"✅ Interfaz disponible\\\", \\\"alcance\\\": \\\"[CLI, API REST, Web UI, etc.]\\\"},\\n    {\\\"elemento\\\": \\\"✅ Compatibilidad\\\", \\\"alcance\\\": \\\"[otros sistemas con los que se comunica]\\\"},\\n    {\\\"elemento\\\": \\\"🔜 Entradas futuras\\\", \\\"alcance\\\": \\\"[otros formatos o fuentes que se planean soportar]\\\"},\\n    {\\\"elemento\\\": \\\"🔜 Procesamiento avanzado\\\", \\\"alcance\\\": \\\"[procesos que se delegan o están fuera de alcance inicial]\\\"},\\n    {\\\"elemento\\\": \\\"🔜 Interfaz gráfica\\\", \\\"alcance\\\": \\\"No contemplada en esta fase (si aplica)\\\"}\\n  ]\\n}\\n{\\n  \\\"section\\\": \\\"🧠 Justificación\\\",\\n  \\\"contenido\\\": \\\"[Problema concreto que resuelve el sistema y por qué es relevante en contextos reales. Enfocado a eficiencia, compatibilidad, estructuración o accesibilidad para otras herramientas.]\\\"\\n}\\n{\\n  \\\"section\\\": \\\"🚀 Resultado Esperado\\\",\\n  \\\"contenido\\\": \\\"[Descripción técnica de la salida final, incluyendo formato, estructura y finalidad en términos de integración, consumo o reutilización.]\\\"\\n}\\n\",\"tags\":\"[[🎯 1. Objetivos]] [[🎯 2. Requisitos]] [[🎯 8. Estructura]] [[🎯 3. DOFA]] [[🎯 6. Componentes]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]]\",\"title\":\"🎯 1. Objetivos\",\"modified\":\"20250531040312390\",\"text/x-markdown\":\"\",\"type\":\"application/json\",\"color\":\"#00c3db\",\"tmap.id\":\"a30a6844-bece-4f9c-add6-6f2d45090b42\"},{\"created\":\"20250414235517306\",\"text\":\"{\\n  \\\"title\\\": \\\"🎯 2. Requisitos\\\",\\n  \\\"id\\\": \\\"🎯 2. Requisitos\\\",\\n  \\\"tags\\\": [\\n    \\\"🎯 2. Requisitos\\\",\\n    \\\"🎯 4. Flujo de interaccion\\\",\\n    \\\"🎯 8. Estructura\\\",\\n    \\\"🎯 6. Componentes\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- 🗂 Principios de programación\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"🎯 4. Flujo de interaccion\\\",\\n      \\\"🎯 8. Estructura\\\",\\n      \\\"🎯 6. Componentes\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🎯 1. Objetivos\\\",\\n      \\\"🎯 3. DOFA\\\",\\n      \\\"🎯 9. Plan de desarrollo\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"🗂 Calidad del Código\\\",\\n      \\\"🗂 Usabilidad y Robustez\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"--- 🎯 Detalles del proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler traduce los objetivos del proyecto en condiciones específicas, técnicas y verificables. Define qué debe hacer el sistema, cómo debe comportarse y bajo qué criterios se valida su funcionalidad.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🎯 2. Requisitos\\\\n\\\\nEste nodo traduce objetivos en condiciones que guían la arquitectura, flujo y validaciones.\\\\n\\\\n### Define:\\\\n- 🎯 4. Flujo de interaccion\\\\n- 🎯 8. Estructura\\\\n- 🎯 6. Componentes\\\\n\\\\n### Usa:\\\\n- 🎯 1. Objetivos\\\\n- 🎯 3. DOFA\\\\n- 🎯 9. Plan de desarrollo\\\\n\\\\n### Requiere:\\\\n- 🗂 Calidad del Código\\\\n- 🗂 Usabilidad y Robustez\\\\n\\\\n### Parte de:\\\\n- --- 🎯 Detalles del proyecto\\\\n\\\\n---\\\\n> Este tiddler constituye el contrato técnico del sistema. Todo lo que se desarrolla, se valida o se prueba debe estar sustentado en uno de estos requisitos.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"✅ Requerimientos Funcionales\\\",\\n  \\\"items\\\": [\\n    {\\\"id\\\": \\\"RF-01\\\", \\\"requisito\\\": \\\"El sistema debe aceptar como entrada [tipo de archivo, fuente o señal esperada].\\\"},\\n    {\\\"id\\\": \\\"RF-02\\\", \\\"requisito\\\": \\\"El sistema debe procesar cada unidad de entrada como [unidad mínima de trabajo].\\\"},\\n    {\\\"id\\\": \\\"RF-03\\\", \\\"requisito\\\": \\\"El sistema debe generar [tipo de salida esperada], con [estructura específica].\\\"},\\n    {\\\"id\\\": \\\"RF-04\\\", \\\"requisito\\\": \\\"Debe extraer campos clave como [campo1, campo2, campo3].\\\"},\\n    {\\\"id\\\": \\\"RF-05\\\", \\\"requisito\\\": \\\"Debe normalizar los campos y asegurar consistencia en [aspectos específicos].\\\"},\\n    {\\\"id\\\": \\\"RF-06\\\", \\\"requisito\\\": \\\"El CLI debe permitir configuración mediante [flags o parámetros específicos].\\\"}\\n  ]\\n}\\n{\\n  \\\"section\\\": \\\"⚙️ Requerimientos No Funcionales\\\",\\n  \\\"items\\\": [\\n    {\\\"id\\\": \\\"RNF-01\\\", \\\"requisito\\\": \\\"Debe ejecutar tareas comunes en menos de [tiempo] con hasta [n] elementos.\\\"},\\n    {\\\"id\\\": \\\"RNF-02\\\", \\\"requisito\\\": \\\"Debe compilarse o ejecutarse sin dependencias externas.\\\"},\\n    {\\\"id\\\": \\\"RNF-03\\\", \\\"requisito\\\": \\\"Debe seguir convenciones del lenguaje o framework elegido (estilo, formato, lint).\\\"},\\n    {\\\"id\\\": \\\"RNF-04\\\", \\\"requisito\\\": \\\"Debe funcionar completamente offline.\\\"}\\n  ]\\n}\\n{\\n  \\\"section\\\": \\\"💻 Requerimientos de Software\\\",\\n  \\\"items\\\": [\\n    {\\\"id\\\": \\\"RS-01\\\", \\\"requisito\\\": \\\"Lenguaje: [versión mínima requerida]\\\"},\\n    {\\\"id\\\": \\\"RS-02\\\", \\\"requisito\\\": \\\"Compatibilidad con sistemas operativos: [lista]\\\"},\\n    {\\\"id\\\": \\\"RS-03\\\", \\\"requisito\\\": \\\"Entorno de desarrollo sugerido: [editores o herramientas]\\\"},\\n    {\\\"id\\\": \\\"RS-04\\\", \\\"requisito\\\": \\\"(Opcional) Script de automatización para tareas comunes (build/test/run)\\\"}\\n  ]\\n}\\n{\\n  \\\"section\\\": \\\"🧑‍💻 Requerimientos Técnicos\\\",\\n  \\\"items\\\": [\\n    {\\\"id\\\": \\\"RT-01\\\", \\\"requisito\\\": \\\"Estructura modular del código en carpetas como cmd/, internal/, parser/.\\\"},\\n    {\\\"id\\\": \\\"RT-02\\\", \\\"requisito\\\": \\\"Modelado fuerte de datos mediante structs/clases.\\\"},\\n    {\\\"id\\\": \\\"RT-03\\\", \\\"requisito\\\": \\\"Manejo explícito de errores en entradas, salidas y formatos.\\\"},\\n    {\\\"id\\\": \\\"RT-04\\\", \\\"requisito\\\": \\\"Uso de identificadores únicos o legibles cuando sea necesario (slugs, UUIDs).\\\"}\\n  ]\\n}\\n{\\n  \\\"section\\\": \\\"📦 Librerías Utilizadas\\\",\\n  \\\"items\\\": [\\n    {\\\"uso\\\": \\\"[componente o propósito]\\\", \\\"libreria\\\": \\\"[nombre de la librería o módulo]\\\"},\\n    {\\\"uso\\\": \\\"[manejo de archivos, flags, estructuras]\\\", \\\"libreria\\\": \\\"[estándar o externo]\\\"}\\n  ]\\n}\\n{\\n  \\\"section\\\": \\\"✅ Requerimientos de Pruebas\\\",\\n  \\\"items\\\": [\\n    {\\\"id\\\": \\\"RP-01\\\", \\\"requisito\\\": \\\"Debe incluir pruebas unitarias para cubrir al menos [porcentaje o cantidad mínima].\\\"},\\n    {\\\"id\\\": \\\"RP-02\\\", \\\"requisito\\\": \\\"Validación de formatos de salida con [herramienta o script externo].\\\"},\\n    {\\\"id\\\": \\\"RP-03\\\", \\\"requisito\\\": \\\"Verificación específica de [caso de uso o campo clave].\\\"},\\n    {\\\"id\\\": \\\"RP-04\\\", \\\"requisito\\\": \\\"Asegurar generación correcta de [campo derivado o estructurado].\\\"}\\n  ]\\n}\\n{\\n  \\\"section\\\": \\\"🧪 Requisitos de Calidad\\\",\\n  \\\"items\\\": [\\n    {\\\"id\\\": \\\"RC-01\\\", \\\"requisito\\\": \\\"El código debe estar formateado y libre de errores de estilo (ej. gofmt, linter).\\\"},\\n    {\\\"id\\\": \\\"RC-02\\\", \\\"requisito\\\": \\\"El CLI debe ofrecer ayuda y documentación mínima integrada.\\\"},\\n    {\\\"id\\\": \\\"RC-03\\\", \\\"requisito\\\": \\\"Manejo de errores con mensajes explícitos y no crípticos.\\\"},\\n    {\\\"id\\\": \\\"RC-04\\\", \\\"requisito\\\": \\\"La salida estructurada debe ser validable con herramientas estándar (jq, jsonlint, etc).\\\"}\\n  ]\\n}\\n{\\n  \\\"section\\\": \\\"🔐 Requisitos de Seguridad\\\",\\n  \\\"items\\\": [\\n    {\\\"id\\\": \\\"SEC-01\\\", \\\"requisito\\\": \\\"No se debe ejecutar ni interpretar código proveniente de la entrada.\\\"},\\n    {\\\"id\\\": \\\"SEC-02\\\", \\\"requisito\\\": \\\"La entrada debe ser verificada como válida antes de procesarla.\\\"},\\n    {\\\"id\\\": \\\"SEC-03\\\", \\\"requisito\\\": \\\"Evitar sobrescritura de archivos sin confirmación o control del usuario.\\\"},\\n    {\\\"id\\\": \\\"SEC-04\\\", \\\"requisito\\\": \\\"No se debe permitir acceso a rutas absolutas o externas sin autorización.\\\"}\\n  ]\\n}\\n{\\n  \\\"section\\\": \\\"🚀 Tecnologías Base\\\",\\n  \\\"items\\\": [\\n    {\\\"area\\\": \\\"Lenguaje\\\", \\\"tecnologia\\\": \\\"[Go, Python, Rust, etc.]\\\"},\\n    {\\\"area\\\": \\\"Entrada\\\", \\\"tecnologia\\\": \\\"[formato estructurado esperado, ej. .json, .csv, .md]\\\"},\\n    {\\\"area\\\": \\\"Salida\\\", \\\"tecnologia\\\": \\\"[formato estructurado producido]\\\"},\\n    {\\\"area\\\": \\\"Interfaz\\\", \\\"tecnologia\\\": \\\"[CLI, REST API, Web UI, etc.]\\\"},\\n    {\\\"area\\\": \\\"Integración\\\", \\\"tecnologia\\\": \\\"[otros módulos, pipelines o frameworks conectados]\\\"}\\n  ]\\n}\\n\",\"title\":\"🎯 2. Requisitos\",\"modified\":\"20250531040425976\",\"type\":\"application/json\",\"tags\":\"[[🎯 2. Requisitos]] [[🎯 8. Estructura]] [[🎯 4. Flujo de interaccion]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]]\",\"color\":\"#00c3db\",\"tmap.id\":\"b5be6915-32c3-4468-b4c2-768185bb58eb\"},{\"created\":\"20250417011018809\",\"text\":\"{\\n  \\\"title\\\": \\\"🎯 3. DOFA\\\",\\n  \\\"id\\\": \\\"🎯 3. DOFA\\\",\\n  \\\"tags\\\": [\\n    \\\"🎯 3. DOFA\\\",\\n    \\\"🎯 2. Requisitos\\\",\\n    \\\"🎯 5. Arquitectura\\\",\\n    \\\"🎯 9. Plan de desarrollo\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- 🗂 Principios de programación\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"🎯 Estrategia DOFA resumida\\\",\\n      \\\"🎯 9. Plan de desarrollo\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🎯 1. Objetivos\\\",\\n      \\\"🎯 2. Requisitos\\\",\\n      \\\"🎯 5. Arquitectura\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"--- 🎯 Detalles del proyecto\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"--- 🎯 Detalles del proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler contiene el análisis DOFA del sistema. Examina fortalezas, debilidades, oportunidades y amenazas desde una perspectiva funcional y estratégica. Genera una estrategia priorizada de acción que impacta la planificación y diseño técnico.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🎯 3. DOFA\\\\n\\\\nDiagnóstico estratégico del sistema.\\\\n\\\\n### Define:\\\\n- 🎯 Estrategia DOFA resumida\\\\n- 🎯 9. Plan de desarrollo\\\\n\\\\n### Usa:\\\\n- 🎯 1. Objetivos\\\\n- 🎯 2. Requisitos\\\\n- 🎯 5. Arquitectura\\\\n\\\\n### Requiere:\\\\n- --- 🎯 Detalles del proyecto\\\\n\\\\n### Parte de:\\\\n- --- 🎯 Detalles del proyecto\\\\n\\\\n---\\\\n> Este tiddler es una herramienta viva para evaluar riesgos, oportunidades y capacidades del sistema. Genera conocimiento que alimenta decisiones de arquitectura, desarrollo y roadmap evolutivo.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"🧠 DOFA – Fortalezas\\\",\\n  \\\"items\\\": [\\n    {\\\"fortaleza\\\": \\\"[fortaleza identificada]\\\", \\\"potencializacion\\\": \\\"✅ [acción concreta que la potencia]\\\"}\\n  ]\\n}\\n{\\n  \\\"section\\\": \\\"❗ DOFA – Debilidades\\\",\\n  \\\"items\\\": [\\n    {\\\"debilidad\\\": \\\"[debilidad detectada]\\\", \\\"mitigacion\\\": \\\"✅ [estrategia para disminuir su impacto]\\\"}\\n  ]\\n}\\n{\\n  \\\"section\\\": \\\"🚀 DOFA – Oportunidades\\\",\\n  \\\"items\\\": [\\n    {\\\"oportunidad\\\": \\\"[oportunidad externa]\\\", \\\"potencializacion\\\": \\\"✅ [acción para aprovecharla]\\\"}\\n  ]\\n}\\n{\\n  \\\"section\\\": \\\"⚠️ DOFA – Amenazas\\\",\\n  \\\"items\\\": [\\n    {\\\"amenaza\\\": \\\"[riesgo externo o estructural]\\\", \\\"mitigacion\\\": \\\"✅ [acción preventiva o correctiva]\\\"}\\n  ]\\n}\\n{\\n  \\\"section\\\": \\\"🎯 Estrategia DOFA resumida\\\",\\n  \\\"acciones\\\": [\\n    {\\\"accion\\\": \\\"✅ [acción prioritaria a realizar]\\\", \\\"resultado\\\": \\\"[beneficio directo o mitigación]\\\"}\\n  ]\\n}\\n{\\n  \\\"section\\\": \\\"🧠 Reflexión final\\\",\\n  \\\"formato\\\": \\\"estilo [tipo de enfoque reflexivo]\\\",\\n  \\\"contenido\\\": \\\"[idea abstracta o principio estratégico]\\\",\\n  \\\"metafora\\\": \\\"[metáfora técnica o conceptual que resuma el enfoque]\\\"\\n}\\n\",\"tags\":\"[[🎯 3. DOFA]] [[🎯 2. Requisitos]] [[🎯 5. Arquitectura]] [[🎯 9. Plan de desarrollo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]]\",\"title\":\"🎯 3. DOFA\",\"modified\":\"20250531040523433\",\"type\":\"application/json\",\"color\":\"#00c3db\",\"tmap.id\":\"4fd827ad-66c0-4733-b0fb-66a83f4ad752\"},{\"created\":\"20250417011202744\",\"text\":\"{\\n  \\\"title\\\": \\\"🎯 4. Flujo de interaccion\\\",\\n  \\\"id\\\": \\\"🎯 4. Flujo de interaccion\\\",\\n  \\\"tags\\\": [\\n    \\\"🎯 4. Flujo de interaccion\\\",\\n    \\\"🎯 2. Requisitos\\\",\\n    \\\"⚙️🧪 tests/\\\",\\n    \\\"🧾 Módulo de salida (writer)\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- 🗂 Principios de programación\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"🧾 Módulo de salida (writer)\\\",\\n      \\\"⚙️🧪 tests/\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🎯 2. Requisitos\\\",\\n      \\\"⚙️🧬 src/\\\",\\n      \\\"⚙️🛠 scripts/\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"🗂 Usabilidad y Robustez\\\",\\n      \\\"🗂 Diseño\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"--- 🎯 Detalles del proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler define los flujos de interacción del sistema, tanto con usuarios humanos como con procesos automatizados. Explica cómo los datos entran, se procesan, se validan y salen del sistema.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🎯 4. Flujo de Interacción\\\\n\\\\nModela las rutas funcionales entre usuario, sistema y ejecución técnica.\\\\n\\\\n### Define:\\\\n- 🧾 Módulo de salida (writer)\\\\n- ⚙️🧪 tests/\\\\n\\\\n### Usa:\\\\n- 🎯 2. Requisitos\\\\n- ⚙️🧬 src/\\\\n- ⚙️🛠 scripts/\\\\n\\\\n### Requiere:\\\\n- 🗂 Usabilidad y Robustez\\\\n- 🗂 Diseño\\\\n\\\\n### Parte de:\\\\n- --- 🎯 Detalles del proyecto\\\\n\\\\n---\\\\n> Este nodo garantiza que cada interacción, ya sea humana o automatizada, sea trazable, validada y coherente con el flujo lógico del sistema.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"🧠 Flujo 1 – Interacción Código ↔ Usuario\\\",\\n  \\\"descripcion\\\": \\\"[Describe cómo un usuario interactúa con la herramienta desde la entrada de datos hasta obtener una salida útil]\\\"\\n}\\n{\\n  \\\"flujo\\\": \\\"🎯 CLI → Usuario\\\",\\n  \\\"etapas\\\": [\\n    \\\"[1. Usuario prepara su archivo de entrada]\\\",\\n    \\\"[2. Ejecuta el CLI con los argumentos necesarios]\\\",\\n    \\\"[3. CLI procesa y muestra feedback]\\\",\\n    \\\"[4. Se genera la salida esperada]\\\",\\n    \\\"[5. El usuario reutiliza la salida o la visualiza]\\\",\\n    \\\"✅ Fin: [objetivo logrado]\\\"\\n  ]\\n}\\n{\\n  \\\"subsection\\\": \\\"🧑‍💻 Interacciones visibles para el usuario\\\",\\n  \\\"mensajes\\\": [\\n    {\\\"momento\\\": \\\"[Caso de uso]\\\", \\\"mensaje\\\": \\\"[Mensaje mostrado por el CLI]\\\"}\\n  ],\\n  \\\"nota\\\": \\\"💡 Interfaz conversacional mínima para mejorar experiencia del usuario.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"⚙️ Flujo 2 – Interacción Código ↔ Binario\\\",\\n  \\\"descripcion\\\": \\\"[Describe cómo el código fuente se transforma en ejecutable y cómo ese binario es utilizado en producción o CI/CD]\\\"\\n}\\n{\\n  \\\"flujo\\\": \\\"🧱 Construcción y ejecución del binario\\\",\\n  \\\"etapas\\\": [\\n    \\\"[1. Estructura de código fuente]\\\",\\n    \\\"[2. Comando de compilación]\\\",\\n    \\\"[3. Binario generado]\\\",\\n    \\\"[4. Binario ejecutado por usuario o CI/CD]\\\",\\n    \\\"[5. Comportamiento en ejecución]\\\"\\n  ]\\n}\\n{\\n  \\\"subsection\\\": \\\"🛠️ ¿Por qué es importante este flujo?\\\",\\n  \\\"propositos\\\": [\\n    {\\\"concepto\\\": \\\"[Tema clave: Modularidad, Portabilidad, etc.]\\\", \\\"relevancia\\\": \\\"[Explicación de su importancia]\\\"}\\n  ]\\n}\\n{\\n  \\\"section\\\": \\\"🧠 Flujo CLI formal (argumentos y ejecución)\\\",\\n  \\\"ejemplos\\\": [\\n    {\\\"tipo\\\": \\\"[Forma de ejecución]\\\", \\\"comando\\\": \\\"[Comando real del CLI]\\\"}\\n  ]\\n}\\n{\\n  \\\"section\\\": \\\"✅ Resumen de Flujos\\\",\\n  \\\"tabla\\\": [\\n    {\\\"flujo\\\": \\\"[Nombre del flujo]\\\", \\\"funcion\\\": \\\"[Descripción de su propósito funcional]\\\"}\\n  ]\\n}\\n\",\"type\":\"application/json\",\"title\":\"🎯 4. Flujo de interaccion\",\"modified\":\"20250531040634574\",\"tags\":\"[[🎯 4. Flujo de interaccion]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]]\",\"color\":\"#00c3db\",\"tmap.id\":\"72822a6f-abd7-4fd0-a517-5f3fd44caba1\"},{\"created\":\"20250417012641075\",\"text\":\"{\\n  \\\"title\\\": \\\"🎯 5. Arquitectura\\\",\\n  \\\"id\\\": \\\"🎯 5. Arquitectura\\\",\\n  \\\"tags\\\": [\\n    \\\"🎯 5. Arquitectura\\\",\\n    \\\"🎯 6. Componentes\\\",\\n    \\\"🎯 7. Algoritmos y matematicas\\\",\\n    \\\"🎯 8. Estructura\\\",\\n    \\\"🎯 4. Flujo de interaccion\\\",\\n    \\\"🎯 3. DOFA\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- 🗂 Principios de programación\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"⚙️🧬 src/\\\",\\n      \\\"🧾 Módulo de salida (writer)\\\",\\n      \\\"🎯 6. Componentes\\\",\\n      \\\"🎯 7. Algoritmos y matematicas\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🎯 1. Objetivos\\\",\\n      \\\"🎯 2. Requisitos\\\",\\n      \\\"🎯 3. DOFA\\\",\\n      \\\"🎯 4. Flujo de interaccion\\\",\\n      \\\"🎯 8. Estructura\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"🗂 Diseño\\\",\\n      \\\"🗂 Modularidad y Estado\\\",\\n      \\\"🗂 Usabilidad y Robustez\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"--- 🎯 Detalles del proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler estructura el sistema en capas funcionales: interacción, lógica, datos, integración y seguridad transversal. Define qué hace cada capa, cómo se relacionan y qué módulos contiene. Es la base de diseño e implementación modular.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🎯 5. Arquitectura\\\\n\\\\nModelo de arquitectura en capas funcionales:\\\\n\\\\n### Define:\\\\n- ⚙️🧬 src/\\\\n- 🧾 Módulo de salida (writer)\\\\n- 🎯 6. Componentes\\\\n- 🎯 7. Algoritmos y matematicas\\\\n\\\\n### Usa:\\\\n- 🎯 1. Objetivos\\\\n- 🎯 2. Requisitos\\\\n- 🎯 3. DOFA\\\\n- 🎯 4. Flujo de interaccion\\\\n- 🎯 8. Estructura\\\\n\\\\n### Requiere:\\\\n- 🗂 Diseño\\\\n- 🗂 Modularidad y Estado\\\\n- 🗂 Usabilidad y Robustez\\\\n\\\\n### Parte de:\\\\n- --- 🎯 Detalles del proyecto\\\\n\\\\n---\\\\n> Esta arquitectura distribuye responsabilidades de forma coherente y trazable. Favorece la evolución semántica, la interoperabilidad, y la protección transversal del sistema.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"🧠 Arquitectura en Capas – [Nombre del Proyecto]\\\",\\n  \\\"capa\\\": \\\"1. 🧑‍💻 Capa de Interacción con el Usuario\\\",\\n  \\\"descripcion\\\": \\\"Gestiona cómo el usuario ejecuta y comunica con la herramienta desde CLI.\\\",\\n  \\\"componentes\\\": [\\n    \\\"[Archivo de entrada principal: main.go]\\\",\\n    \\\"[Parámetros o flags del CLI: --input, --output]\\\",\\n    \\\"[Mensajes: errores, ayuda, progreso, finalización]\\\"\\n  ],\\n  \\\"funciones\\\": [\\n    \\\"Validar argumentos CLI\\\",\\n    \\\"Mostrar mensajes comprensibles al usuario\\\",\\n    \\\"Delegar tareas a la lógica interna\\\"\\n  ],\\n  \\\"nota\\\": \\\"✅ Esta capa debe ser intuitiva, robusta y amigable.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"🧠 Arquitectura en Capas – [Nombre del Proyecto]\\\",\\n  \\\"capa\\\": \\\"2. 🧠 Capa de Lógica de Aplicación\\\",\\n  \\\"descripcion\\\": \\\"Define las transformaciones, validaciones y operaciones principales del sistema.\\\",\\n  \\\"componentes\\\": [\\n    \\\"[parser.go, utils.go, lógica interna de procesamiento]\\\",\\n    \\\"[Estructuras principales: structs, validaciones, helpers]\\\"\\n  ],\\n  \\\"funciones\\\": [\\n    \\\"Procesar y transformar datos\\\",\\n    \\\"Estandarizar salidas\\\",\\n    \\\"Aplicar reglas del negocio\\\"\\n  ],\\n  \\\"nota\\\": \\\"✅ Aquí reside el motor lógico del sistema.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"🧠 Arquitectura en Capas – [Nombre del Proyecto]\\\",\\n  \\\"capa\\\": \\\"3. 🗃 Capa de Datos\\\",\\n  \\\"descripcion\\\": \\\"Define cómo se representan los datos internamente y cómo se leen/escriben desde el sistema.\\\",\\n  \\\"componentes\\\": [\\n    \\\"[Definiciones de modelos: structs de entrada/salida]\\\",\\n    \\\"[Lectura desde archivos, escritura a formato final]\\\"\\n  ],\\n  \\\"funciones\\\": [\\n    \\\"Parsear datos de entrada\\\",\\n    \\\"Serializar salidas (ej. JSONL)\\\",\\n    \\\"Gestionar errores de I/O\\\"\\n  ],\\n  \\\"nota\\\": \\\"✅ Interfaz con el mundo físico de archivos y datos.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"🧠 Arquitectura en Capas – [Nombre del Proyecto]\\\",\\n  \\\"capa\\\": \\\"4. 🔗 Capa de Integración\\\",\\n  \\\"descripcion\\\": \\\"Permite que el sistema sea utilizado como módulo autónomo o dentro de pipelines más amplios.\\\",\\n  \\\"componentes\\\": [\\n    \\\"[CLI con entradas/salidas estándar]\\\",\\n    \\\"[Compatibilidad con otros lenguajes o sistemas]\\\",\\n    \\\"[(Opcional) API REST o sockets en el futuro]\\\"\\n  ],\\n  \\\"funciones\\\": [\\n    \\\"Permitir invocación desde otros entornos\\\",\\n    \\\"Exportar formatos estandarizados\\\",\\n    \\\"Mantener modularidad\\\"\\n  ],\\n  \\\"nota\\\": \\\"✅ Diseñada para interoperabilidad sin acoplamiento.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"🧠 Arquitectura en Capas – [Nombre del Proyecto]\\\",\\n  \\\"capa\\\": \\\"5. 🔐 Capa de Seguridad (Transversal)\\\",\\n  \\\"descripcion\\\": \\\"Garantiza el correcto comportamiento del sistema ante inputs maliciosos, errores, o mal uso.\\\",\\n  \\\"componentes\\\": [\\n    \\\"Validación de datos de entrada\\\",\\n    \\\"Control de errores explícito\\\",\\n    \\\"Prevención de ejecuciones o accesos no autorizados\\\",\\n    \\\"Protección contra sobrescritura o pérdida de datos\\\"\\n  ],\\n  \\\"futuro\\\": [\\n    \\\"Firmado o checksum de archivos\\\",\\n    \\\"Modo seguro: --dry-run o --readonly\\\",\\n    \\\"Auditoría de entradas procesadas\\\"\\n  ],\\n  \\\"nota\\\": \\\"✅ Esta capa atraviesa todas las demás para asegurar fiabilidad y confianza.\\\"\\n}\\n\",\"type\":\"application/json\",\"title\":\"🎯 5. Arquitectura\",\"modified\":\"20250531040756456\",\"tags\":\"[[🎯 5. Arquitectura]] [[🎯 6. Componentes]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[🎯 Espectros de desarrollo]] [[🎯 3. DOFA]] [[🎯 8. Estructura]] [[🎯 4. Flujo de interaccion]] [[🎯 7. Algoritmos y matematicas]] [[🎯 1. Objetivos]] [[🎯 9. Plan de desarrollo]] [[🎯 2. Requisitos]]\",\"color\":\"#00c3db\",\"tmap.id\":\"5350baec-c84e-487d-bd02-ea09e1cd5268\"},{\"created\":\"20250417013128906\",\"text\":\"{\\n  \\\"title\\\": \\\"🎯 6. Componentes\\\",\\n  \\\"id\\\": \\\"🎯 6. Componentes\\\",\\n  \\\"tags\\\": [\\n    \\\"🎯 6. Componentes\\\",\\n    \\\"🎯 2. Requisitos\\\",\\n    \\\"🎯 5. Arquitectura\\\",\\n    \\\"🎯 8. Estructura\\\",\\n    \\\"🎯 7. Algoritmos y matematicas\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- 🗂 Principios de programación\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"⚙️🧬 src/\\\",\\n      \\\"⚙️🛠 scripts/\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🎯 2. Requisitos\\\",\\n      \\\"🎯 5. Arquitectura\\\",\\n      \\\"🎯 7. Algoritmos y matematicas\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"🗂 Diseño\\\",\\n      \\\"🗂 Modularidad y Estado\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"--- 🎯 Detalles del proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler describe los componentes activos del sistema. Cada archivo fuente es tratado como un gen con propósito, tipo y función. El sistema evoluciona añadiendo o transformando estos componentes en nuevas vueltas helicoidales.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🎯 6. Componentes\\\\n\\\\nMapa de archivos fuente activos del sistema, descritos como genes funcionales.\\\\n\\\\n### Define:\\\\n- ⚙️🧬 src/\\\\n- ⚙️🛠 scripts/\\\\n\\\\n### Usa:\\\\n- 🎯 2. Requisitos\\\\n- 🎯 5. Arquitectura\\\\n- 🎯 7. Algoritmos y matematicas\\\\n\\\\n### Requiere:\\\\n- 🗂 Diseño\\\\n- 🗂 Modularidad y Estado\\\\n\\\\n### Parte de:\\\\n- --- 🎯 Detalles del proyecto\\\\n\\\\n---\\\\n> Este nodo permite observar y dirigir la evolución del sistema a través de sus archivos. Cada vuelta incorpora nuevos genes o modifica existentes, manteniendo trazabilidad funcional.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"🧬 Genes funcionales\\\",\\n  \\\"carpeta\\\": \\\"📁 [carpeta_principal]/\\\",\\n  \\\"descripcion\\\": \\\"[Descripción general del rol de esta carpeta: orquestación, lógica, entrada/salida, utilidades, modelos...]\\\",\\n  \\\"genes\\\": [\\n    {\\n      \\\"archivo\\\": \\\"[archivo1.ext]\\\",\\n      \\\"funcion\\\": \\\"[Breve descripción de lo que hace este archivo: entrada, transformación, limpieza, exportación, etc.]\\\"\\n    },\\n    {\\n      \\\"archivo\\\": \\\"[archivo2.ext]\\\",\\n      \\\"funcion\\\": \\\"[Función clave o contribución de este archivo al sistema]\\\"\\n    }\\n  ],\\n  \\\"nota\\\": \\\"✅ [Comentario o recomendación sobre esta carpeta: propósito, buenas prácticas, etc.]\\\"\\n}\\n\\n{\\n  \\\"section\\\": \\\"🧬 Tabla resumen de genes\\\",\\n  \\\"tabla\\\": [\\n    {\\n      \\\"archivo\\\": \\\"[archivo1.ext]\\\",\\n      \\\"tipo\\\": \\\"[Orquestador | Transformador | Entrada | Salida | Utilidad | Modelo]\\\",\\n      \\\"funcion\\\": \\\"[Síntesis breve del rol que cumple]\\\"\\n    }\\n  ]\\n}\\n\\n{\\n  \\\"section\\\": \\\"🧠 Evolución helicoidal futura\\\",\\n  \\\"subsection\\\": \\\"Genes en expansión\\\",\\n  \\\"futuros\\\": [\\n    {\\n      \\\"archivo\\\": \\\"[futuro1.ext]\\\",\\n      \\\"que_haria\\\": \\\"[Qué función incorporaría o qué problema solucionaría este nuevo archivo]\\\"\\n    }\\n  ]\\n}\\n\\n{\\n  \\\"section\\\": \\\"🔬 Reflexión final\\\",\\n  \\\"estilo\\\": \\\"Mosston\\\",\\n  \\\"contenido\\\": \\\"[Frase o principio pedagógico sobre el diseño modular y evolutivo del sistema]\\\"\\n}\\n\",\"type\":\"application/json\",\"title\":\"🎯 6. Componentes\",\"modified\":\"20250531040843267\",\"tags\":\"[[🎯 6. Componentes]] [[🎯 2. Requisitos]] [[🎯 8. Estructura]] [[🎯 7. Algoritmos y matematicas]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]]\",\"color\":\"#00c3db\",\"tmap.id\":\"05ad41c1-67f3-4447-8237-6e3ebc92fdcd\"},{\"created\":\"20250417013235155\",\"text\":\"{\\n  \\\"title\\\": \\\"🎯 7. Algoritmos y matematicas\\\",\\n  \\\"id\\\": \\\"🎯 7. Algoritmos y matematicas\\\",\\n  \\\"tags\\\": [\\n    \\\"🎯 7. Algoritmos y matematicas\\\",\\n    \\\"🎯 6. Componentes\\\",\\n    \\\"🎯 2. Requisitos\\\",\\n    \\\"🎯 8. Estructura\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"🎯 5. Arquitectura\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"🧬 Representación semántica de datos\\\",\\n      \\\"📐 Estructuras internas del flujo\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🎯 2. Requisitos\\\",\\n      \\\"🎯 5. Arquitectura\\\",\\n      \\\"🎯 6. Componentes\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"🗂 Evolución Semántica\\\",\\n      \\\"🗂 Epigenética Computacional\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"--- 🎯 Detalles del proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler contiene los algoritmos y fundamentos matemáticos que impulsan el sistema. Define estructuras de datos, transformaciones, métricas e inferencias semánticas.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🎯 7. Algoritmos y Matemáticas\\\\n\\\\nDefine la lógica formal y computacional que gobierna el sistema.\\\\n\\\\n### Define:\\\\n- 🧬 Representación semántica de datos\\\\n- 📐 Estructuras internas del flujo\\\\n\\\\n### Usa:\\\\n- 🎯 2. Requisitos\\\\n- 🎯 5. Arquitectura\\\\n- 🎯 6. Componentes\\\\n\\\\n### Requiere:\\\\n- 🗂 Evolución Semántica\\\\n- 🗂 Epigenética Computacional\\\\n\\\\n### Parte de:\\\\n- --- 🎯 Detalles del proyecto\\\\n\\\\n---\\\\n> Este nodo encapsula el alma lógica del sistema. Sus algoritmos no solo procesan datos: interpretan y transforman conocimiento semántico, alineado con principios biológicos de adaptación y evolución.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"📚 Algoritmos y Fundamentos Matemáticos\\\",\\n  \\\"nombre\\\": \\\"\\\",\\n  \\\"descripcion\\\": \\\"\\\",\\n  \\\"aplicacion_en_proyecto\\\": \\\"\\\",\\n  \\\"tipo_dato\\\": \\\"\\\",\\n  \\\"estructura_dato\\\": \\\"\\\",\\n  \\\"implicacion_matematica\\\": \\\"\\\",\\n  \\\"algoritmos_utilizados\\\": [],\\n  \\\"categoria\\\": \\\"\\\",  \\n  \\\"dependencias\\\": [],\\n  \\\"riesgos_si_falla\\\": \\\"\\\",\\n  \\\"potenciales_mejoras\\\": \\\"\\\",\\n  \\\"notas\\\": \\\"\\\"\\n}\\n\",\"type\":\"application/json\",\"title\":\"🎯 7. Algoritmos y matematicas\",\"modified\":\"20250531040934780\",\"tags\":\"[[🎯 7. Algoritmos y matematicas]] [[🎯 6. Componentes]] [[🎯 2. Requisitos]] [[🎯 8. Estructura]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[🎯 5. Arquitectura]]\",\"color\":\"#00c3db\",\"tmap.id\":\"b6627e77-1d0b-450e-94c9-a89ed66a8b66\"},{\"created\":\"20250417015323156\",\"text\":\"{\\n  \\\"title\\\": \\\"🎯 8. Estructura\\\",\\n  \\\"id\\\": \\\"🎯 8. Estructura\\\",\\n  \\\"tags\\\": [\\n    \\\"🎯 8. Estructura\\\",\\n    \\\"🎯 1. Objetivos\\\",\\n    \\\"🎯 2. Requisitos\\\",\\n    \\\"🎯 5. Arquitectura\\\",\\n    \\\"🎯 6. Componentes\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- 🗂 Principios de programación\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"⚙️🧬 src/\\\",\\n      \\\"⚙️🛠 scripts/\\\",\\n      \\\"🧾 Módulo de salida (writer)\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🎯 1. Objetivos\\\",\\n      \\\"🎯 2. Requisitos\\\",\\n      \\\"🎯 5. Arquitectura\\\",\\n      \\\"🎯 6. Componentes\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"🗂 Diseño\\\",\\n      \\\"🗂 Modularidad y Estado\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"--- 🎯 Detalles del proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler define la estructura operativa del proyecto. Organiza directorios y archivos en función de sus responsabilidades, siguiendo un modelo funcional-modular. Es base para automatización, trazabilidad y escalabilidad.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🎯 8. Estructura\\\\n\\\\nModelo físico y modular de organización del código fuente.\\\\n\\\\n### Define:\\\\n- ⚙️🧬 src/\\\\n- ⚙️🛠 scripts/\\\\n- 🧾 Módulo de salida (writer)\\\\n\\\\n### Usa:\\\\n- 🎯 1. Objetivos\\\\n- 🎯 2. Requisitos\\\\n- 🎯 5. Arquitectura\\\\n- 🎯 6. Componentes\\\\n\\\\n### Requiere:\\\\n- 🗂 Diseño\\\\n- 🗂 Modularidad y Estado\\\\n\\\\n### Parte de:\\\\n- --- 🎯 Detalles del proyecto\\\\n\\\\n---\\\\n> Este nodo transforma la lógica abstracta en estructuras físicas. Cada carpeta y archivo tiene propósito semántico claro y está alineado con las capas de arquitectura y la evolución helicoidal.\\\"\\n}\\n{\\\"section\\\": \\\"📂 Estructura General del Proyecto\\\", \\\"modelo\\\": \\\"Modelo Funcional-Modular\\\", \\\"descripcion\\\": \\\"La estructura refleja la organización lógica de funciones y responsabilidades del sistema, siguiendo un patrón claro, escalable y comprensible para nuevos colaboradores o sistemas automatizados.\\\"}\\n\\n{\\\"elemento\\\": \\\"🔧 Raíz del Proyecto\\\", \\\"tipo\\\": \\\"directorio\\\", \\\"funcion\\\": \\\"Contiene archivos de configuración, documentación general y punto de entrada del código\\\", \\\"ejemplos\\\": [\\\"README.md\\\", \\\"Makefile\\\", \\\"package.json\\\", \\\"go.mod\\\", \\\".gitignore\\\"]}\\n\\n{\\\"elemento\\\": \\\"📁 src/\\\", \\\"tipo\\\": \\\"directorio\\\", \\\"funcion\\\": \\\"Código fuente principal del proyecto. Puede estar dividido en módulos o capas (controller, service, domain...)\\\", \\\"ejemplos\\\": [\\\"src/main.py\\\", \\\"src/core/\\\", \\\"src/app/\\\"]}\\n\\n{\\\"elemento\\\": \\\"📁 cmd/ (opcional)\\\", \\\"tipo\\\": \\\"directorio\\\", \\\"funcion\\\": \\\"Punto de entrada para ejecutables o CLI. Puede haber varios subcomandos si el proyecto los requiere.\\\", \\\"ejemplos\\\": [\\\"cmd/main.go\\\", \\\"cmd/serve.go\\\"]}\\n\\n{\\\"elemento\\\": \\\"📁 internal/ o utils/\\\", \\\"tipo\\\": \\\"directorio\\\", \\\"funcion\\\": \\\"Funciones de utilidad o helpers internos no expuestos públicamente.\\\", \\\"ejemplos\\\": [\\\"internal/date.go\\\", \\\"utils/validators.py\\\"]}\\n\\n{\\\"elemento\\\": \\\"📁 models/ o domain/\\\", \\\"tipo\\\": \\\"directorio\\\", \\\"funcion\\\": \\\"Define las estructuras de datos principales: modelos, DTOs, entidades del dominio.\\\", \\\"ejemplos\\\": [\\\"models/user.go\\\", \\\"domain/tiddler.ts\\\"]}\\n\\n{\\\"elemento\\\": \\\"📁 io/ o adapters/\\\", \\\"tipo\\\": \\\"directorio\\\", \\\"funcion\\\": \\\"Manejo de entrada y salida: lectura/escritura de archivos, base de datos o APIs externas.\\\", \\\"ejemplos\\\": [\\\"io/reader.go\\\", \\\"adapters/jsonParser.ts\\\"]}\\n\\n{\\\"elemento\\\": \\\"📁 output/ o dist/\\\", \\\"tipo\\\": \\\"directorio\\\", \\\"funcion\\\": \\\"Archivos generados por el sistema, resultados procesados o compilados.\\\", \\\"ejemplos\\\": [\\\"output/report.jsonl\\\", \\\"dist/bundle.js\\\"]}\\n\\n{\\\"elemento\\\": \\\"📁 input/\\\", \\\"tipo\\\": \\\"directorio\\\", \\\"funcion\\\": \\\"Datos de entrada utilizados para prueba, desarrollo o demostración.\\\", \\\"ejemplos\\\": [\\\"input/sample.json\\\"]}\\n\\n{\\\"elemento\\\": \\\"📁 scripts/\\\", \\\"tipo\\\": \\\"directorio\\\", \\\"funcion\\\": \\\"Automatizaciones o herramientas auxiliares en shell, Python, jq, etc.\\\", \\\"ejemplos\\\": [\\\"scripts/deploy.sh\\\", \\\"scripts/jq_tools.sh\\\"]}\\n\\n{\\\"elemento\\\": \\\"📁 docs/\\\", \\\"tipo\\\": \\\"directorio\\\", \\\"funcion\\\": \\\"Documentación técnica, objetivos del proyecto, manuales o justificaciones de diseño.\\\", \\\"ejemplos\\\": [\\\"docs/architecture.md\\\", \\\"docs/README_FR.md\\\"]}\\n\\n{\\\"elemento\\\": \\\"📁 tests/\\\", \\\"tipo\\\": \\\"directorio\\\", \\\"funcion\\\": \\\"Pruebas unitarias, de integración o end-to-end.\\\", \\\"ejemplos\\\": [\\\"tests/test_parser.py\\\", \\\"tests/integration/\\\"]}\\n\\n{\\\"elemento\\\": \\\"🧪 Configuración de CI/CD\\\", \\\"tipo\\\": \\\"archivo/directorio\\\", \\\"funcion\\\": \\\"Automatización de pruebas, builds o despliegues.\\\", \\\"ejemplos\\\": [\\\".github/workflows/\\\", \\\".gitlab-ci.yml\\\", \\\"Jenkinsfile\\\"]}\\n\",\"type\":\"application/json\",\"title\":\"🎯 8. Estructura\",\"modified\":\"20250531041038260\",\"tags\":\"[[🎯 8. Estructura]] [[🎯 2. Requisitos]] [[🎯 1. Objetivos]] [[🎯 9. Plan de desarrollo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]]\",\"icon\":\":construction_site: \",\"color\":\"#00c3db\",\"tmap.id\":\"79fb44c0-068d-410c-ab14-dc39ca4788ac\"},{\"created\":\"20250417015650783\",\"text\":\"{\\n  \\\"title\\\": \\\"🎯 9. Plan de desarrollo\\\",\\n  \\\"id\\\": \\\"🎯 9. Plan de desarrollo\\\",\\n  \\\"tags\\\": [\\n    \\\"🎯 9. Plan de desarrollo\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"--- 🌀 Helices de desarrollo\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"--- 🌀 Helices de desarrollo\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🎯 1. Objetivos\\\",\\n      \\\"🎯 2. Requisitos\\\",\\n      \\\"🎯 3. DOFA\\\",\\n      \\\"🎯 5. Arquitectura\\\",\\n      \\\"🎯 6. Componentes\\\",\\n      \\\"🎯 8. Estructura\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"🗂 Diseño\\\",\\n      \\\"🗂 Modularidad y Estado\\\",\\n      \\\"🗂 Evolución Semántica\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"--- 🎯 Detalles del proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler define la estrategia de evolución helicoidal del sistema. Cada ciclo (V1–V5) introduce funcionalidad, validación, interfaces, automatización u optimización. Es la guía adaptativa para que el sistema crezca como organismo, no como torre.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🎯 9. Plan de desarrollo\\\\n\\\\nModelo helicoidal de evolución del sistema por ciclos madurativos.\\\\n\\\\n### Define:\\\\n- --- 🌀 Helices de desarrollo\\\\n\\\\n### Usa:\\\\n- 🎯 1. Objetivos\\\\n- 🎯 2. Requisitos\\\\n- 🎯 3. DOFA\\\\n- 🎯 5. Arquitectura\\\\n- 🎯 6. Componentes\\\\n- 🎯 8. Estructura\\\\n\\\\n### Requiere:\\\\n- 🗂 Diseño\\\\n- 🗂 Modularidad y Estado\\\\n- 🗂 Evolución Semántica\\\\n\\\\n### Parte de:\\\\n- --- 🎯 Detalles del proyecto\\\\n\\\\n---\\\\n> Cada ciclo es una vuelta vital en la espiral del proyecto. No se escala por acumulación, sino por integración funcional progresiva.\\\"\\n}\\n{\\\"section\\\": \\\"🌀 Plan de Desarrollo General\\\", \\\"modelo\\\": \\\"Modelo Helicoidal\\\", \\\"descripcion\\\": \\\"Cada ciclo representa una fase natural de maduración en el proyecto: desde un núcleo funcional hasta una integración optimizada. El enfoque es modular, evolutivo y comprobable.\\\"}\\n\\n{\\\"ciclo\\\": \\\"V1 – Núcleo funcional mínimo\\\", \\\"objetivo\\\": \\\"Crear la estructura básica que demuestre el valor esencial del sistema.\\\", \\\"entregables\\\": [\\n  {\\\"componente\\\": \\\"Punto de entrada\\\", \\\"descripcion\\\": \\\"Archivo, script o interfaz base para ejecutar el sistema.\\\"},\\n  {\\\"componente\\\": \\\"Lógica esencial\\\", \\\"descripcion\\\": \\\"Funcionalidad principal mínima que demuestra el propósito del proyecto.\\\"},\\n  {\\\"componente\\\": \\\"Estructura de carpetas\\\", \\\"descripcion\\\": \\\"Organización inicial del código y recursos.\\\"},\\n  {\\\"componente\\\": \\\"Instrucciones básicas\\\", \\\"descripcion\\\": \\\"README o ayuda mínima para ejecutar el sistema.\\\"}\\n], \\\"madurez\\\": \\\"🧪 Demuestra valor, no está validado ni optimizado.\\\"}\\n\\n{\\\"ciclo\\\": \\\"V2 – Validación estructural y reglas básicas\\\", \\\"objetivo\\\": \\\"Agregar estructuras internas, validaciones y pruebas mínimas.\\\", \\\"entregables\\\": [\\n  {\\\"componente\\\": \\\"Validación de datos/entradas\\\", \\\"descripcion\\\": \\\"Revisión básica de errores, formatos o tipos esperados.\\\"},\\n  {\\\"componente\\\": \\\"Modelo de datos o estructura interna\\\", \\\"descripcion\\\": \\\"Definición clara de cómo se representa y transforma la información.\\\"},\\n  {\\\"componente\\\": \\\"Pruebas unitarias básicas\\\", \\\"descripcion\\\": \\\"Verificar el comportamiento esperado de funciones clave.\\\"}\\n], \\\"madurez\\\": \\\"✅ Fiable en contexto controlado.\\\"}\\n\\n{\\\"ciclo\\\": \\\"V3 – Interfaz e interacción externa\\\", \\\"objetivo\\\": \\\"Hacer que el sistema sea accesible y usable por humanos o sistemas externos.\\\", \\\"entregables\\\": [\\n  {\\\"componente\\\": \\\"CLI / GUI / API\\\", \\\"descripcion\\\": \\\"Interfaz para entrada/salida externa.\\\"},\\n  {\\\"componente\\\": \\\"Mensajes útiles\\\", \\\"descripcion\\\": \\\"Errores claros, estados visibles, logs legibles.\\\"},\\n  {\\\"componente\\\": \\\"Soporte para argumentos / parámetros\\\", \\\"descripcion\\\": \\\"Permitir configuración desde fuera.\\\"}\\n], \\\"madurez\\\": \\\"👨‍💻 Usable por terceros sin editar el código.\\\"}\\n\\n{\\\"ciclo\\\": \\\"V4 – Portabilidad y automatización\\\", \\\"objetivo\\\": \\\"Asegurar que el sistema se pueda distribuir, reproducir y usar en diferentes entornos.\\\", \\\"entregables\\\": [\\n  {\\\"componente\\\": \\\"Script de build / setup\\\", \\\"descripcion\\\": \\\"Facilita instalación o despliegue.\\\"},\\n  {\\\"componente\\\": \\\"CI/CD o automatización mínima\\\", \\\"descripcion\\\": \\\"Compilación y pruebas en cada cambio.\\\"},\\n  {\\\"componente\\\": \\\"Estandarización de entrada/salida\\\", \\\"descripcion\\\": \\\"Archivos o APIs predecibles.\\\"}\\n], \\\"madurez\\\": \\\"⚙️ Preparado para integrarse y escalar.\\\"}\\n\\n{\\\"ciclo\\\": \\\"V5 – Extensión, métricas y optimización\\\", \\\"objetivo\\\": \\\"Abrir el sistema a nuevas funcionalidades, mejoras de rendimiento o análisis inteligente.\\\", \\\"entregables\\\": [\\n  {\\\"componente\\\": \\\"Métricas internas\\\", \\\"descripcion\\\": \\\"Estadísticas, logs o dashboards sobre el uso del sistema.\\\"},\\n  {\\\"componente\\\": \\\"Extensibilidad\\\", \\\"descripcion\\\": \\\"Hooks, flags, plugins o configuración avanzada.\\\"},\\n  {\\\"componente\\\": \\\"Optimizaciones\\\", \\\"descripcion\\\": \\\"Reducción de tiempo, memoria o redundancias.\\\"}\\n], \\\"madurez\\\": \\\"🔍 Listo para producción avanzada, investigación o expansión.\\\"}\\n\\n{\\\"section\\\": \\\"📊 Resumen por Ciclo\\\", \\\"tabla\\\": [\\n  {\\\"ciclo\\\": \\\"V1\\\", \\\"foco\\\": \\\"Estructura + funcionalidad mínima\\\", \\\"madurez\\\": \\\"Demostración de valor\\\"},\\n  {\\\"ciclo\\\": \\\"V2\\\", \\\"foco\\\": \\\"Validación + organización interna\\\", \\\"madurez\\\": \\\"Fiabilidad técnica inicial\\\"},\\n  {\\\"ciclo\\\": \\\"V3\\\", \\\"foco\\\": \\\"Interacción externa clara\\\", \\\"madurez\\\": \\\"Usabilidad operativa\\\"},\\n  {\\\"ciclo\\\": \\\"V4\\\", \\\"foco\\\": \\\"Distribución y automatización\\\", \\\"madurez\\\": \\\"Escalabilidad y mantenimiento\\\"},\\n  {\\\"ciclo\\\": \\\"V5\\\", \\\"foco\\\": \\\"Optimización y expansión\\\", \\\"madurez\\\": \\\"Listo para evolución continua\\\"}\\n]}\\n\\n{\\\"section\\\": \\\"🧠 Metáfora estructural\\\", \\\"contenido\\\": \\\"Un buen sistema no crece como una torre, sino como un organismo: cada parte nueva debe ser funcional, integrada y vital para el todo.\\\", \\\"analogía\\\": \\\"🧬 Cada ciclo es una nueva vuelta en la espiral evolutiva del proyecto.\\\"}\\n\",\"type\":\"application/json\",\"title\":\"🎯 9. Plan de desarrollo\",\"modified\":\"20250531041140189\",\"tags\":\"[[🎯 9. Plan de desarrollo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[--- 🌀 Helices de desarrollo]]\",\"color\":\"#00c3db\",\"tmap.id\":\"e5c8992c-a0fc-4b3c-a7ee-315a412d2516\"},{\"created\":\"20250417024025172\",\"text\":\"{\\n  \\\"title\\\": \\\"🎯 Espectros de desarrollo\\\",\\n  \\\"id\\\": \\\"🎯 Espectros de desarrollo\\\",\\n  \\\"tags\\\": [\\n    \\\"🎯 Espectros de desarrollo\\\",\\n    \\\"🎯🧬 0.1 Pre-Impacto\\\",\\n    \\\"🎯🧬 0.2 Impacto\\\",\\n    \\\"🎯🧬 0.3 Post-Impacto\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- 🌀 Helices de desarrollo\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"🎯🧬 0.1 Pre-Impacto\\\",\\n      \\\"🎯🧬 0.2 Impacto\\\",\\n      \\\"🎯🧬 0.3 Post-Impacto\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🎯 9. Plan de desarrollo\\\",\\n      \\\"🎯 8. Estructura\\\",\\n      \\\"🎯 4. Flujo de interaccion\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"🗂 Evolución Semántica\\\",\\n      \\\"🗂 Usabilidad y Robustez\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"--- 🎯 Detalles del proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler define los espectros epigenéticos del sistema, que marcan las fases didácticas de desarrollo: Pre-Impacto, Impacto y Post-Impacto. Cada espectro guía una vuelta helicoidal del sistema, articulando intención, implementación y reflexión.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🎯 Espectros de desarrollo\\\\n\\\\nDefine el marco didáctico-epigenético que organiza el desarrollo en tres fases:\\\\n- 🎯🧬 0.1 Pre-Impacto\\\\n- 🎯🧬 0.2 Impacto\\\\n- 🎯🧬 0.3 Post-Impacto\\\\n\\\\n### Usa:\\\\n- 🎯 9. Plan de desarrollo\\\\n- 🎯 8. Estructura\\\\n- 🎯 4. Flujo de interaccion\\\\n\\\\n### Requiere:\\\\n- 🗂 Evolución Semántica\\\\n- 🗂 Usabilidad y Robustez\\\\n\\\\n### Parte de:\\\\n- --- 🎯 Detalles del proyecto\\\\n\\\\n---\\\\n> Este modelo permite desarrollar no solo funcionalidad, sino capacidad evolutiva. Cada espectro representa una vuelta viva de aprendizaje y adaptación sistémica.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"🌀 Espectro de Desarrollo\\\",\\n  \\\"inspiracion\\\": \\\"Muska Mosston\\\",\\n  \\\"descripcion\\\": \\\"Estructura didáctica, reflexiva y evolutiva aplicada al desarrollo de software, compatible con el modelo helicoidal-genético de OpenPages-Source.\\\"\\n}\\n{\\n  \\\"principio\\\": \\\"1. 🧠 Facilita la metacognición técnica\\\",\\n  \\\"descripcion\\\": \\\"Invita a pensar antes de escribir código. Convierte cada decisión técnica en un acto consciente.\\\",\\n  \\\"preguntas_reflexivas\\\": [\\n    \\\"¿Qué se necesita?\\\",\\n    \\\"¿Por qué ahora?\\\",\\n    \\\"¿Qué impacto tendrá?\\\"\\n  ]\\n}\\n{\\n  \\\"principio\\\": \\\"2. 🧬 Refuerza la analogía biológica del gen\\\",\\n  \\\"descripcion\\\": \\\"Cada vuelta es como la activación de un gen, y el Espectro de Desarrollo modela su expresión contextual.\\\",\\n  \\\"etapas\\\": [\\n    {\\n      \\\"etapa\\\": \\\"🎯🧬 Pre-Impacto\\\",\\n      \\\"descripcion\\\": \\\"Condiciones de activación. Redactado gramaticalmente en tiempo futuro.\\\"\\n    },\\n    {\\n      \\\"etapa\\\": \\\"🎯🧬 Impacto\\\",\\n      \\\"descripcion\\\": \\\"Expresión del gen. Código, lógica, cambio. Redactado en tiempo presente.\\\"\\n    },\\n    {\\n      \\\"etapa\\\": \\\"🎯🧬 Post-Impacto\\\",\\n      \\\"descripcion\\\": \\\"Evaluación y aprendizaje. Redactado en tiempo pasado.\\\"\\n    }\\n  ],\\n  \\\"nota\\\": \\\"Como en la epigenética: los genes se expresan según contexto, no por defecto.\\\"\\n}\\n{\\n  \\\"principio\\\": \\\"3. 📈 Aumenta la trazabilidad sin sobrecargar\\\",\\n  \\\"descripcion\\\": \\\"El Espectro de Desarrollo mejora la trazabilidad técnica y semántica sin ser invasivo.\\\",\\n  \\\"beneficios\\\": [\\n    \\\"Puede guardarse como markdown o jsonl para dashboards.\\\",\\n    \\\"Provee contexto semántico para cada ciclo de cambio.\\\",\\n    \\\"Se vincula a vueltas helicoidales como V2.R3.C1.\\\"\\n  ]\\n}\\n{\\n  \\\"principio\\\": \\\"4. 🔁 Promueve ciclos de mejora continua (CI/CD educativo)\\\",\\n  \\\"descripcion\\\": \\\"Integra la reflexión en el pipeline: no solo codificamos y probamos, también aprendemos y documentamos.\\\",\\n  \\\"aprendizaje_iterativo\\\": [\\n    \\\"Lo aprendido\\\",\\n    \\\"Lo que falló\\\",\\n    \\\"Lo que podríamos haber hecho mejor\\\"\\n  ],\\n  \\\"resultado\\\": \\\"El pipeline se convierte en un entorno de crecimiento.\\\"\\n}\\n{\\n  \\\"principio\\\": \\\"5. 🎓 Es didáctico para colaboradores y reclutadores\\\",\\n  \\\"descripcion\\\": \\\"Facilita el onboarding y la evaluación externa del proyecto.\\\",\\n  \\\"beneficios\\\": [\\n    \\\"Permite entender la intención antes del código.\\\",\\n    \\\"Expone un historial semántico del desarrollo.\\\",\\n    \\\"Guía a colaboradores dentro de un marco estructurado y no improvisado.\\\"\\n  ]\\n}\\n\",\"type\":\"application/json\",\"title\":\"🎯 Espectros de desarrollo\",\"modified\":\"20250531041437566\",\"tags\":\"[[🎯 Espectros de desarrollo]] [[🎯 9. Plan de desarrollo]] [[🎯 8. Estructura]] [[🎯 4. Flujo de interaccion]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]]\",\"color\":\"#00c3db\",\"tmap.id\":\"91d11c09-a695-4f3a-b85a-84261d229ce7\"},{\"created\":\"20250424020256953\",\"text\":\"{\\n  \\\"title\\\": \\\"🎯🧬 0.1 Pre-Impacto\\\",\\n  \\\"id\\\": \\\"🎯🧬 0.1 Pre-Impacto\\\",\\n  \\\"tags\\\": [\\n    \\\"🎯🧬 0.1 Pre-Impacto\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- 🌀 Helices de desarrollo\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"usa\\\": [\\n      \\\"🎯 Espectros de desarrollo\\\",\\n      \\\"🎯 2. Requisitos\\\",\\n      \\\"🎯 6. Componentes\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"🗂 Diseño\\\",\\n      \\\"🗂 Evolución Semántica\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"--- Codigo\\\",\\n      \\\"--- 🎯 Detalles del proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler corresponde a la fase de Pre-Impacto de una vuelta helicoidal. Aquí se planifica la acción: qué se quiere mutar, qué requisitos están implicados, qué componente evoluciona. Define la intención semántica previa al desarrollo.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🎯🧬 0.1 Pre-Impacto\\\\n\\\\nFase previa a la acción. Aquí se estructura la intención, objetivos, requisitos y criterios de la vuelta a desarrollar.\\\\n\\\\n### Usa:\\\\n- 🎯 Espectros de desarrollo\\\\n- 🎯 2. Requisitos\\\\n- 🎯 6. Componentes\\\\n\\\\n### Requiere:\\\\n- 🗂 Diseño\\\\n- 🗂 Evolución Semántica\\\\n\\\\n### Parte de:\\\\n- --- Codigo\\\\n- --- 🎯 Detalles del proyecto\\\\n\\\\n---\\\\n> En esta fase el sistema no actúa aún, pero se prepara como un organismo que planea su mutación. Es un punto de conciencia técnica y ética previo al impacto.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"🎯 Espectro de Desarrollo – Pre-Impacto\\\",\\n  \\\"titulo\\\": \\\"Vuelta {n} – {nombre breve}\\\",\\n  \\\"descripcion\\\": \\\"Anticipa el impacto de la vuelta helicoidal, basada en un diseño evolutivo guiado por necesidad funcional, trazabilidad semántica y extensión ética del sistema.\\\"\\n}\\n{\\n  \\\"subsection\\\": \\\"🧭 Enfoques a considerar\\\",\\n  \\\"mejora\\\": \\\"{breve descripción del problema}\\\",\\n  \\\"evaluacion_enfoques\\\": [\\\"{enfoque_1}\\\", \\\"{enfoque_2}\\\"],\\n  \\\"criterios_priorizacion\\\": [\\\"éticos\\\", \\\"modulares\\\", \\\"de trazabilidad\\\"]\\n}\\n{\\n  \\\"subsection\\\": \\\"📂 Archivos por involucrar\\\",\\n  \\\"archivos\\\": [\\n    {\\\"archivo\\\": \\\"nombre.py\\\", \\\"cambio_previsto\\\": \\\"{tipo de cambio}\\\", \\\"delta_r\\\": \\\"+X\\\", \\\"delta_c\\\": \\\"+Y\\\"},\\n    {\\\"archivo\\\": \\\"otro.formato\\\", \\\"cambio_previsto\\\": \\\"{tipo de mutación o integración}\\\", \\\"delta_r\\\": \\\"+X\\\", \\\"delta_c\\\": \\\"+Y\\\"}\\n  ]\\n}\\n{\\n  \\\"subsection\\\": \\\"🧪 Posibles Dependencias a usar\\\",\\n  \\\"dependencias\\\": [\\n    {\\\"paquete\\\": \\\"nombre\\\", \\\"rol\\\": \\\"Abcd\\\", \\\"estado\\\": \\\"✅ Instalado\\\"},\\n    {\\\"paquete\\\": \\\"nombre\\\", \\\"rol\\\": \\\"Abcd\\\", \\\"estado\\\": \\\"⏳ Evaluando\\\"},\\n    {\\\"paquete\\\": \\\"nombre\\\", \\\"rol\\\": \\\"Abcd\\\", \\\"estado\\\": \\\"✅ Activo\\\"}\\n  ]\\n}\\n{\\n  \\\"subsection\\\": \\\"🧠 Funciones del Módulo a desarrollar\\\",\\n  \\\"funciones\\\": [\\n    {\\\"funcion\\\": \\\"funcion_nueva()\\\", \\\"proposito\\\": \\\"{qué hará}\\\", \\\"tipo_expresion\\\": \\\"feat\\\"},\\n    {\\\"funcion\\\": \\\"funcion_existente()\\\", \\\"proposito\\\": \\\"{cómo mutará}\\\", \\\"tipo_expresion\\\": \\\"refac\\\"},\\n    {\\\"funcion\\\": \\\"test_funcion()\\\", \\\"proposito\\\": \\\"validación\\\", \\\"tipo_expresion\\\": \\\"test\\\"}\\n  ]\\n}\\n{\\n  \\\"subsection\\\": \\\"🔧 Detalle Técnico a implementar\\\",\\n  \\\"detalles\\\": [\\n    \\\"Se implementará {módulo/clase} con tolerancia a {fallos/detección}\\\",\\n    \\\"Se habilitará control por `{flag}` o `{condición}`\\\",\\n    \\\"Se garantizará limpieza de artefactos (archivos, logs, etc.)\\\",\\n    \\\"Se documentará impacto con `log_evento(...)`\\\"\\n  ]\\n}\\n{\\n  \\\"subsection\\\": \\\"📘 Aprendizajes Clave por adquirir\\\",\\n  \\\"aprendizajes\\\": [\\n    {\\\"area\\\": \\\"OCR\\\", \\\"pregunta\\\": \\\"¿Qué tanto mejora la extracción frente a modo Lite?\\\"},\\n    {\\\"area\\\": \\\"Encoding\\\", \\\"pregunta\\\": \\\"¿Qué patrones se detectan tras aplicar `enhancer`?\\\"},\\n    {\\\"area\\\": \\\"Semántica\\\", \\\"pregunta\\\": \\\"¿Cómo afecta la limpieza a la clasificación final?\\\"},\\n    {\\\"area\\\": \\\"Diseño\\\", \\\"pregunta\\\": \\\"¿El gen resultante es modular y extensible?\\\"}\\n  ]\\n}\\n{\\n  \\\"subsection\\\": \\\"📈 Estado del Módulo actual\\\",\\n  \\\"modulos\\\": [\\n    {\\\"archivo\\\": \\\"ocr.py\\\", \\\"estado\\\": \\\"🧬 En diseño\\\", \\\"observacion\\\": \\\"Funciones bosquejadas\\\"},\\n    {\\\"archivo\\\": \\\"parser.py\\\", \\\"estado\\\": \\\"🧬 Mutado\\\", \\\"observacion\\\": \\\"Soporta fallback OCR\\\"},\\n    {\\\"archivo\\\": \\\"main.py\\\", \\\"estado\\\": \\\"🧠 Preparado\\\", \\\"observacion\\\": \\\"Flujo con `--ocr` listo\\\"},\\n    {\\\"archivo\\\": \\\"tests/\\\", \\\"estado\\\": \\\"⏳ Pendiente\\\", \\\"observacion\\\": \\\"Aún sin fixtures finales\\\"}\\n  ]\\n}\\n{\\n  \\\"nota_final\\\": \\\"🌀 Esta planificación antecede la Vuelta #{n}, asegurando que su impacto sea deliberado, trazable y semánticamente medido.\\\"\\n}\\n\",\"title\":\"🎯🧬 0.1 Pre-Impacto\",\"modified\":\"20250531041512915\",\"tags\":\"[[🎯🧬 0.1 Pre-Impacto]] [[--- 🎯 Detalles del proyecto]] [[--- Codigo]] [[🎯 Espectros de desarrollo]]\",\"tmap.id\":\"a6760e48-a9ae-45de-a5e8-5b1b20d47cd6\",\"color\":\"#00c3db\",\"type\":\"application/json\"},{\"created\":\"20250424020332765\",\"text\":\"{\\n  \\\"title\\\": \\\"🎯🧬 0.2 Impacto\\\",\\n  \\\"id\\\": \\\"🎯🧬 0.2 Impacto\\\",\\n  \\\"tags\\\": [\\n    \\\"🎯🧬 0.2 Impacto\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- 🌀 Helices de desarrollo\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"usa\\\": [\\n      \\\"🎯 6. Componentes\\\",\\n      \\\"🎯 7. Algoritmos y matematicas\\\",\\n      \\\"⚙️🧪 tests_\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"🎯🧬 0.1 Pre-Impacto\\\",\\n      \\\"🎯 Espectros de desarrollo\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"--- Codigo\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler representa la fase activa de mutación del sistema: implementación, ejecución, refactorización y generación de pruebas. Se basa en la planificación previa y transforma directamente los componentes y algoritmos del núcleo.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🎯🧬 0.2 Impacto\\\\n\\\\nFase activa de codificación, ejecución y validación de la vuelta helicoidal.\\\\n\\\\n### Usa:\\\\n- 🎯 6. Componentes\\\\n- 🎯 7. Algoritmos y matematicas\\\\n- ⚙️🧪 tests_\\\\n\\\\n### Requiere:\\\\n- 🎯🧬 0.1 Pre-Impacto\\\\n- 🎯 Espectros de desarrollo\\\\n\\\\n### Parte de:\\\\n- --- Codigo\\\\n\\\\n---\\\\n> Esta es la fase de impacto sistémico: el sistema muta, se transforma, se expresa. Aquí se materializa la evolución planeada en el Pre-Impacto, y se valida su consistencia.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"🧬 Impacto Genético\\\",\\n  \\\"gen\\\": \\\"nombre_modulo.py\\\",\\n  \\\"descripcion\\\": \\\"Este gen aporta al sistema una capacidad nueva, adaptativa y trazable. Su incorporación expresa una mutación funcional significativa que se integra con el ecosistema helicoidal sin romperlo.\\\"\\n}\\n{\\n  \\\"subsection\\\": \\\"📂 Archivos Activados\\\",\\n  \\\"archivos\\\": [\\n    {\\\"archivo\\\": \\\"src/nombre_modulo.py\\\", \\\"cambio_funcional\\\": \\\"[breve descripción técnica]\\\", \\\"delta_r\\\": \\\"+X\\\", \\\"delta_c\\\": \\\"+Y\\\"},\\n    {\\\"archivo\\\": \\\"otro_modulo.py\\\", \\\"cambio_funcional\\\": \\\"[ej. integración condicional]\\\", \\\"delta_r\\\": \\\"+X\\\", \\\"delta_c\\\": \\\"+Y\\\"},\\n    {\\\"archivo\\\": \\\"tests/test_nombre_modulo.py\\\", \\\"cambio_funcional\\\": \\\"[ej. testeo por función o flujo]\\\", \\\"delta_r\\\": \\\"+X\\\", \\\"delta_c\\\": \\\"+Y\\\"}\\n  ]\\n}\\n{\\n  \\\"subsection\\\": \\\"🧠 Funciones del Gen\\\",\\n  \\\"modulo\\\": \\\"nombre_modulo.py\\\",\\n  \\\"funciones\\\": [\\n    {\\\"funcion\\\": \\\"funcion_principal()\\\", \\\"expresion\\\": \\\"[resumen de la expresión]\\\", \\\"tipo\\\": \\\"Principal\\\", \\\"comentario\\\": \\\"[ej. núcleo del cambio]\\\"},\\n    {\\\"funcion\\\": \\\"funcion_secundaria()\\\", \\\"expresion\\\": \\\"[mutación, helper...]\\\", \\\"tipo\\\": \\\"Adaptativa / Técnica\\\", \\\"comentario\\\": \\\"[ej. complemento a fallback]\\\"}\\n  ]\\n}\\n{\\n  \\\"subsection\\\": \\\"📈 Trazabilidad Evolutiva\\\",\\n  \\\"registros\\\": [\\n    {\\n      \\\"vuelta\\\": \\\"Vx\\\",\\n      \\\"radio\\\": \\\"Rx\\\",\\n      \\\"madurez\\\": \\\"Cx\\\",\\n      \\\"gen\\\": \\\"nombre\\\",\\n      \\\"bloque\\\": \\\"b=1\\\",\\n      \\\"commit\\\": \\\"feat(D): funcion_principal() – descripción - (Vx.Rx.Cx / gen=nombre, b=1, ∆r=+X, ∆c=+Y)\\\"\\n    }\\n  ]\\n}\\n{\\n  \\\"subsection\\\": \\\"📊 Resultados Semánticos del Gen\\\",\\n  \\\"indicadores\\\": {\\n    \\\"funciones_nuevas\\\": \\\"✅ N\\\",\\n    \\\"casos_de_uso_cubiertos\\\": \\\"✅/⚠️ Detalle\\\",\\n    \\\"compatibilidad_modular\\\": \\\"✅ Total / ⚠️ Parcial\\\",\\n    \\\"logs_generados\\\": \\\"✅ Por evento / función\\\",\\n    \\\"fallback_robustez\\\": \\\"✅ / ⚠️ Detalle\\\"\\n  }\\n}\\n{\\n  \\\"subsection\\\": \\\"🔍 Análisis Diferencial\\\",\\n  \\\"delta_r\\\": \\\"+X.X\\\",\\n  \\\"delta_c\\\": \\\"+Y.Y\\\",\\n  \\\"descripcion\\\": \\\"[madurez alcanzada: test, fallback, logging, doc, etc.]\\\"\\n}\\n{\\n  \\\"subsection\\\": \\\"🧠 Reflexión Final del Gen\\\",\\n  \\\"gen\\\": \\\"nombre_modulo\\\",\\n  \\\"reflexion\\\": \\\"[Reflexión ética o semántica del cambio. Qué aporta a largo plazo. Qué representa este gen para el sistema.]\\\",\\n  \\\"autor\\\": \\\"Helicodista · OpenPages Pipeline Vx\\\"\\n}\\n{\\n  \\\"subsection\\\": \\\"📇 Ficha Helicoidal\\\",\\n  \\\"ficha\\\": {\\n    \\\"gen\\\": \\\"nombre_modulo.py\\\",\\n    \\\"tag_funcional\\\": \\\"🌀 Tag representativo\\\",\\n    \\\"vuelta_activa\\\": \\\"Vx\\\",\\n    \\\"futuras_vueltas\\\": \\\"Vy\\\",\\n    \\\"funcion_principal\\\": \\\"funcion_principal()\\\",\\n    \\\"tipo_expresion\\\": \\\"[Ej. funcional adaptativa / heurística / validación]\\\",\\n    \\\"r(t)\\\": \\\"X.X\\\",\\n    \\\"c(t)\\\": \\\"Y.Y\\\",\\n    \\\"r'(t)\\\": \\\"+X.X\\\",\\n    \\\"c'(t)\\\": \\\"+Y.Y\\\",\\n    \\\"estado\\\": \\\"✅ Integrado / Parcial\\\",\\n    \\\"relacionado_con\\\": \\\"otros_modulos.py\\\"\\n  }\\n}\\n\",\"title\":\"🎯🧬 0.2 Impacto\",\"modified\":\"20250531041548914\",\"tags\":\"[[🎯🧬 0.2 Impacto]] [[--- 🎯 Detalles del proyecto]] [[--- Codigo]] [[🎯 Espectros de desarrollo]]\",\"tmap.id\":\"c0e1316e-c46a-4022-989e-d1a75c31c0cf\",\"color\":\"#00c3db\",\"type\":\"application/json\"},{\"created\":\"20250424020349633\",\"text\":\"{\\n  \\\"title\\\": \\\"🎯🧬 0.3 Post-Impacto\\\",\\n  \\\"id\\\": \\\"🎯🧬 0.3 Post-Impacto\\\",\\n  \\\"tags\\\": [\\n    \\\"🎯🧬 0.3 Post-Impacto\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"--- 🌀 Helices de desarrollo\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"usa\\\": [\\n      \\\"🎯🧬 0.2 Impacto\\\",\\n      \\\"⚙️🧪 tests_\\\",\\n      \\\"🎯 5. Arquitectura\\\"\\n    ],\\n    \\\"define\\\": [\\n      \\\"mutaciones futuras\\\",\\n      \\\"mejoras UX\\\",\\n      \\\"recombinaciones\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"🎯 Espectros de desarrollo\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"--- Codigo\\\",\\n      \\\"--- 🎯 Detalles del proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler evalúa los efectos de la vuelta implementada. Se detectan mutaciones sistémicas, problemas emergentes, y oportunidades de mejora. Es la base para reflexionar, optimizar y alimentar futuras iteraciones helicoidales.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🎯🧬 0.3 Post-Impacto\\\\n\\\\nFase de observación, medición y reflexión tras una vuelta helicoidal.\\\\n\\\\n### Usa:\\\\n- 🎯🧬 0.2 Impacto\\\\n- ⚙️🧪 tests_\\\\n- 🎯 5. Arquitectura\\\\n\\\\n### Define:\\\\n- mutaciones futuras\\\\n- mejoras UX\\\\n- recombinaciones\\\\n\\\\n### Requiere:\\\\n- 🎯 Espectros de desarrollo\\\\n\\\\n### Parte de:\\\\n- --- Codigo\\\\n- --- 🎯 Detalles del proyecto\\\\n\\\\n---\\\\n> Esta fase mide lo que el sistema aprendió de sí mismo. Evalúa el impacto funcional, semántico y estructural, y siembra el terreno para la próxima evolución controlada.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"🎯🧬 Post-Impacto\\\",\\n  \\\"vuelta\\\": \\\"Vx\\\",\\n  \\\"gen\\\": \\\"nombre_modulo.py\\\",\\n  \\\"descripcion\\\": \\\"Este informe describe los efectos reales, aprendizajes y mutaciones emergentes tras la activación del gen nombre_modulo.py durante la vuelta Vx. Sirve como bitácora de retroalimentación epigenética, captura los cambios en el ecosistema, y prepara el terreno para futuras vueltas helicoidales.\\\"\\n}\\n{\\n  \\\"subsection\\\": \\\"✅ Evaluación Funcional\\\",\\n  \\\"evaluacion\\\": {\\n    \\\"integracion_modular\\\": \\\"✅ Sí / ⚠️ Parcial / ❌ No\\\",\\n    \\\"resiliencia_sistema\\\": \\\"✅\\\",\\n    \\\"tests_en_CI_CD\\\": \\\"✅ / ❌ con observaciones\\\",\\n    \\\"flujo_main_py\\\": \\\"✅ / ⚠️ Con advertencias\\\",\\n    \\\"nuevos_datos_procesables\\\": \\\"[Texto OCR, ecuaciones, baja calidad...]\\\"\\n  }\\n}\\n{\\n  \\\"subsection\\\": \\\"🧠 Aprendizajes Derivados\\\",\\n  \\\"lecciones\\\": [\\n    {\\\"area\\\": \\\"Diseño del módulo\\\", \\\"leccion\\\": \\\"[ej. `enhancer.py` requiere expansión para OCR no latino]\\\"},\\n    {\\\"area\\\": \\\"Robustez\\\", \\\"leccion\\\": \\\"[ej. fallos menores en fallback sin Poppler → plan para V3]\\\"},\\n    {\\\"area\\\": \\\"Semántica\\\", \\\"leccion\\\": \\\"[ej. nuevos logs enriquecen trazabilidad de errores por OCR]\\\"},\\n    {\\\"area\\\": \\\"Usuario\\\", \\\"leccion\\\": \\\"[ej. CLI aún confusa para errores OCR → mejorar UX CLI]\\\"}\\n  ]\\n}\\n{\\n  \\\"subsection\\\": \\\"🔄 Mutaciones Emergentes Detectadas\\\",\\n  \\\"mutaciones\\\": [\\n    {\\\"observacion\\\": \\\"Algunos documentos tienen `cid` + mojibake + fórmulas\\\", \\\"potencial\\\": \\\"Composición multi-enhancer (pipeline de limpieza inteligente)\\\"},\\n    {\\\"observacion\\\": \\\"Logs multilingües ayudan al debugging\\\", \\\"potencial\\\": \\\"Logger embebido en `.md` para reproducibilidad\\\"},\\n    {\\\"observacion\\\": \\\"`.jsonl` permite detectar OCR fallido por chunk vacío\\\", \\\"potencial\\\": \\\"Clasificador de confiabilidad OCR\\\"}\\n  ]\\n}\\n{\\n  \\\"subsection\\\": \\\"📈 Derivadas Observadas\\\",\\n  \\\"derivadas\\\": [\\n    {\\\"variable\\\": \\\"r′(t)\\\", \\\"valor\\\": \\\"+2.0\\\", \\\"observacion\\\": \\\"Alta expansión de alcance funcional\\\"},\\n    {\\\"variable\\\": \\\"c′(t)\\\", \\\"valor\\\": \\\"+1.5\\\", \\\"observacion\\\": \\\"Madurez incrementada (tests, logs, fallback)\\\"}\\n  ],\\n  \\\"cita\\\": \\\"Esta vuelta fue altamente evolutiva. El sistema ahora escucha documentos que antes eran ruido visual puro.\\\"\\n}\\n{\\n  \\\"subsection\\\": \\\"🔗 Impacto sobre la arquitectura\\\",\\n  \\\"impacto\\\": [\\n    {\\\"capa\\\": \\\"🧠 Lógica de Aplicación\\\", \\\"cambios\\\": \\\"Nuevo flujo adaptativo en `parser.py`, `main.py`\\\"},\\n    {\\\"capa\\\": \\\"📦 Capa de Datos\\\", \\\"cambios\\\": \\\"Más `.jsonl` semánticamente válidos desde OCR\\\"},\\n    {\\\"capa\\\": \\\"🔌 Integración externa\\\", \\\"cambios\\\": \\\"Prepara base para LLMs tolerantes al OCR\\\"},\\n    {\\\"capa\\\": \\\"🔐 Ética computacional\\\", \\\"cambios\\\": \\\"No excluye PDFs difíciles → mayor inclusión\\\"}\\n  ]\\n}\\n{\\n  \\\"subsection\\\": \\\"🌱 Recombinación futura\\\",\\n  \\\"propuestas\\\": [\\n    {\\\"area\\\": \\\"OCR\\\", \\\"propuesta\\\": \\\"`lang=\\\\\\\"equ\\\\\\\"` para ecuaciones científicas\\\"},\\n    {\\\"area\\\": \\\"Exportación\\\", \\\"propuesta\\\": \\\"`.md` con logs embebidos (`md + YAML + logs`)\\\"},\\n    {\\\"area\\\": \\\"Validación\\\", \\\"propuesta\\\": \\\"Detección automática de OCR de baja calidad\\\"}\\n  ]\\n}\\n{\\n  \\\"subsection\\\": \\\"📇 Ficha de Cierre Helicoidal\\\",\\n  \\\"ficha\\\": {\\n    \\\"gen\\\": \\\"nombre_modulo.py\\\",\\n    \\\"tag_funcional\\\": \\\"🌀 OCR Inteligente\\\",\\n    \\\"vuelta_evaluada\\\": \\\"Vx\\\",\\n    \\\"r_prime\\\": \\\"+2.0\\\",\\n    \\\"c_prime\\\": \\\"+1.5\\\",\\n    \\\"estado_final\\\": \\\"✅ Estable con oportunidades de expansión\\\",\\n    \\\"siguiente_vuelta\\\": \\\"Vy → foco en OCR multilingüe, ecuaciones\\\"\\n  },\\n  \\\"cierre\\\": \\\"El cierre de una vuelta no es un punto final, sino el inicio de nuevas posibilidades.\\\",\\n  \\\"firma\\\": \\\"Bitácora Epigenética · OpenPages Pipeline\\\"\\n}\\n\",\"title\":\"🎯🧬 0.3 Post-Impacto\",\"modified\":\"20250531041611069\",\"tags\":\"[[🎯🧬 0.3 Post-Impacto]] [[--- 🎯 Detalles del proyecto]] [[--- Codigo]] [[🎯 Espectros de desarrollo]]\",\"tmap.id\":\"0280c962-d63f-4bdb-ba91-8a1c876e24c1\",\"color\":\"#00c3db\",\"type\":\"application/json\"},{\"created\":\"20250417134213439\",\"text\":\"{\\n  \\\"title\\\": \\\"🗂 Calidad del Código\\\",\\n  \\\"id\\\": \\\"🗂 Calidad del Código\\\",\\n  \\\"tags\\\": [\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"🗂 Calidad del Código\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"KISS\\\",\\n      \\\"YAGNI\\\",\\n      \\\"DRY\\\",\\n      \\\"Evitar la Optimización Prematura\\\",\\n      \\\"Convención sobre Configuración\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"--- 🗂 Principios de programación\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"🗂 Diseño\\\",\\n      \\\"🗂 Modularidad y Estado\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"--- 🎯 Detalles del proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler define los principios fundamentales de calidad de código: KISS, DRY, YAGNI, Convención sobre Configuración, y Evitar Optimización Prematura. Modela cómo se relacionan, se tensionan creativamente y guían el diseño técnico del sistema.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🗂 Calidad del Código\\\\n\\\\nConjunto de principios que aseguran claridad, coherencia y sostenibilidad en el desarrollo:\\\\n\\\\n### Principios:\\\\n- **KISS** – base para todo diseño mantenible.\\\\n- **YAGNI** – no codifiques antes de tiempo.\\\\n- **DRY** – evita duplicación.\\\\n- **Evitar Optimización Prematura** – claridad sobre velocidad.\\\\n- **Convención sobre Configuración** – reduce configuración innecesaria.\\\\n\\\\n### Relaciones internas:\\\\n- `KISS → base para DRY y YAGNI`\\\\n- `YAGNI ↔ Optimización Prematura`\\\\n- `DRY ↔ KISS (tensión creativa)`\\\\n\\\\n### Parte de:\\\\n- --- 🎯 Detalles del proyecto\\\\n- --- 🗂 Principios de programación\\\\n\\\\n---\\\\n> Este nodo establece las reglas internas de simplicidad y coherencia. No solo guía el estilo del código, sino la estrategia conceptual detrás de cada decisión técnica.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"✨ Principios de Código Limpio y Simplicidad\\\",\\n  \\\"principio\\\": \\\"Convención sobre Configuración\\\",\\n  \\\"detalle\\\": \\\"Inspirado en frameworks como Rails o Spring, minimiza archivos de configuración utilizando valores por defecto coherentes. Favorece productividad y coherencia entre proyectos.\\\"\\n}\\n{\\n  \\\"principio\\\": \\\"KISS – Keep It Simple, Stupid\\\",\\n  \\\"detalle\\\": \\\"Diseña de forma clara, directa y comprensible. Es el fundamento de la legibilidad y mantenibilidad. Facilita la aplicación de DRY y YAGNI.\\\"\\n}\\n{\\n  \\\"principio\\\": \\\"YAGNI – You Aren’t Gonna Need It\\\",\\n  \\\"detalle\\\": \\\"No desarrolles funcionalidades hasta que exista una necesidad real. Reduce sobrecarga técnica y complejidad innecesaria. Complementa a KISS.\\\"\\n}\\n{\\n  \\\"principio\\\": \\\"DRY – Don’t Repeat Yourself\\\",\\n  \\\"detalle\\\": \\\"Evita duplicaciones de lógica, estructuras o datos. Mejora la mantenibilidad y previene errores de inconsistencia. Tiene una tensión natural con KISS (a veces duplicar clarifica).\\\"\\n}\\n{\\n  \\\"principio\\\": \\\"Evitar la Optimización Prematura\\\",\\n  \\\"detalle\\\": \\\"Optimiza solo cuando sea necesario. La prioridad es la claridad y luego el rendimiento. Se alinea con YAGNI: “no optimices lo que no vas a usar todavía”.\\\"\\n}\\n{\\n  \\\"subsection\\\": \\\"🔁 Relaciones internas entre principios\\\",\\n  \\\"relacion\\\": \\\"KISS → base para DRY y YAGNI\\\",\\n  \\\"explicacion\\\": \\\"El diseño simple permite identificar fácilmente duplicaciones o código innecesario.\\\"\\n}\\n{\\n  \\\"relacion\\\": \\\"YAGNI ↔ Optimización Prematura\\\",\\n  \\\"explicacion\\\": \\\"Ambos advierten sobre la sobrecarga técnica anticipada sin justificación clara.\\\"\\n}\\n{\\n  \\\"relacion\\\": \\\"DRY ↔ KISS (tensión creativa)\\\",\\n  \\\"explicacion\\\": \\\"Evitar duplicación mejora mantenimiento, pero a veces duplicar clarifica el código.\\\"\\n}\\n\",\"type\":\"application/json\",\"title\":\"🗂 Calidad del Código\",\"modified\":\"20250531041815751\",\"tags\":\"[[--- 🗂 Principios de programación]] [[🗂 Calidad del Código]] [[--- 🎯 Detalles del proyecto]]\",\"color\":\"#db5f00\",\"tmap.id\":\"edcd8959-4fd3-47c3-8d26-2d5635409ba8\"},{\"created\":\"20250417134125921\",\"text\":\"{\\n  \\\"title\\\": \\\"🗂 Diseño\\\",\\n  \\\"id\\\": \\\"🗂 Diseño\\\",\\n  \\\"tags\\\": [\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"🗂 Diseño\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"SRP – Single Responsibility\\\",\\n      \\\"OCP – Open/Closed\\\",\\n      \\\"LSP – Liskov Substitution\\\",\\n      \\\"ISP – Interface Segregation\\\",\\n      \\\"DIP – Dependency Inversion\\\",\\n      \\\"Composición sobre Herencia\\\",\\n      \\\"Encapsulación\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🗂 Calidad del Código\\\",\\n      \\\"🗂 Modularidad y Estado\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"KISS\\\",\\n      \\\"DRY\\\",\\n      \\\"Evitar la Optimización Prematura\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"--- 🗂 Principios de programación\\\",\\n      \\\"--- 🎯 Detalles del proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler reúne principios fundamentales de diseño orientado a objetos: SOLID, composición, encapsulación. Define sus relaciones internas, sus beneficios y cómo orientan la arquitectura y evolución del sistema.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🗂 Diseño\\\\n\\\\nPrincipios estructurales que rigen el diseño técnico del sistema:\\\\n\\\\n### SOLID:\\\\n- SRP – responsabilidad única\\\\n- OCP – abierto a extensión, cerrado a modificación\\\\n- LSP – sustitución de Liskov\\\\n- ISP – segregación de interfaces\\\\n- DIP – inversión de dependencias\\\\n\\\\n### Complementarios:\\\\n- Composición sobre Herencia\\\\n- Encapsulación\\\\n\\\\n### Relaciones internas:\\\\n- Encapsulación → SRP y DIP\\\\n- Composición sobre Herencia → OCP y LSP\\\\n\\\\n### Usa:\\\\n- 🗂 Calidad del Código\\\\n- 🗂 Modularidad y Estado\\\\n\\\\n### Requiere:\\\\n- KISS, DRY, Evitar Optimización Prematura\\\\n\\\\n### Parte de:\\\\n- --- 🗂 Principios de programación\\\\n- --- 🎯 Detalles del proyecto\\\\n\\\\n---\\\\n> Este nodo refuerza la coherencia, escalabilidad y mantenibilidad del sistema. Es la base para diseñar módulos resilientes, claros y testeables.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"Principios de Diseño Orientado a Objetos (OOP)\\\",\\n  \\\"principio\\\": \\\"SRP – Single Responsibility\\\",\\n  \\\"detalle\\\": \\\"Cada módulo o clase debe tener una sola razón para cambiar. Favorece claridad y facilidad de pruebas.\\\"\\n}\\n{\\n  \\\"principio\\\": \\\"OCP – Open/Closed\\\",\\n  \\\"detalle\\\": \\\"El código debe estar abierto a extensión pero cerrado a modificación. Se puede agregar funcionalidad sin alterar lo existente.\\\"\\n}\\n{\\n  \\\"principio\\\": \\\"LSP – Liskov Substitution\\\",\\n  \\\"detalle\\\": \\\"Una subclase debe poder reemplazar a su clase padre sin alterar el comportamiento esperado.\\\"\\n}\\n{\\n  \\\"principio\\\": \\\"ISP – Interface Segregation\\\",\\n  \\\"detalle\\\": \\\"Se deben definir interfaces específicas y pequeñas, evitando forzar a los módulos a depender de lo que no usan.\\\"\\n}\\n{\\n  \\\"principio\\\": \\\"DIP – Dependency Inversion\\\",\\n  \\\"detalle\\\": \\\"Los módulos de alto nivel no deben depender de detalles, sino de abstracciones. Facilita pruebas y desacoplamiento.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"Composición sobre Herencia\\\",\\n  \\\"enunciado\\\": \\\"Has-a vs Is-a\\\",\\n  \\\"detalle\\\": \\\"Prefiere composición o inyección de dependencias sobre la herencia rígida.\\\"\\n}\\n{\\n  \\\"enunciado\\\": \\\"Mantenimiento\\\",\\n  \\\"detalle\\\": \\\"Facilita modificación, pruebas unitarias y extensión flexible.\\\"\\n}\\n{\\n  \\\"enunciado\\\": \\\"Relación con otros principios\\\",\\n  \\\"detalle\\\": \\\"Refuerza DIP (inversión de dependencias) y OCP/LSP al permitir estructuras desacopladas.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"Encapsulación\\\",\\n  \\\"enunciado\\\": \\\"Ocultamiento de estado interno\\\",\\n  \\\"detalle\\\": \\\"Expone solo una API mínima pública, protegiendo la lógica interna del módulo.\\\"\\n}\\n{\\n  \\\"enunciado\\\": \\\"Modularidad y estado\\\",\\n  \\\"detalle\\\": \\\"Refuerza el control del estado global, facilita la modularidad robusta y mantenible.\\\"\\n}\\n{\\n  \\\"section\\\": \\\"Relaciones internas entre principios\\\",\\n  \\\"relacion\\\": \\\"Encapsulación → SRP y DIP\\\",\\n  \\\"explicacion\\\": \\\"Ocultar detalles internos facilita tener responsabilidades únicas y manejar abstracciones.\\\"\\n}\\n{\\n  \\\"relacion\\\": \\\"Composición sobre herencia → OCP y LSP\\\",\\n  \\\"explicacion\\\": \\\"Usar composición permite extender sin modificar y mantener el principio de sustitución.\\\"\\n}\\n\",\"type\":\"application/json\",\"title\":\"🗂 Diseño\",\"modified\":\"20250531041910303\",\"tags\":\"[[--- 🗂 Principios de programación]] [[🗂 Diseño]] [[--- 🎯 Detalles del proyecto]]\",\"color\":\"#db5f00\",\"tmap.id\":\"e5b186ac-9ddc-4f40-a57e-d6bcbbe7900d\"},{\"created\":\"20250424000251908\",\"text\":\"{\\n  \\\"title\\\": \\\"🗂 Epigenética Computacional\\\",\\n  \\\"id\\\": \\\"🗂 Epigenética Computacional\\\",\\n  \\\"tags\\\": [\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"🗂 Epigenética Computacional\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"Condiciones de expresión\\\",\\n      \\\"Genes autorregulados (feedback)\\\",\\n      \\\"Diseño orientado por información\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🎯 7. Algoritmos y matematicas\\\",\\n      \\\"🎯 6. Componentes\\\",\\n      \\\"🎯 9. Plan de desarrollo\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"🗂 Diseño\\\",\\n      \\\"🗂 Modularidad y Estado\\\",\\n      \\\"🗂 Calidad del Código\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"--- 🗂 Principios de programación\\\",\\n      \\\"--- 🎯 Detalles del proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler describe una arquitectura viva, inspirada en genética: cada módulo (gen) se expresa sólo bajo ciertas condiciones, se regula a sí mismo, y deja trazas persistentes (herencia). Favorece sistemas resilientes, adaptativos y observables.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🗂 Epigenética Computacional\\\\n\\\\nArquitectura basada en el modelo genético vivo:\\\\n\\\\n### Conceptos centrales:\\\\n- **Gen**: función o módulo\\\\n- **Expresión**: ejecución concreta bajo condición\\\\n- **Regulación**: control de su activación\\\\n- **Herencia**: persistencia del efecto\\\\n\\\\n### Principios definidos:\\\\n- Condiciones de expresión (OCR si no hay texto)\\\\n- Genes autorregulados (feedback loops entre módulos)\\\\n- Diseño guiado por información (reducción de entropía, trazabilidad)\\\\n\\\\n### Usa:\\\\n- 🎯 7. Algoritmos y matematicas\\\\n- 🎯 6. Componentes\\\\n- 🎯 9. Plan de desarrollo\\\\n\\\\n### Requiere:\\\\n- 🗂 Diseño\\\\n- 🗂 Modularidad y Estado\\\\n- 🗂 Calidad del Código\\\\n\\\\n### Parte de:\\\\n- --- 🗂 Principios de programación\\\\n- --- 🎯 Detalles del proyecto\\\\n\\\\n---\\\\n> Esta capa permite que el sistema evolucione como un organismo: no solo reacciona, sino que se adapta, se observa y se autorregula.\\\"\\n}\\n{\\n  \\\"seccion\\\": \\\"Epigenética Computacional\\\",\\n  \\\"titulo\\\": \\\"Definición\\\",\\n  \\\"definicion\\\": \\\"Epigenética computacional es el diseño de software en el cual los módulos (genes) no solo existen de forma estática, sino que su ejecución (expresión) depende de condiciones internas y externas del sistema, al igual que los genes biológicos dependen del ambiente, energía, y señales bioquímicas.\\\",\\n  \\\"elementos\\\": {\\n    \\\"gen\\\": \\\"funciones o módulos\\\",\\n    \\\"expresion\\\": \\\"su ejecución concreta\\\",\\n    \\\"regulacion\\\": \\\"control de su activación\\\",\\n    \\\"herencia\\\": \\\"persistencia de su efecto (logs, outputs, cambios en estado global)\\\"\\n  }\\n}\\n{\\n  \\\"principio\\\": \\\"Condiciones de expresión\\\",\\n  \\\"descripcion\\\": \\\"Los genes del sistema no deben ejecutarse siempre. Deben estar condicionados a eventos, como 'si el PDF no tiene texto → activar OCR' o 'si el debug está activo → loguear todo'. Esto reduce costo computacional, aumenta legibilidad y mejora la eficiencia semántica.\\\"\\n}\\n{\\n  \\\"principio\\\": \\\"Genes autorregulados (feedback loops)\\\",\\n  \\\"descripcion\\\": \\\"Un gen puede afectar su propia expresión futura, o la de otros. Ejemplo: enhancer.py mejora el texto → validator.py detecta mejora → el sistema decide no omitirlo. Si validator ve una mejora menor, puede sugerir una segunda pasada por enhancer. Esto permite sistemas resilientes, adaptativos y con capacidad de corrección automática.\\\"\\n}\\n{\\n  \\\"principio\\\": \\\"Robustez a la decoherencia (errores)\\\",\\n  \\\"descripcion\\\": \\\"El sistema está diseñado para tolerar errores parciales: si una página falla, el gen sigue procesando las otras. Usa logs trazables para saber qué función se expresó y con qué efecto. Aplica fallbacks activos: si falla Poppler, entra fitz; si no hay texto, entra OCR.\\\"\\n}\\n{\\n  \\\"principio\\\": \\\"Diseño orientado por información\\\",\\n  \\\"descripcion\\\": \\\"Utiliza principios de física de la información: reducir entropía textual, maximizar densidad semántica y facilitar reversibilidad informacional (logs = trazabilidad completa).\\\"\\n}\\n{\\n  \\\"principio\\\": \\\"Visualización heurística\\\",\\n  \\\"flujo\\\": [\\n    \\\"[PDF escaneado]\\\",\\n    \\\"↓\\\",\\n    \\\"necesita_ocr() → True\\\",\\n    \\\"↓\\\",\\n    \\\"ocr_completo()\\\",\\n    \\\"↓\\\",\\n    \\\"enhancer.py ↻ feedback\\\",\\n    \\\"↓\\\",\\n    \\\"validator.py\\\",\\n    \\\"↓\\\",\\n    \\\"Exportar o descartar\\\"\\n  ]\\n}\\n{\\n  \\\"beneficios\\\": [\\n    {\\n      \\\"ventaja\\\": \\\"🧠 Inteligencia distribuida\\\",\\n      \\\"descripcion\\\": \\\"Cada gen decide cuándo actuar\\\"\\n    },\\n    {\\n      \\\"ventaja\\\": \\\"🧩 Modularidad real\\\",\\n      \\\"descripcion\\\": \\\"Genes independientes, pero conectados\\\"\\n    },\\n    {\\n      \\\"ventaja\\\": \\\"🔁 Reusabilidad dinámica\\\",\\n      \\\"descripcion\\\": \\\"Los mismos genes sirven en flujos distintos\\\"\\n    },\\n    {\\n      \\\"ventaja\\\": \\\"📈 Observabilidad total\\\",\\n      \\\"descripcion\\\": \\\"Logs, stats, y expresión observable\\\"\\n    },\\n    {\\n      \\\"ventaja\\\": \\\"🦾 Resiliencia semántica\\\",\\n      \\\"descripcion\\\": \\\"No se rompe por errores, se adapta\\\"\\n    }\\n  ]\\n}\\n\",\"type\":\"application/json\",\"title\":\"🗂 Epigenética Computacional\",\"modified\":\"20250531041959119\",\"tags\":\"[[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[🗂 Epigenética Computacional]]\",\"tmap.id\":\"1b6a1e0c-b6eb-4a7b-a207-dfde0737d7cc\",\"color\":\"#db5f00\"},{\"created\":\"20250417134249385\",\"text\":\"{\\n  \\\"title\\\": \\\"🗂 Estructura de commits\\\",\\n  \\\"id\\\": \\\"🗂 Estructura de commits\\\",\\n  \\\"tags\\\": [\\n    \\\"--- Codigo\\\",\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"🗂 Estructura de commits\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"Formato de commit semántico\\\",\\n      \\\"Trazabilidad helicoidal\\\",\\n      \\\"Genotipo de mutaciones\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🗂 Epigenética Computacional\\\",\\n      \\\"🎯 9. Plan de desarrollo\\\",\\n      \\\"🎯🧬 0.2 Impacto\\\",\\n      \\\"⚙️🛠 scripts_\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"🗂 Diseño\\\",\\n      \\\"🗂 Calidad del Código\\\",\\n      \\\"🗂 Modularidad y Estado\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"--- Codigo\\\",\\n      \\\"--- 🗂 Principios de programación\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler define la estrategia genética-helicoidal de commits: cada commit es una expresión funcional con trazabilidad semántica. El formato permite auditar cambios por vuelta, componente, madurez y deriva.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🗂 Estructura de commits\\\\n\\\\n### Sintaxis:\\\\n`feat(D): nueva función ocr_completo() - (V2.R2.C1 / gen=ocr, b=1, ∆r=+1, ∆c=+0.5)`\\\\n\\\\n### Campos:\\\\n- `tipo` → feat, fix, refac, test\\\\n- `estado` → (p) progreso, (D) done\\\\n- `gen` → módulo activo\\\\n- `Vx.Ry.Cz` → vuelta, amplitud, madurez\\\\n- `∆r`, `∆c` → derivadas semánticas\\\\n\\\\n### Define:\\\\n- Formato de commit semántico\\\\n- Trazabilidad helicoidal\\\\n- Genotipo de mutaciones\\\\n\\\\n### Usa:\\\\n- 🗂 Epigenética Computacional\\\\n- 🎯 9. Plan de desarrollo\\\\n- 🎯🧬 0.2 Impacto\\\\n- ⚙️🛠 scripts_\\\\n\\\\n### Parte de:\\\\n- --- Codigo\\\\n- --- 🗂 Principios de programación\\\\n\\\\n---\\\\n> Esta estrategia convierte git en un lenguaje vivo: cada push es una mutación rastreable, cada test una verificación del ADN, cada ciclo una vuelta evolutiva observable.\\\"\\n}\\n{\\n  \\\"titulo\\\": \\\"🌀 Estrategia de Commits – OpenPages Pipeline (Modelo Genético-Helicoidal)\\\",\\n  \\\"descripcion\\\": \\\"Cada commit representa una expresión genética funcional del sistema. Esta guía asegura que cada cambio pueda ser rastreado semánticamente en el tiempo, auditado, y visualizado en dashboards helicoidales.\\\"\\n}\\n{\\n  \\\"estructura_commit\\\": \\\"[tipo](estado): descripción breve - (Vx.Ry.Cz / gen=nombre, b=#, ∆r=±n, ∆c=±n)\\\",\\n  \\\"campos\\\": [\\n    {\\n      \\\"campo\\\": \\\"[tipo]\\\",\\n      \\\"descripcion\\\": \\\"Tipo de cambio (`feat`, `fix`, `refac`, `test`)\\\",\\n      \\\"ejemplo\\\": \\\"feat\\\"\\n    },\\n    {\\n      \\\"campo\\\": \\\"(estado)\\\",\\n      \\\"descripcion\\\": \\\"Estado del cambio: `(p)` progreso, `(D)` done\\\",\\n      \\\"ejemplo\\\": \\\"(D)\\\"\\n    },\\n    {\\n      \\\"campo\\\": \\\"descripción\\\",\\n      \\\"descripcion\\\": \\\"Acción concreta y concisa\\\",\\n      \\\"ejemplo\\\": \\\"función `ocr_completo()`\\\"\\n    },\\n    {\\n      \\\"campo\\\": \\\"Vx\\\",\\n      \\\"descripcion\\\": \\\"Vuelta helicoidal (ciclo de madurez)\\\",\\n      \\\"ejemplo\\\": \\\"V2\\\"\\n    },\\n    {\\n      \\\"campo\\\": \\\"Ry\\\",\\n      \\\"descripcion\\\": \\\"Amplitud del cambio (cuántos módulos se tocaron)\\\",\\n      \\\"ejemplo\\\": \\\"R2\\\"\\n    },\\n    {\\n      \\\"campo\\\": \\\"Cz\\\",\\n      \\\"descripcion\\\": \\\"Nivel de madurez del sistema alcanzado\\\",\\n      \\\"ejemplo\\\": \\\"C1\\\"\\n    },\\n    {\\n      \\\"campo\\\": \\\"gen\\\",\\n      \\\"descripcion\\\": \\\"Gen activo o módulo afectado (sin `.py`)\\\",\\n      \\\"ejemplo\\\": \\\"ocr\\\"\\n    },\\n    {\\n      \\\"campo\\\": \\\"b\\\",\\n      \\\"descripcion\\\": \\\"Bloque o función específica\\\",\\n      \\\"ejemplo\\\": \\\"b=1\\\"\\n    },\\n    {\\n      \\\"campo\\\": \\\"∆r, ∆c\\\",\\n      \\\"descripcion\\\": \\\"Derivadas opcionales: amplitud y madurez incremental\\\",\\n      \\\"ejemplo\\\": \\\"∆r=+1, ∆c=+0.5\\\"\\n    }\\n  ]\\n}\\n{\\n  \\\"ejemplo_completo\\\": \\\"feat(D): función ocr_completo() – primera expresión OCR - (V2.R2.C1 / gen=ocr, b=1, ∆r=+1, ∆c=+0.5)\\\"\\n}\\n{\\n  \\\"sintaxis_minima\\\": \\\"feat(D): nueva función ocr_completo() - (V2.R2.C1 / gen=ocr, b=1)\\\",\\n  \\\"nota\\\": \\\"Las derivadas pueden calcularse automáticamente por un script externo.\\\"\\n}\\n{\\n  \\\"ventajas\\\": [\\n    {\\n      \\\"beneficio\\\": \\\"📈 Trazabilidad helicoidal\\\",\\n      \\\"descripcion\\\": \\\"Agrupación por vuelta (Vx), gen, bloque\\\"\\n    },\\n    {\\n      \\\"beneficio\\\": \\\"🧬 Contexto semántico por commit\\\",\\n      \\\"descripcion\\\": \\\"Cada acción se contextualiza como una mutación o expresión genética\\\"\\n    },\\n    {\\n      \\\"beneficio\\\": \\\"🔁 Automatización con scripts\\\",\\n      \\\"descripcion\\\": \\\"Permite exportar a `.jsonl` y `.tid` para dashboards y TiddlyWiki\\\"\\n    },\\n    {\\n      \\\"beneficio\\\": \\\"📦 Dashboards evolutivos posibles\\\",\\n      \\\"descripcion\\\": \\\"Podés graficar ∂c/∂t, evolución por gen, amplitud por vuelta, etc.\\\"\\n    }\\n  ]\\n}\\n{\\n  \\\"recordatorio\\\": [\\n    \\\"Cada commit es una transcripción genética.\\\",\\n    \\\"Cada refactor, una mutación.\\\",\\n    \\\"Cada test, una verificación funcional.\\\"\\n  ],\\n  \\\"final\\\": \\\"Este modelo no solo organiza el código, lo vuelve inteligible para IA y humanos por igual.\\\"\\n}\\n\",\"type\":\"application/json\",\"title\":\"🗂 Estructura de commits\",\"modified\":\"20250531042054929\",\"tags\":\"[[--- 🗂 Principios de programación]] [[--- 🎯 Detalles del proyecto]] [[🗂 Estructura de commits]] [[--- Codigo]]\",\"color\":\"#db5f00\",\"tmap.id\":\"bf7ef23c-b5b2-4035-8622-71c1635ce7e0\"},{\"created\":\"20250423003522758\",\"text\":\"{\\n  \\\"title\\\": \\\"🗂 Evolución Semántica\\\",\\n  \\\"id\\\": \\\"🗂 Evolución Semántica\\\",\\n  \\\"tags\\\": [\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"🗂 Evolución Semántica\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"🧬 Modelo de las Hélices de Desarrollo\\\",\\n      \\\"Equivalencias Genéticas\\\",\\n      \\\"Trazabilidad Semántica\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🗂 Epigenética Computacional\\\",\\n      \\\"🗂 Estructura de commits\\\",\\n      \\\"🎯 9. Plan de desarrollo\\\",\\n      \\\"🎯🧬 0.2 Impacto\\\",\\n      \\\"🎯🧬 0.3 Post-Impacto\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"🗂 Diseño\\\",\\n      \\\"🗂 Modularidad y Estado\\\",\\n      \\\"🗂 Calidad del Código\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"--- 🗂 Principios de programación\\\",\\n      \\\"--- 🎯 Detalles del proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler formaliza el sistema como una hélice genética-semántica: cada módulo es un gen, cada commit una mutación, cada vuelta una maduración. No se construyen versiones, se codifican sistemas vivos que mutan, aprenden y escalan.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🗂 Evolución Semántica\\\\n\\\\n### Principios:\\\\n- Cada módulo es un gen funcional\\\\n- Cada commit es una mutación\\\\n- Cada vuelta helicoidal es una expresión de madurez\\\\n- La trazabilidad es semántica y matemática\\\\n\\\\n### Expresión vectorial:\\\\n- r(t) = [r·cos(t), r·sin(t), c·t]\\\\n- r'(t) = [-r·sin(t), r·cos(t), c]\\\\n\\\\n### Define:\\\\n- 🧬 Modelo de las Hélices de Desarrollo\\\\n- Equivalencias Genéticas\\\\n- Trazabilidad Semántica\\\\n\\\\n### Usa:\\\\n- 🗂 Epigenética Computacional\\\\n- 🗂 Estructura de commits\\\\n- 🎯 9. Plan de desarrollo\\\\n- 🎯🧬 0.2 Impacto\\\\n- 🎯🧬 0.3 Post-Impacto\\\\n\\\\n### Parte de:\\\\n- --- 🗂 Principios de programación\\\\n- --- 🎯 Detalles del proyecto\\\\n\\\\n---\\\\n> Aquí no se escriben versiones. Se cultivan helices vivas. Cada commit, cada test, cada refactor es una mutación trazable de un organismo técnico en evolución constante.\\\"\\n}\\n{\\n  \\\"titulo\\\": \\\"🧬 Modelo de las Hélices de Desarrollo\\\",\\n  \\\"subtitulo\\\": \\\"OpenPages Pipeline como un sistema genético-semántico en espiral\\\"\\n}\\n{\\n  \\\"seccion\\\": \\\"📘 Introducción\\\",\\n  \\\"contenido\\\": [\\n    \\\"Este manifiesto define el marco conceptual y matemático del desarrollo de OpenPages Pipeline a través de hélices de desarrollo, una visión inspirada en la biología molecular, el cálculo diferencial y los sistemas de IA evolutivos.\\\",\\n    \\\"Aquí no construimos versiones, construimos vueltas de madurez.\\\",\\n    \\\"No diseñamos código lineal, sino cadenas funcionales que se reescriben con mayor profundidad en cada iteración.\\\",\\n    \\\"OpenPages Pipeline no crece por bloques: gira, muta, aprende y escala.\\\"\\n  ]\\n}\\n{\\n  \\\"seccion\\\": \\\"🧭 Principios Fundamentales\\\",\\n  \\\"principios\\\": [\\n    \\\"Cada módulo funcional del sistema es un gen: Define un comportamiento estable, reutilizable y esencial.\\\",\\n    \\\"Cada vuelta helicoidal representa una nueva capa de expresión funcional: Más vueltas → más robustez.\\\",\\n    \\\"El sistema se representa como una hélice tridimensional con evolución temporal, estructural y de madurez.\\\",\\n    \\\"El cambio puede ser visible (estructura) o invisible (calidad interna, testing, docs).\\\",\\n    \\\"La IA y el humano deben poder leer esta estructura: cada mutación debe ser navegable y comprensible.\\\"\\n  ],\\n  \\\"expresion_vectorial\\\": {\\n    \\\"r(t)\\\": \\\"[r*cos(t), r*sin(t), c*t]\\\",\\n    \\\"r'(t)\\\": \\\"[-r*sin(t), r*cos(t), c]\\\"\\n  }\\n}\\n{\\n  \\\"seccion\\\": \\\"🧬 Estructura Genética del Desarrollo\\\",\\n  \\\"tabla_equivalencias\\\": [\\n    {\\\"biologico\\\": \\\"Gen\\\", \\\"openpages\\\": \\\"Módulo funcional (ej. validator.py)\\\"},\\n    {\\\"biologico\\\": \\\"Genoma\\\", \\\"openpages\\\": \\\"Proyecto completo\\\"},\\n    {\\\"biologico\\\": \\\"Expresión génica\\\", \\\"openpages\\\": \\\"Ejecución del módulo (CLI, API, test)\\\"},\\n    {\\\"biologico\\\": \\\"Mutación\\\", \\\"openpages\\\": \\\"Commit/refactor que cambia comportamiento\\\"},\\n    {\\\"biologico\\\": \\\"Epigenética\\\", \\\"openpages\\\": \\\"Configuración externa (config.yaml)\\\"},\\n    {\\\"biologico\\\": \\\"Proteína\\\", \\\"openpages\\\": \\\"Archivo generado (.jsonl, .md, logs…)\\\"},\\n    {\\\"biologico\\\": \\\"Fenotipo\\\", \\\"openpages\\\": \\\"Resultado visible para el usuario final\\\"},\\n    {\\\"biologico\\\": \\\"Vueltas helicoidales\\\", \\\"openpages\\\": \\\"Iteraciones de desarrollo con más madurez\\\"},\\n    {\\\"biologico\\\": \\\"Derivadas c'(t), r'(t)\\\", \\\"openpages\\\": \\\"Tasa de evolución del sistema en funcionalidad y robustez\\\"}\\n  ]\\n}\\n{\\n  \\\"seccion\\\": \\\"🔁 ¿Cómo se aplica esto?\\\",\\n  \\\"aplicacion\\\": [\\n    \\\"Cada gen se documenta con historia de mutaciones, expresiones, condiciones y productos.\\\",\\n    \\\"Cada vuelta representa un momento en que varios genes se activan coordinadamente.\\\",\\n    \\\"La madurez se mide en integración, automatización, abstracción, tests, documentación.\\\"\\n  ]\\n}\\n{\\n  \\\"seccion\\\": \\\"🌐 Implicaciones del Modelo\\\",\\n  \\\"documentacion\\\": [\\n    \\\"Todo módulo debe documentarse como un gen:\\\",\\n    \\\"¿Qué hace? ¿Cuándo se activa? ¿Cómo ha cambiado? ¿Qué produce?\\\"\\n  ],\\n  \\\"analisis\\\": [\\n    \\\"Se pueden calcular tasas de madurez y cambio por módulo.\\\",\\n    \\\"Se puede visualizar como un conjunto de hélices sincronizadas.\\\"\\n  ],\\n  \\\"ia\\\": [\\n    \\\"La IA puede entender cómo y por qué cambió el sistema.\\\",\\n    \\\"Puede anticipar errores, identificar puntos críticos, sugerir mejoras.\\\"\\n  ]\\n}\\n{\\n  \\\"seccion\\\": \\\"📘 Conclusión\\\",\\n  \\\"frases\\\": [\\n    \\\"OpenPages Pipeline no es solo un proyecto técnico, sino un organismo semántico en evolución constante.\\\",\\n    \\\"Cada commit es una mutación, cada vuelta una etapa de expresión, cada archivo una proteína de conocimiento útil.\\\",\\n    \\\"No construimos versiones. Codificamos hélices vivas.\\\"\\n  ]\\n}\\n\",\"title\":\"🗂 Evolución Semántica\",\"modified\":\"20250531042144916\",\"type\":\"application/json\",\"tmap.id\":\"21bf1538-2546-4a2d-a53b-1c27b8b83f94\",\"color\":\"#db5f00\",\"tags\":\"[[--- 🗂 Principios de programación]] [[🗂 Evolución Semántica]] [[--- 🎯 Detalles del proyecto]]\"},{\"created\":\"20250417134313258\",\"text\":\"{\\n  \\\"title\\\": \\\"🗂 Modularidad y Estado\\\",\\n  \\\"id\\\": \\\"🗂 Modularidad y Estado\\\",\\n  \\\"tags\\\": [\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"🗂 Modularidad y Estado\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"Separación de Intereses (SoC)\\\",\\n      \\\"Minimizar Estado Global\\\",\\n      \\\"Inmutabilidad Siempre que Sea Posible\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🗂 Calidad del Código\\\",\\n      \\\"🗂 Diseño\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"KISS\\\",\\n      \\\"SRP\\\",\\n      \\\"Encapsulación\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"--- 🗂 Principios de programación\\\",\\n      \\\"--- 🎯 Detalles del proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler define los principios que aseguran un sistema modular, testeable y sin efectos colaterales impredecibles. SoC, control del estado global e inmutabilidad cooperan para construir componentes claros y desacoplados.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🗂 Modularidad y Estado\\\\n\\\\n### Principios:\\\\n- **Separación de Intereses (SoC)**: un módulo, una responsabilidad\\\\n- **Minimizar Estado Global**: más independencia, menos errores\\\\n- **Inmutabilidad Siempre que Sea Posible**: menos efectos colaterales\\\\n\\\\n### Relaciones internas:\\\\n- SoC ↔ SRP\\\\n- Estado Global ↔ Inmutabilidad\\\\n- SoC + Inmutabilidad → Testeabilidad\\\\n\\\\n### Usa:\\\\n- 🗂 Calidad del Código\\\\n- 🗂 Diseño\\\\n\\\\n### Requiere:\\\\n- KISS\\\\n- SRP\\\\n- Encapsulación\\\\n\\\\n### Parte de:\\\\n- --- 🗂 Principios de programación\\\\n- --- 🎯 Detalles del proyecto\\\\n\\\\n---\\\\n> Un sistema robusto se construye desde la modularidad: cada parte cumple su rol, controla su estado y coopera con las demás sin fricción ni confusión.\\\"\\n}\\n{\\n  \\\"titulo\\\": \\\"🧩 Principios de Modularidad y Estado\\\",\\n  \\\"descripcion\\\": \\\"Aquí se define cómo dividir el sistema en piezas claras que cooperan de forma predecible y robusta.\\\"\\n}\\n{\\n  \\\"principio\\\": \\\"Separación de Intereses (SoC)\\\",\\n  \\\"categoria\\\": \\\"🧠\\\",\\n  \\\"detalle\\\": \\\"Cada módulo o componente debe abordar una sola responsabilidad. Favorece el Single Responsibility Principle (SRP) y mejora la claridad, mantenibilidad y testeo del sistema.\\\"\\n}\\n{\\n  \\\"principio\\\": \\\"Minimizar el Estado Global\\\",\\n  \\\"categoria\\\": \\\"🧠\\\",\\n  \\\"detalle\\\": \\\"Limita el uso de variables o configuraciones compartidas globalmente. Esto permite que los módulos sean más predecibles, independientes y fáciles de probar.\\\"\\n}\\n{\\n  \\\"principio\\\": \\\"Inmutabilidad Siempre que Sea Posible\\\",\\n  \\\"categoria\\\": \\\"🧠\\\",\\n  \\\"detalle\\\": \\\"Promueve la creación de estructuras de datos que no cambien después de ser creadas, lo que reduce efectos secundarios, errores y facilita la depuración.\\\"\\n}\\n{\\n  \\\"relacion\\\": \\\"Separación de Intereses ↔ SRP (de SOLID)\\\",\\n  \\\"explicacion\\\": \\\"Ambos establecen límites claros de responsabilidad para cada parte del sistema.\\\"\\n}\\n{\\n  \\\"relacion\\\": \\\"Estado Global ↔ Inmutabilidad\\\",\\n  \\\"explicacion\\\": \\\"Minimizar el estado global se vuelve más efectivo cuando los datos son inmutables.\\\"\\n}\\n{\\n  \\\"relacion\\\": \\\"SoC + Inmutabilidad → Código más testeable\\\",\\n  \\\"explicacion\\\": \\\"Ambos principios facilitan la creación de módulos desacoplados y con comportamiento predecible.\\\"\\n}\\n\",\"type\":\"application/json\",\"title\":\"🗂 Modularidad y Estado\",\"modified\":\"20250531042226303\",\"tags\":\"[[--- 🗂 Principios de programación]] [[--- 🎯 Detalles del proyecto]] [[🗂 Modularidad y Estado]]\",\"color\":\"#db5f00\",\"tmap.id\":\"ebb5625d-d730-44ac-bf4c-61e53f3c079a\"},{\"created\":\"20250417134339248\",\"text\":\"{\\n  \\\"title\\\": \\\"🗂 Usabilidad y Robustez\\\",\\n  \\\"id\\\": \\\"🗂 Usabilidad y Robustez\\\",\\n  \\\"tags\\\": [\\n    \\\"--- 🗂 Principios de programación\\\",\\n    \\\"--- 🎯 Detalles del proyecto\\\",\\n    \\\"🗂 Usabilidad y Robustez\\\"\\n  ],\\n  \\\"relations\\\": {\\n    \\\"define\\\": [\\n      \\\"PoLS – Principio del Menor Asombro\\\",\\n      \\\"Convenciones Lingüísticas y de Framework\\\",\\n      \\\"Programación Defensiva\\\"\\n    ],\\n    \\\"usa\\\": [\\n      \\\"🗂 Calidad del Código\\\",\\n      \\\"🗂 Diseño\\\",\\n      \\\"⚙️🧪 tests_\\\"\\n    ],\\n    \\\"requiere\\\": [\\n      \\\"DRY\\\",\\n      \\\"Convención sobre Configuración\\\",\\n      \\\"KISS\\\"\\n    ],\\n    \\\"parte_de\\\": [\\n      \\\"--- 🗂 Principios de programación\\\",\\n      \\\"--- 🎯 Detalles del proyecto\\\"\\n    ]\\n  },\\n  \\\"textPlain\\\": \\\"Este tiddler define principios que mejoran la experiencia humana del sistema: interfaces intuitivas, código legible, errores controlados. Asegura que el sistema se comporte como se espera, incluso ante lo inesperado.\\\",\\n  \\\"textMarkdown\\\": \\\"## 🗂 Usabilidad y Robustez\\\\n\\\\n### Principios:\\\\n- **PoLS** – Principio del Menor Asombro\\\\n- **Convenciones Lingüísticas y de Framework**\\\\n- **Tratamiento de Errores / Programación Defensiva**\\\\n\\\\n### Relaciones internas:\\\\n- PoLS + Convenciones → interfaces intuitivas\\\\n- Convenciones + Legibilidad → mantenibilidad\\\\n- Tratamiento de Errores ↔ TDD\\\\n\\\\n### Usa:\\\\n- 🗂 Calidad del Código\\\\n- 🗂 Diseño\\\\n- ⚙️🧪 tests_\\\\n\\\\n### Requiere:\\\\n- DRY\\\\n- Convención sobre Configuración\\\\n- KISS\\\\n\\\\n### Parte de:\\\\n- --- 🗂 Principios de programación\\\\n- --- 🎯 Detalles del proyecto\\\\n\\\\n---\\\\n> Un sistema usable no solo funciona: se entiende, se predice, y se siente seguro. La robustez nace del respeto por el usuario y la anticipación a lo improbable.\\\"\\n}\\n{\\n  \\\"titulo\\\": \\\"🛡️ Principios de Usabilidad, Robustez y Convecciones\\\",\\n  \\\"descripcion\\\": \\\"Estas prácticas impactan directamente al usuario final y al equipo.\\\"\\n}\\n{\\n  \\\"principio\\\": \\\"Principio del Menor Asombro (PoLS)\\\",\\n  \\\"categoria\\\": \\\"🧠\\\",\\n  \\\"detalle\\\": \\\"El sistema debe comportarse de la forma más intuitiva y predecible posible para el usuario. Evita decisiones inesperadas.\\\"\\n}\\n{\\n  \\\"principio\\\": \\\"Convenciones Lingüísticas / de Framework\\\",\\n  \\\"categoria\\\": \\\"🧠\\\",\\n  \\\"detalle\\\": \\\"Mantener nombres, estilos y patrones consistentes facilita la comprensión, colaboración y reduce errores.\\\"\\n}\\n{\\n  \\\"principio\\\": \\\"Tratamiento de Errores y Programación Defensiva\\\",\\n  \\\"categoria\\\": \\\"🧠\\\",\\n  \\\"detalle\\\": \\\"Validar entradas, manejar excepciones, controlar bordes y documentar comportamientos límite asegura robustez y resiliencia del sistema.\\\"\\n}\\n{\\n  \\\"relacion\\\": \\\"PoLS + Convenciones\\\",\\n  \\\"explicacion\\\": \\\"Las interfaces intuitivas se refuerzan cuando el código sigue un estilo coherente y familiar.\\\"\\n}\\n{\\n  \\\"relacion\\\": \\\"Tratamiento de errores ↔ TDD\\\",\\n  \\\"explicacion\\\": \\\"Las pruebas anticipan y verifican errores; la programación defensiva garantiza que se manejen correctamente.\\\"\\n}\\n{\\n  \\\"relacion\\\": \\\"Convenciones + Legibilidad → Mantenibilidad\\\",\\n  \\\"explicacion\\\": \\\"Códigos predecibles y legibles son más fáciles de mantener en equipo.\\\"\\n}\\n\",\"type\":\"application/json\",\"title\":\"🗂 Usabilidad y Robustez\",\"modified\":\"20250531042304620\",\"tags\":\"[[--- 🗂 Principios de programación]] [[--- 🎯 Detalles del proyecto]] [[🗂 Usabilidad y Robustez]]\",\"color\":\"#db5f00\",\"tmap.id\":\"a65af17f-6a20-419b-b5f9-360d03355131\"}]\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531223113413","modified":"20250531223113413","tmap.id":"ea5c873a-9782-491f-a8c5-09c11eaee59f"},{"title":"-estructura.txt","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```txt\n./\n├── cmd/\n│   └── exporter/\n│       └── main.go\n├── data/\n│   ├── in/\n│   │   └── tiddlers.json\n│   └── out/\n│       └── tiddlers.jsonl\n├── estructura.txt\n├── .git/\n│   ├── branches/\n│   ├── COMMIT_EDITMSG\n│   ├── config\n│   ├── description\n│   ├── FETCH_HEAD\n│   ├── HEAD\n│   ├── hooks/\n│   │   ├── applypatch-msg.sample*\n│   │   ├── commit-msg.sample*\n│   │   ├── fsmonitor-watchman.sample*\n│   │   ├── post-update.sample*\n│   │   ├── pre-applypatch.sample*\n│   │   ├── pre-commit.sample*\n│   │   ├── pre-merge-commit.sample*\n│   │   ├── prepare-commit-msg.sample*\n│   │   ├── pre-push.sample*\n│   │   ├── pre-rebase.sample*\n│   │   ├── pre-receive.sample*\n│   │   ├── push-to-checkout.sample*\n│   │   └── update.sample*\n│   ├── index\n│   ├── info/\n│   │   └── exclude\n│   ├── logs/\n│   │   ├── HEAD\n│   │   └── refs/\n│   │       ├── heads/\n│   │       │   ├── exportador-jsonl\n│   │       │   └── main\n│   │       └── remotes/\n│   │           └── origin/\n│   │               ├── exportador-jsonl\n│   │               └── HEAD\n│   ├── objects/\n│   │   ├── 00/\n│   │   │   └── 99ae1cac62b1a31cd72054593e6ccca9c829ad\n│   │   ├── 03/\n│   │   │   └── 511b1bae33ac99e8428707d19c791d39cc3c56\n│   │   ├── 0b/\n│   │   │   └── de84334cbb58e399efac5e53cdc83efec129ae\n│   │   ├── 0c/\n│   │   │   └── a0e8fb8f860693eae74ff242443a1834deafb9\n│   │   ├── 0d/\n│   │   │   ├── 818c611a42ba5e243cede460d377fe63020ac6\n│   │   │   └── e0e9a4872ed1c5c7cb8ce336f13c895dbbae46\n│   │   ├── 0f/\n│   │   │   └── d1093eeb01a72c912565f3aad999ad79070ad2\n│   │   ├── 1a/\n│   │   │   └── fd96b879922dfd02f4c2648f4cd4022b250c36\n│   │   ├── 1b/\n│   │   │   └── 28b760548730a7de89bae0e1661adde1f4b762\n│   │   ├── 1e/\n│   │   │   ├── ab29e35a3f3a216334bf97b30f8ede77c83aa0\n│   │   │   └── c3e58281b32746e45aeda9010a29107de215a4\n│   │   ├── 22/\n│   │   │   ├── 2d3b2ab6290e7f65e36d24cfd2d50ac32e8341\n│   │   │   └── 8809abd948846248ed23ee962f9625e68057e7\n│   │   ├── 23/\n│   │   │   └── 4899899e4e4d9fba75188d02f38f4e8ccea17f\n│   │   ├── 2a/\n│   │   │   └── e4cf258b335830fb058819762e043c4b0c1cec\n│   │   ├── 37/\n│   │   │   └── 5ba5956b3cc9a0ee617b5fb2f54ac572da359c\n│   │   ├── 38/\n│   │   │   └── 9fb3ccb56ab0da4a46fbe2f810feecdf542021\n│   │   ├── 3a/\n│   │   │   └── 52bb308c1508b592150b6582f7ef49afd21fe4\n│   │   ├── 3b/\n│   │   │   └── 100e6efb70a2a870666e841db33cc95e81f198\n│   │   ├── 3f/\n│   │   │   └── a7922fc981b91cff134a1f6c1cd1f55be16ab0\n│   │   ├── 43/\n│   │   │   ├── 2665e36f80af52d6bbfd72237639a4c26b63a2\n│   │   │   └── a8f09172b6a16bc6819dd6ce86b78a46ddf7cf\n│   │   ├── 45/\n│   │   │   └── 123035c05cc4cd2b9ca0660d05fd0e2ec1af8e\n│   │   ├── 47/\n│   │   │   └── b76353ae878496539e7953e51eec14f7db5d5d\n│   │   ├── 4e/\n│   │   │   └── f66a8b0329a21b5a0c9f4cb3e595bea9b17622\n│   │   ├── 4f/\n│   │   │   └── 0d21324a72aabfec7190f527a286e95306b8d6\n│   │   ├── 50/\n│   │   │   └── 6b9f3fee4a946bccf4cabcd76378bdb9e0f9c5\n│   │   ├── 55/\n│   │   │   └── 7fa613f67c4eba7a2cab849747f3207bf821ed\n│   │   ├── 56/\n│   │   │   └── f35e0bf4aba396c3fcaa08d521746a03677a88\n│   │   ├── 57/\n│   │   │   └── dbebeb510dcf2cdd4c8a459b4a7f09e7f3bc5c\n│   │   ├── 5a/\n│   │   │   └── 2c4069b2aca04419736d01c67614a2cddcace5\n│   │   ├── 5c/\n│   │   │   └── b7a354612661344c2418de6c55d6b50edbe05e\n│   │   ├── 5d/\n│   │   │   └── 3fa1cd9f2be35be992af58c3879ce133a11c63\n│   │   ├── 67/\n│   │   │   └── 25e2d27babfe87f4af7ea2d5d2dcbea034037c\n│   │   ├── 68/\n│   │   │   └── bede99c3fe6ca8f83ff070a8a62412e27b9fb8\n│   │   ├── 6e/\n│   │   │   └── 2ded1cba9918571263d3f091bc3fb065e8d72b\n│   │   ├── 76/\n│   │   │   └── ff646f2b23281110c38c96b5f072648193c633\n│   │   ├── 7c/\n│   │   │   └── ee5dabbb351c1bfc4afc65d6effa9d1911c847\n│   │   ├── 7d/\n│   │   │   └── 592665f7d4c5c095ce6f7d555da465e5d0cc18\n│   │   ├── 7e/\n│   │   │   └── 5ada1c37d75198eb45c522ff6e1b84435f96be\n│   │   ├── 84/\n│   │   │   └── 5df97c835fcdfc40e030ac43dc6bfa2d658574\n│   │   ├── 87/\n│   │   │   └── d7f62628c9a8afb1e57f68add6143cf97a0062\n│   │   ├── 98/\n│   │   │   └── 811aea6011c83607b675f369fac4154f7f5c58\n│   │   ├── ab/\n│   │   │   └── d782b279a31c484fabfa7e56a10f0cd2f24288\n│   │   ├── ad/\n│   │   │   └── d145167fbe48891ec0d54bc2d2c12b61507098\n│   │   ├── b0/\n│   │   │   └── 2d31c4b3cec4d0cde183e5f009300785a32a84\n│   │   ├── b6/\n│   │   │   └── 6d2d1d41c679d75d1d9eea236d2d1c86303e24\n│   │   ├── c9/\n│   │   │   ├── 22e453c86654210e06a4a25d2e3b502b1ae921\n│   │   │   └── f54fd5fdbb4037b61b576cced9c37bbcd2eb50\n│   │   ├── cb/\n│   │   │   └── e5d3507c28793a8026ecea741a8e5e4ead80ec\n│   │   ├── d0/\n│   │   │   └── 22e27f0756b7a4ad193cf1a6bb11653d3949d9\n│   │   ├── d4/\n│   │   │   └── d435367dc6b6475a4e69dc07de0d3365cb9f64\n│   │   ├── d6/\n│   │   │   └── b11e50cee2522f462cf2515264451f690be6f0\n│   │   ├── d7/\n│   │   │   └── 18ad7a957475f041e48cda3e62feb6e910a179\n│   │   ├── d8/\n│   │   │   └── 91a713ad5d99c78ac4f9c86a067979adbaee04\n│   │   ├── d9/\n│   │   │   ├── a04a35b2716cb041b5439e98d2beaf07804ada\n│   │   │   └── dc64c7a42e51c63bbf9a917d7cceb72959e5d2\n│   │   ├── df/\n│   │   │   └── 7e4f01829908d47412d4de8b18aa281600d335\n│   │   ├── e5/\n│   │   │   └── 7017ac9e54bc659a29525e0f0162ef58d87a81\n│   │   ├── e7/\n│   │   │   └── f528f1290c0d22407bcf80f326d76c7a5a81ce\n│   │   ├── e9/\n│   │   │   ├── c9f58ae6e1a1e8f277d4c0c17c7eaff35b4aca\n│   │   │   └── d1a330e09b6e3292930f2cf948a52c5b092096\n│   │   ├── fa/\n│   │   │   └── 545790b52dab0478f9e2959f70ec7f8a829715\n│   │   ├── ff/\n│   │   │   └── 3818debacafc169f17612e8ad7ff92486e6fcc\n│   │   ├── info/\n│   │   └── pack/\n│   │       ├── pack-e5caf1a40852a20ac9035cd572d674fbffcfab39.idx\n│   │       └── pack-e5caf1a40852a20ac9035cd572d674fbffcfab39.pack\n│   ├── ORIG_HEAD\n│   ├── packed-refs\n│   └── refs/\n│       ├── heads/\n│       │   ├── exportador-jsonl\n│       │   └── main\n│       ├── remotes/\n│       │   └── origin/\n│       │       ├── exportador-jsonl\n│       │       └── HEAD\n│       └── tags/\n├── .github/\n│   ├── dependabot.yml\n│   └── workflows/\n│       └── go-test.yml\n├── .gitignore\n├── go.mod\n├── internal/\n│   ├── dedup/\n│   │   ├── dedup.go\n│   │   ├── dedup_test.go\n│   │   ├── filestore.go\n│   │   └── memstore.go\n│   ├── exporter/\n│   │   ├── writer.go\n│   │   └── writer_test.go\n│   ├── importer/\n│   │   ├── reader.go\n│   │   └── reader_test.go\n│   └── transform/\n│       ├── converter.go\n│       └── converter_test.go\n├── LICENSE\n├── models/\n│   ├── record.go\n│   └── tiddler.go\n├── README.md\n├── rep-export-LINUX/\n│   ├── generate_structure.py\n│   ├── .hashes.json\n│   ├── __pycache__/\n│   │   └── tag_mapper.cpython-311.pyc\n│   ├── tag_mapper.py\n│   ├── tiddler_exporter.py\n│   ├── tiddlers-export/\n│   │   ├── -data_in_tiddlers.json.json\n│   │   ├── -estructura.txt.json\n│   │   ├── -.github_dependabot.yml.json\n│   │   ├── -.github_workflows_go-test.yml.json\n│   │   ├── -.gitignore.json\n│   │   ├── -README.md.json\n│   │   ├── -rep-export-LINUX_generate_structure.py.json\n│   │   ├── -rep-export-LINUX_.hashes.json.json\n│   │   ├── -rep-export-LINUX_tag_mapper.py.json\n│   │   ├── -rep-export-LINUX_tiddler_exporter.py.json\n│   │   └── -SECURITY.md.json\n│   └── tiddler_tag_doc/\n└── SECURITY.md\n\n92 directories, 136 files\n\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531224148695","modified":"20250531224148695","tmap.id":"7f76de9c-45a4-4e6c-b02d-ac05c2541c7f"},{"title":"-internal_dedup_dedup_test.go","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```go\npackage dedup\n\nimport (\n\t\"os\"\n\t\"testing\"\n)\n\nfunc TestMemStore(t *testing.T) {\n\ts := NewMemStore()\n\tif s.Seen(\"x\") {\n\t\tt.Fatalf(\"hash inesperado\")\n\t}\n\tif err := s.Mark(\"x\"); err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif !s.Seen(\"x\") {\n\t\tt.Fatalf(\"hash debería existir\")\n\t}\n}\n\nfunc TestFileStore(t *testing.T) {\n\ttmp, err := os.CreateTemp(\"\", \"hashes-*.txt\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tpath := tmp.Name()\n\ttmp.Close()\n\tdefer os.Remove(path)\n\n\ts, err := NewFileStore(path)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif s.Seen(\"a\") {\n\t\tt.Fatalf(\"hash inesperado\")\n\t}\n\tif err := s.Mark(\"a\"); err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif !s.Seen(\"a\") {\n\t\tt.Fatalf(\"hash debería existir tras Mark\")\n\t}\n\ts.Close()\n\n\t// Reabrir y asegurar que persiste\n\ts2, err := NewFileStore(path)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif !s2.Seen(\"a\") {\n\t\tt.Fatalf(\"hash debería persistir en disco\")\n\t}\n\ts2.Close()\n}\n\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531224148700","modified":"20250531224148700","tmap.id":"751cb124-25a7-496a-9a7b-66c3e6a5d0e1"},{"title":"-internal_dedup_dedup.go","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```go\npackage dedup\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/hex\"\n\n\t\"github.com/diegoabeltran16/OpenPages-Source/models\"\n)\n\n// Store representa un backend de deduplicación.\n//   - Seen(hash)  → true  si el hash ya existía.\n//   - Mark(hash)  → persiste el hash (cuando es nuevo).\n//   - Close()     → libera recursos (flush, close, etc.).\ntype Store interface {\n\tSeen(hash string) bool\n\tMark(hash string) error\n\tClose() error\n}\n\n// HashTiddler genera un SHA-256 estable a partir de campos que\n// identifican de manera única la versión de un tiddler.\n// Cambios en Title, Modified o Text ⇒ nuevo hash.\nfunc HashTiddler(t models.Tiddler) string {\n\th := sha256.New()\n\th.Write([]byte(t.Title))\n\th.Write([]byte{0})\n\th.Write([]byte(t.Modified))\n\th.Write([]byte{0})\n\th.Write([]byte(t.Text))\n\treturn hex.EncodeToString(h.Sum(nil))\n}\n\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531224148700","modified":"20250531224148700","tmap.id":"cfeed033-b8ee-48de-a4f0-71a3bcfe2f7b"},{"title":"-internal_dedup_filestore.go","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```go\npackage dedup\n\nimport (\n\t\"bufio\"\n\t\"os\"\n\t\"sync\"\n)\n\n// FileStore mantiene los hashes en un archivo append-only.\n// Formato: un hash (hex) por línea.\ntype FileStore struct {\n\tmu     sync.RWMutex\n\tset    map[string]struct{}\n\tfile   *os.File\n\twriter *bufio.Writer\n}\n\n// NewFileStore abre (o crea) el archivo y carga los hashes existentes.\nfunc NewFileStore(path string) (*FileStore, error) {\n\tf, err := os.OpenFile(path, os.O_CREATE|os.O_RDWR, 0o600)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfs := &FileStore{\n\t\tset:    make(map[string]struct{}),\n\t\tfile:   f,\n\t\twriter: bufio.NewWriter(f),\n\t}\n\n\t// Cargar hashes previos\n\tscanner := bufio.NewScanner(f)\n\tfor scanner.Scan() {\n\t\tfs.set[scanner.Text()] = struct{}{}\n\t}\n\t// Reposicionar al final para append\n\tif _, err := f.Seek(0, os.SEEK_END); err != nil {\n\t\tf.Close()\n\t\treturn nil, err\n\t}\n\treturn fs, scanner.Err()\n}\n\nfunc (fs *FileStore) Seen(h string) bool {\n\tfs.mu.RLock()\n\t_, ok := fs.set[h]\n\tfs.mu.RUnlock()\n\treturn ok\n}\n\nfunc (fs *FileStore) Mark(h string) error {\n\tfs.mu.Lock()\n\tif _, exists := fs.set[h]; !exists {\n\t\tif _, err := fs.writer.WriteString(h + \"\\n\"); err != nil {\n\t\t\tfs.mu.Unlock()\n\t\t\treturn err\n\t\t}\n\t\tfs.set[h] = struct{}{}\n\t}\n\tfs.mu.Unlock()\n\treturn nil\n}\n\nfunc (fs *FileStore) Close() error {\n\tfs.mu.Lock()\n\tdefer fs.mu.Unlock()\n\tif err := fs.writer.Flush(); err != nil {\n\t\tfs.file.Close()\n\t\treturn err\n\t}\n\treturn fs.file.Close()\n}\n\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531224148701","modified":"20250531224148701","tmap.id":"00f485ea-b160-4f28-944b-024477bdf995"},{"title":"-internal_dedup_memstore.go","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```go\npackage dedup\n\nimport \"sync\"\n\n// MemStore mantiene los hashes sólo en RAM (no persiste).\ntype MemStore struct {\n\tmu  sync.RWMutex\n\tset map[string]struct{}\n}\n\n// NewMemStore crea un Store sin persistencia: ideal para tests.\nfunc NewMemStore() *MemStore {\n\treturn &MemStore{set: make(map[string]struct{})}\n}\n\nfunc (m *MemStore) Seen(h string) bool {\n\tm.mu.RLock()\n\t_, ok := m.set[h]\n\tm.mu.RUnlock()\n\treturn ok\n}\n\nfunc (m *MemStore) Mark(h string) error {\n\tm.mu.Lock()\n\tm.set[h] = struct{}{}\n\tm.mu.Unlock()\n\treturn nil\n}\n\nfunc (m *MemStore) Close() error { return nil }\n\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531224148701","modified":"20250531224148701","tmap.id":"6f89a670-f729-4063-a298-714c8bda50ce"},{"title":"-internal_exporter_writer_test.go","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```go\n// internal/exporter/writer_test.go – Tests para exporter.WriteJSONL\n// --------------------------------------------------------------------------------\n// Comprueba dos rutas:\n//   1. Éxito: archivo temporal + 2 records → 2 líneas JSONL idénticas.\n//   2. Falla: ruta imposible debe devolver error.\n// --------------------------------------------------------------------------------\n//\n// --------------------------------------------------------------------------------\n// Verifica que la función revisada (`records any, pretty bool`) maneje:\n//   • Slice v1   → []models.Record.\n//   • Slice v2   → []models.RecordV2.\n//   • Ruta inválida → error.\n// --------------------------------------------------------------------------------\n\npackage exporter\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"os\"\n\t\"reflect\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/diegoabeltran16/OpenPages-Source/models\"\n)\n\n// tmpPath genera un archivo temporal y devuelve la ruta.\nfunc tmpPath(t *testing.T) string {\n\tt.Helper()\n\tf, err := os.CreateTemp(\"\", \"out-*.jsonl\")\n\tif err != nil {\n\t\tt.Fatalf(\"tmpPath: %v\", err)\n\t}\n\tname := f.Name()\n\tf.Close()\n\treturn name\n}\n\n// ----------------------------- caso éxito v1 -----------------------------\nfunc TestWriteJSONL_V1(t *testing.T) {\n\trecs := []models.Record{\n\t\t{ID: \"A\", Tags: []string{\"x\"}, ContentType: \"text/plain\", TextPlain: \"foo\"},\n\t\t{ID: \"B\", Tags: []string{\"y\"}, ContentType: \"text/plain\", TextPlain: \"bar\"},\n\t}\n\tpath := tmpPath(t)\n\tdefer os.Remove(path)\n\n\tif err := WriteJSONL(context.Background(), path, recs, false); err != nil {\n\t\tt.Fatalf(\"WriteJSONL v1 err: %v\", err)\n\t}\n\n\tverifyLines(t, path, recs)\n}\n\n// ----------------------------- caso éxito v2 -----------------------------\nfunc TestWriteJSONL_V2(t *testing.T) {\n\trecs := []models.RecordV2{\n\t\t{ID: \"1\", Type: \"tiddler\", Meta: models.Meta{Title: \"Hello\"}, Content: models.Content{Plain: \"hola\"}},\n\t\t{ID: \"2\", Type: \"tiddler\", Meta: models.Meta{Title: \"World\"}, Content: models.Content{Plain: \"mundo\"}},\n\t}\n\tpath := tmpPath(t)\n\tdefer os.Remove(path)\n\n\tif err := WriteJSONL(context.Background(), path, recs, false); err != nil {\n\t\tt.Fatalf(\"WriteJSONL v2 err: %v\", err)\n\t}\n\n\tverifyLines(t, path, recs)\n}\n\n// ----------------------------- ruta inválida -----------------------------\nfunc TestWriteJSONL_InvalidPath(t *testing.T) {\n\terr := WriteJSONL(context.Background(), \"/no/existe/out.jsonl\", nil, false)\n\tif err == nil {\n\t\tt.Fatalf(\"esperaba error en ruta inválida\")\n\t}\n}\n\n// ----------------------------- helper de verificación --------------------\nfunc verifyLines(t *testing.T, path string, wantSlice any) {\n\tt.Helper()\n\tdata, _ := os.ReadFile(path)\n\tlines := strings.Split(strings.TrimSpace(string(data)), \"\\n\")\n\n\tv := reflect.ValueOf(wantSlice)\n\tif len(lines) != v.Len() {\n\t\tt.Fatalf(\"líneas = %d, want %d\", len(lines), v.Len())\n\t}\n\tfor i, l := range lines {\n\t\tgotPtr := reflect.New(v.Type().Elem()) // *T\n\t\tif err := json.Unmarshal([]byte(l), gotPtr.Interface()); err != nil {\n\t\t\tt.Fatalf(\"unmarshal línea %d: %v\", i, err)\n\t\t}\n\t\tif !reflect.DeepEqual(gotPtr.Elem().Interface(), v.Index(i).Interface()) {\n\t\t\tt.Errorf(\"línea %d mismatch\\n got:  %+v\\n want: %+v\", i, gotPtr.Elem(), v.Index(i))\n\t\t}\n\t}\n}\n\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531224148703","modified":"20250531224148703","tmap.id":"10cfae34-c157-43da-97a8-029f24f5a69b"},{"title":"-internal_exporter_writer.go","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```go\n// internal/exporter/writer.go – Persistencia de records en JSONL\n// --------------------------------------------------------------------------------\n// Contexto pedagógico\n// -------------------\n// Este archivo vive en el paquete **exporter** dentro de `internal/`.  Expone\n// `WriteJSONL`, la pieza final del pipeline (importer → transform → exporter).\n// Su misión es volcar `[]models.Record` al disco usando el formato **JSONL**\n// (una línea JSON compacta por registro).\n//\n// Cambios respecto a la versión monolítica:\n//   • paquete `exporter` (no `main`).\n//   • Firma ahora acepta `context.Context` para futuras cancelaciones.\n//   • Código sigue 100 % determinista: si algo falla, retorna `error`.\n// --------------------------------------------------------------------------------\n//\n// Cambios clave\n//   • Firma: WriteJSONL(ctx, path, records any, pretty bool)\n//   • `records` debe ser un slice (v1 o v2) – se itera vía reflect.\n//   • Flag `pretty` decide entre Marshal y MarshalIndent.\n// --------------------------------------------------------------------------------\n\npackage exporter\n\nimport (\n\t\"bufio\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"os\"\n\t\"reflect\"\n)\n\n// WriteJSONL serializa cualquier slice de structs a JSONL.\n//\n//   - records – debe ser un slice (p. ej. []models.Record o []models.RecordV2)\n//   - pretty  – true → MarshalIndent (legible); false → Marshal (compacto)\nfunc WriteJSONL(ctx context.Context, path string, records any, pretty bool) error {\n\t_ = ctx // reservado para cancelaciones futuras\n\n\tv := reflect.ValueOf(records)\n\tif v.Kind() != reflect.Slice {\n\t\treturn errors.New(\"records debe ser slice\")\n\t}\n\n\tfile, err := os.Create(path)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"crear '%s': %w\", path, err)\n\t}\n\tdefer func() {\n\t\tif cerr := file.Close(); cerr != nil && err == nil {\n\t\t\terr = fmt.Errorf(\"cerrar '%s': %w\", path, cerr)\n\t\t}\n\t}()\n\n\tw := bufio.NewWriter(file)\n\n\tfor i := 0; i < v.Len(); i++ {\n\t\tif ctx.Err() != nil {\n\t\t\treturn ctx.Err()\n\t\t}\n\t\telem := v.Index(i).Interface()\n\n\t\tvar line []byte\n\t\tif pretty {\n\t\t\tline, err = json.MarshalIndent(elem, \"\", \"  \")\n\t\t} else {\n\t\t\tline, err = json.Marshal(elem)\n\t\t}\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"marshal elemento %d: %w\", i, err)\n\t\t}\n\t\tif _, err := w.Write(line); err != nil {\n\t\t\treturn fmt.Errorf(\"escribir elemento %d: %w\", i, err)\n\t\t}\n\t\tif err := w.WriteByte('\\n'); err != nil {\n\t\t\treturn fmt.Errorf(\"newline elemento %d: %w\", i, err)\n\t\t}\n\t}\n\n\tif err := w.Flush(); err != nil {\n\t\treturn fmt.Errorf(\"flush: %w\", err)\n\t}\n\treturn nil\n}\n\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531224148703","modified":"20250531224148703","tmap.id":"6fb29baa-3f0b-49fa-a157-4c7d7a3d6b56"},{"title":"-internal_importer_reader_test.go","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```go\n// reader_test.go – Tests unitarios para ReadTiddlers en reader.go\n// --------------------------------------------------------------------------------\n// Contexto pedagógico\n// -------------------\n// Este archivo acompaña a *reader.go* y demuestra, mediante **pruebas unitarias**\n// escritas con el paquete `testing` estándar de Go, que la función `ReadTiddlers`\n// interpreta correctamente los dos formatos de exportación que genera\n// TiddlyWiki.\n//\n// Cada prueba sigue la estructura *Arrange → Act → Assert* aunque, para mantener\n// la convención idiomática de Go, las secciones no se etiquetan explícitamente.\n//\n// --------------------------------------------------------------------------------\n\npackage importer\n\nimport (\n\t\"context\"\n\t\"os\"\n\t\"reflect\"\n\t\"testing\"\n\n\t\"github.com/diegoabeltran16/OpenPages-Source/models\"\n)\n\n// writeTempFile crea un archivo temporal con el contenido recibido y devuelve\n// su ruta.  Cualquier fallo interrumpe la prueba.\nfunc writeTempFile(t *testing.T, content string) string {\n\tt.Helper()\n\tf, err := os.CreateTemp(\"\", \"tiddlers-*.json\")\n\tif err != nil {\n\t\tt.Fatalf(\"error creando archivo temporal: %v\", err)\n\t}\n\tdefer f.Close()\n\n\tif _, err := f.WriteString(content); err != nil {\n\t\tt.Fatalf(\"error escribiendo archivo temporal: %v\", err)\n\t}\n\treturn f.Name()\n}\n\n// TestRead_Array verifica la ruta feliz cuando el JSON es un array.\nfunc TestRead_Array(t *testing.T) {\n\t// Arrange\n\tjsonData := `[\n      {\"title\":\"Foo\",\"text\":\"txt\",\"type\":\"text/plain\",\"tags\":\"[[a]]\",\"created\":\"20250101\",\"modified\":\"20250102\"}\n    ]`\n\tpath := writeTempFile(t, jsonData)\n\tdefer os.Remove(path)\n\n\twant := []models.Tiddler{{\n\t\tTitle:    \"Foo\",\n\t\tText:     \"txt\",\n\t\tType:     \"text/plain\",\n\t\tTags:     \"[[a]]\",\n\t\tCreated:  \"20250101\",\n\t\tModified: \"20250102\",\n\t}}\n\n\t// Act\n\tgot, err := Read(context.Background(), path)\n\tif err != nil {\n\t\tt.Fatalf(\"Read(array) devolvió error: %v\", err)\n\t}\n\n\t// Assert\n\tif !reflect.DeepEqual(got, want) {\n\t\tt.Errorf(\"Read(array) = %+v, want %+v\", got, want)\n\t}\n}\n\n// TestRead_Map verifica el parseo cuando el JSON es un objeto plano.\nfunc TestRead_Map(t *testing.T) {\n\tjsonData := `{\"Bar\":{\"title\":\"Bar\",\"text\":\"x\",\"type\":\"application/json\",\"tags\":\"[[x]]\",\"created\":\"20250401\",\"modified\":\"20250402\"}}`\n\tpath := writeTempFile(t, jsonData)\n\tdefer os.Remove(path)\n\n\twant := []models.Tiddler{{\n\t\tTitle:    \"Bar\",\n\t\tText:     \"x\",\n\t\tType:     \"application/json\",\n\t\tTags:     \"[[x]]\",\n\t\tCreated:  \"20250401\",\n\t\tModified: \"20250402\",\n\t}}\n\n\tgot, err := Read(context.Background(), path)\n\tif err != nil {\n\t\tt.Fatalf(\"Read(map) devolvió error: %v\", err)\n\t}\n\tif !reflect.DeepEqual(got, want) {\n\t\tt.Errorf(\"Read(map) = %+v, want %+v\", got, want)\n\t}\n}\n\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531224148701","modified":"20250531224148701","tmap.id":"e6f7088a-6638-4f9d-8cb9-3858cb3b2df9"},{"title":"-internal_importer_reader.go","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```go\n// internal/importer/reader.go – Lectura de tiddlers desde JSON exportado de TiddlyWiki\n// ----------------------------------------------------------------------------------------------------\n// Contexto pedagógico\n// -------------------\n// Este archivo vive en el paquete **importer** dentro de `internal/`, por lo que no se puede importar\n// desde fuera del módulo.  Expone la función `Read`, encargada de convertir un export de TiddlyWiki\n// (JSON) en un slice de `models.Tiddler` homogéneo.\n//\n// Firma pública:\n//   Read(ctx context.Context, path string) ([]models.Tiddler, error)\n//\n// · `ctx` permite, en una futura versión streaming, cancelar la operación.\n// · `path` es la ruta del archivo a leer.\n//\n// El algoritmo detecta automáticamente dos formatos de exportación:\n//   1. Array JSON   → `[ {...}, {...} ]`\n//   2. Objeto plano → `{ \"id\": {...}, \"id2\": {...} }`\n// ----------------------------------------------------------------------------------------------------\n\npackage importer\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/diegoabeltran16/OpenPages-Source/models\"\n)\n\n// Read abre y deserializa el archivo indicado en `path`.\n//\n// Valores de retorno\n// ------------------\n//   - []models.Tiddler – tiddlers listos para procesar aguas abajo.\n//   - error            – nil en éxito; descriptivo en caso de fallo.\nfunc Read(ctx context.Context, path string) ([]models.Tiddler, error) {\n\t// Por el momento `ctx` no se usa porque la lectura se hace de un solo golpe.\n\t// Se acepta como parámetro para soportar cancelaciones cuando se implemente\n\t// el modo streaming con json.Decoder.\n\t_ = ctx\n\n\t// ---------------------------------------------------------------------\n\t// 1) Lectura de archivo completo\n\t// ---------------------------------------------------------------------\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"no se pudo leer el archivo '%s': %w\", path, err)\n\t}\n\n\t// ---------------------------------------------------------------------\n\t// 2) Intento: array JSON\n\t// ---------------------------------------------------------------------\n\tvar list []models.Tiddler\n\tif err := json.Unmarshal(data, &list); err == nil {\n\t\tif len(list) == 0 {\n\t\t\tfmt.Println(\"⚠️  Archivo válido, pero el array de tiddlers está vacío.\")\n\t\t}\n\t\treturn list, nil\n\t}\n\n\t// ---------------------------------------------------------------------\n\t// 3) Intento: objeto plano (map)\n\t// ---------------------------------------------------------------------\n\tvar mp map[string]models.Tiddler\n\tif err := json.Unmarshal(data, &mp); err == nil {\n\t\ttiddlers := make([]models.Tiddler, 0, len(mp))\n\t\tfor _, t := range mp {\n\t\t\ttiddlers = append(tiddlers, t)\n\t\t}\n\t\tif len(tiddlers) == 0 {\n\t\t\tfmt.Println(\"⚠️  Archivo válido, pero el mapa de tiddlers está vacío.\")\n\t\t}\n\t\treturn tiddlers, nil\n\t}\n\n\t// ---------------------------------------------------------------------\n\t// 4) Formato desconocido\n\t// ---------------------------------------------------------------------\n\treturn nil, fmt.Errorf(\"error al parsear JSON de tiddlers: no es ni array ni objeto plano válido\")\n}\n\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531224148702","modified":"20250531224148702","tmap.id":"7f086b5a-3b40-457b-8f79-0be5e46090d6"},{"title":"-internal_transform_converter_test.go","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```go\n// internal/transform/converter_test.go – Tests para transform.ConvertTiddlers\n// --------------------------------------------------------------------------------\n// Estas pruebas viven en el **mismo paquete** (`transform`) para acceder al\n// helper no exportado `parseTags`.  Verifican:\n//   1. Extracción correcta de etiquetas.\n//   2. Conversión completa Tiddler → Record con indentado JSON.\n// --------------------------------------------------------------------------------\n\npackage transform\n\nimport (\n\t\"reflect\"\n\t\"testing\"\n\n\t\"github.com/diegoabeltran16/OpenPages-Source/models\"\n)\n\n// write helper innecesario: los datos están embebidos como literales JSON.\n\n// Test_parseTags comprueba la extracción de etiquetas, incluyendo espacios.\nfunc Test_parseTags(t *testing.T) {\n\traw := \"[[tag1]] [[tag 2]] [[tag3]]\"\n\twant := []string{\"tag1\", \"tag 2\", \"tag3\"}\n\n\tgot := parseTags(raw)\n\tif !reflect.DeepEqual(got, want) {\n\t\tt.Errorf(\"parseTags(%q) = %v, want %v\", raw, got, want)\n\t}\n}\n\n// TestConvertTiddlers verifica el flujo integral, incluyendo el pretty-print de JSON embebido.\nfunc TestConvertTiddlers(t *testing.T) {\n\ttiddlers := []models.Tiddler{\n\t\t{\n\t\t\tTitle:    \"Foo\",\n\t\t\tText:     \"plain text\",\n\t\t\tTags:     \"[[a]] [[b]]\",\n\t\t\tCreated:  \"20250101\",\n\t\t\tModified: \"20250102\",\n\t\t\tType:     \"text/plain\",\n\t\t},\n\t\t{\n\t\t\tTitle:    \"Bar\",\n\t\t\tText:     \"{\\\"key\\\":\\\"value\\\"}\",\n\t\t\tTags:     \"[[x]]\",\n\t\t\tCreated:  \"20250103\",\n\t\t\tModified: \"20250104\",\n\t\t\tType:     \"application/json\",\n\t\t},\n\t}\n\n\twant := []models.Record{\n\t\t{\n\t\t\tID:           \"Foo\",\n\t\t\tTags:         []string{\"a\", \"b\"},\n\t\t\tContentType:  \"text/plain\",\n\t\t\tTextMarkdown: \"plain text\",\n\t\t\tTextPlain:    \"plain text\",\n\t\t\tCreatedAt:    \"20250101\",\n\t\t\tModifiedAt:   \"20250102\",\n\t\t},\n\t\t{\n\t\t\tID:           \"Bar\",\n\t\t\tTags:         []string{\"x\"},\n\t\t\tContentType:  \"application/json\",\n\t\t\tTextMarkdown: \"{\\n  \\\"key\\\": \\\"value\\\"\\n}\",\n\t\t\tTextPlain:    \"{\\n  \\\"key\\\": \\\"value\\\"\\n}\",\n\t\t\tCreatedAt:    \"20250103\",\n\t\t\tModifiedAt:   \"20250104\",\n\t\t},\n\t}\n\n\tgot := ConvertTiddlers(tiddlers)\n\tif !reflect.DeepEqual(got, want) {\n\t\tt.Errorf(\"ConvertTiddlers() = %+v, want %+v\", got, want)\n\t}\n}\n\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531224148703","modified":"20250531224148703","tmap.id":"bdaa62e6-eb8f-40d6-bbba-650086521d74"},{"title":"-internal_transform_converter.go","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```go\n// internal/transform/converter.go – v1 + v2\n// --------------------------------------------------------------------------------\n// Este archivo ahora expone **dos** funciones públicas:\n//   • ConvertTiddlers   → genera []models.Record     (esquema heredado).\n//   • ConvertTiddlersV2 → genera []models.RecordV2   (nuevo esquema AI‑friendly).\n// Ambas conviven para permitir que el CLI elija entre `-mode v1` y `-mode v2`.\n// --------------------------------------------------------------------------------\n\npackage transform\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"regexp\"\n\t\"time\"\n\n\t\"github.com/diegoabeltran16/OpenPages-Source/models\"\n)\n\n// -----------------------------------------------------------------------------\n// Utilidades compartidas\n// -----------------------------------------------------------------------------\n\nvar tagRe = regexp.MustCompile(`\\[\\[([^]]+)\\]\\]`)\n\nfunc parseTags(raw string) []string {\n\tmatches := tagRe.FindAllStringSubmatch(raw, -1)\n\ttags := make([]string, 0, len(matches))\n\tfor _, m := range matches {\n\t\tif len(m) > 1 {\n\t\t\ttags = append(tags, m[1])\n\t\t}\n\t}\n\treturn tags\n}\n\n// TiddlyWiki suele usar yyyymmddhhMMSSmmm o yyyymmdd.\nfunc parseTWDate(raw string) (time.Time, bool) {\n\tlayouts := []string{\"20060102150405\", \"20060102\"}\n\tfor _, l := range layouts {\n\t\tif t, err := time.Parse(l, raw); err == nil {\n\t\t\treturn t, true\n\t\t}\n\t}\n\treturn time.Time{}, false\n}\n\n// -----------------------------------------------------------------------------\n// Versión 1 – lógica intacta\n// -----------------------------------------------------------------------------\n\nfunc ConvertTiddlers(ts []models.Tiddler) []models.Record {\n\trecs := make([]models.Record, 0, len(ts))\n\n\tfor _, t := range ts {\n\t\trec := models.Record{\n\t\t\tID:          t.Title,\n\t\t\tTags:        parseTags(t.Tags),\n\t\t\tContentType: t.Type,\n\t\t\tCreatedAt:   t.Created,\n\t\t\tModifiedAt:  t.Modified,\n\t\t}\n\n\t\tif t.Type == \"application/json\" {\n\t\t\tvar buf bytes.Buffer\n\t\t\tif err := json.Indent(&buf, []byte(t.Text), \"\", \"  \"); err == nil {\n\t\t\t\trec.TextMarkdown = buf.String()\n\t\t\t\trec.TextPlain = buf.String()\n\t\t\t} else {\n\t\t\t\trec.TextMarkdown = t.Text\n\t\t\t\trec.TextPlain = t.Text\n\t\t\t}\n\t\t} else {\n\t\t\trec.TextMarkdown = t.Text\n\t\t\trec.TextPlain = t.Text\n\t\t}\n\t\trecs = append(recs, rec)\n\t}\n\treturn recs\n}\n\n// -----------------------------------------------------------------------------\n// Versión 2 – esquema meta/content\n// -----------------------------------------------------------------------------\n\nfunc ConvertTiddlersV2(ts []models.Tiddler) []models.RecordV2 {\n\trecs := make([]models.RecordV2, 0, len(ts))\n\n\tfor _, t := range ts {\n\t\t// Meta\n\t\tcreated, _ := parseTWDate(t.Created)\n\t\tmodified, _ := parseTWDate(t.Modified)\n\n\t\tmeta := models.Meta{\n\t\t\tTitle:    t.Title,\n\t\t\tTags:     parseTags(t.Tags),\n\t\t\tCreated:  created,\n\t\t\tModified: modified,\n\t\t\tColor:    t.Color,\n\t\t\tExtra: map[string]string{\n\t\t\t\t\"tmap.id\": t.TmapID,\n\t\t\t},\n\t\t}\n\n\t\t// Content\n\t\tvar content models.Content\n\t\tswitch t.Type {\n\t\tcase \"application/json\":\n\t\t\tvar obj map[string]any\n\t\t\tif err := json.Unmarshal([]byte(t.Text), &obj); err == nil {\n\t\t\t\tcontent.JSON = obj\n\t\t\t} else {\n\t\t\t\tcontent.Plain = t.Text\n\t\t\t}\n\t\tcase \"text/x-markdown\":\n\t\t\tcontent.Markdown = t.Text\n\t\tdefault: // text/plain y otros\n\t\t\tcontent.Plain = t.Text\n\t\t}\n\n\t\trec := models.RecordV2{\n\t\t\tID:      t.Title,   // se podría slugificar; se deja igual por simplicidad\n\t\t\tType:    \"tiddler\", // valor fijo; futuros conversores pueden clasificar\n\t\t\tMeta:    meta,\n\t\t\tContent: content,\n\t\t\t// Relations pendiente: populate si tu Tiddler trae esa info\n\t\t}\n\t\trecs = append(recs, rec)\n\t}\n\treturn recs\n}\n\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531224148702","modified":"20250531224148702","tmap.id":"dd32ea12-bd5f-43cd-a5dc-e0d5bdbcd70c"},{"title":"-models_record.go","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```go\n// models/record.go – Versiones v1 y v2 de Record\n// --------------------------------------------------------------------------------\n// Contexto pedagógico\n// -------------------\n// Este archivo concentra **ambas** representaciones que usa el pipeline:\n//   • `Record`  (v1) → estructura compacta, utilizada hasta ahora.\n//   • `RecordV2` (v2) → esquema \"AI‑friendly\" con meta ↔ content separados.\n//\n// Mantener los dos modelos en un solo archivo permite evolucionar gradualmente\n// sin romper compatibilidad.  El conversor v1 sigue funcionando tal cual; el\n// conversor v2 emitirá la nueva forma sólo cuando el usuario pase `-mode v2`.\n// --------------------------------------------------------------------------------\n\npackage models\n\nimport \"time\"\n\n// -----------------------------------------------------------------------------\n// VERSIÓN 1 – Compacta (heredada)\n// -----------------------------------------------------------------------------\n// Usada por ConvertTiddlers (v1).  Se conserva para no romper flujos existentes.\n\ntype Record struct {\n\tID           string   `json:\"id\"` // normalmente igual a Title\n\tTags         []string `json:\"tags,omitempty\"`\n\tContentType  string   `json:\"type,omitempty\"`\n\tTextMarkdown string   `json:\"textMarkdown,omitempty\"`\n\tTextPlain    string   `json:\"textPlain,omitempty\"`\n\tCreatedAt    string   `json:\"createdAt,omitempty\"` // formato yyyymmdd… (legacy)\n\tModifiedAt   string   `json:\"modifiedAt,omitempty\"`\n\tColor        string   `json:\"color,omitempty\"`\n}\n\n// -----------------------------------------------------------------------------\n// VERSIÓN 2 – “AI‑friendly” (meta vs content)\n// -----------------------------------------------------------------------------\n// Nuevas estructuras\n\ntype Content struct {\n\tPlain    string         `json:\"plain,omitempty\"`\n\tMarkdown string         `json:\"markdown,omitempty\"`\n\tJSON     map[string]any `json:\"json,omitempty\"`\n\tSections []Section      `json:\"sections,omitempty\"`\n}\n\ntype Section struct {\n\tLevel   int    `json:\"level\"`\n\tHeading string `json:\"heading\"`\n\tText    string `json:\"text\"`\n}\n\ntype Meta struct {\n\tTitle    string            `json:\"title\"`\n\tTags     []string          `json:\"tags,omitempty\"`\n\tCreated  time.Time         `json:\"created,omitempty\"`\n\tModified time.Time         `json:\"modified,omitempty\"`\n\tColor    string            `json:\"color,omitempty\"`\n\tExtra    map[string]string `json:\"extra,omitempty\"`\n}\n\ntype RecordV2 struct {\n\tID        string              `json:\"id\"`\n\tType      string              `json:\"type\"` // \"tiddler\", \"fragment\", etc.\n\tMeta      Meta                `json:\"meta\"`\n\tContent   Content             `json:\"content\"`\n\tRelations map[string][]string `json:\"relations,omitempty\"`\n}\n\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531224148704","modified":"20250531224148704","tmap.id":"78b05b0c-5a2a-40a1-a60c-797dfd97b59e"},{"title":"-models_tiddler.go","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```go\n// models/tiddler.go – Definición del Tiddler crudo exportado de TiddlyWiki\n// -----------------------------------------------------------\n// Package models contiene las estructuras de datos centrales para el pipeline.\npackage models\n\n// Tiddler representa un elemento exportado de TiddlyWiki.\n// Cada campo refleja el JSON original:\n//  - Title:    Título único del tiddler.\n//  - Text:     Contenido bruto (puede incluir JSON embebido, Markdown, texto plano).\n//  - Type:     Tipo MIME del contenido (e.g., application/json, text/markdown).\n//  - Tags:     Cadena con etiquetas en formato [[tag1]] [[tag2]].\n//  - Created:  Timestamp de creación en formato TiddlyWiki.\n//  - Modified: Timestamp de última modificación en formato TiddlyWiki.\n//  - Color:    Color asociado (opcional).\n//  - TmapID:   Identificador interno de TiddlyMap (opcional).\ntype Tiddler struct {\n\tTitle    string `json:\"title\"`\n\tText     string `json:\"text\"`\n\tType     string `json:\"type\"`\n\tTags     string `json:\"tags\"`\n\tCreated  string `json:\"created\"`\n\tModified string `json:\"modified\"`\n\tColor    string `json:\"color,omitempty\"`\n\tTmapID   string `json:\"tmap.id,omitempty\"`\n}\n\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531224148704","modified":"20250531224148704","tmap.id":"b287763e-a48e-462f-bef5-88522bb117cc"},{"title":"-README.md","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```markdown\n# OpenPages-Source\nMódulo de ingestión y estructuración primaria de conocimiento dentro del ecosistema OpenPages-Pipeline\n\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531223113409","modified":"20250531223113409","tmap.id":"83567d5d-b13b-4b58-871b-3b4deb53b71a"},{"title":"-rep-export-LINUX_.hashes.json","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```json\n{\n  \"estructura.txt\": \"abda8367dcfa15557c0cc6d63326444910e1d6b0\",\n  \"README.md\": \"bfeb7140b6b57f5122975894299fd3c950508237\",\n  \"SECURITY.md\": \"97a7e101ca65c9e5810729c9666b2fb36bad1e8a\",\n  \".gitignore\": \"33b0b6bc0e9321b4f20386ffa95cb013f1298d22\",\n  \"data/in/tiddlers.json\": \"45e8b66738c71b4bf6b75696845795ada56f1f13\",\n  \"rep-export-LINUX/.hashes.json\": \"da39a3ee5e6b4b0d3255bfef95601890afd80709\",\n  \"rep-export-LINUX/tiddler_exporter.py\": \"7d11c21e818c7375322d72b07cbca15101446acf\",\n  \"rep-export-LINUX/generate_structure.py\": \"85ceb3d9c60c102af70e8f34a37afca2c72d5771\",\n  \"rep-export-LINUX/tag_mapper.py\": \"6438822f9aa4b154ba8fa8c4c349af0f59678b8c\",\n  \".github/dependabot.yml\": \"05390588a40f5e1f8b2c9807377968d00476c433\",\n  \".github/workflows/go-test.yml\": \"a9ce32693b48cdb2b655ccdf729563fb491d49fe\"\n}\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531224148704","modified":"20250531224148704","tmap.id":"7705939b-b337-4dc8-84e5-c7822c38d3c3"},{"title":"-rep-export-LINUX_generate_structure.py","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```python\n\"\"\"\n📦 Script: generate_structure.py\n📍 Ubicación: rep-export-LINUX/generate_structure.py\n\n🧠 Función:\nEste script genera una vista estructurada del proyecto y la guarda como `estructura.txt` en la raíz del repositorio.\n\nSe basa en el comando de Windows `tree /F /A`, que:\n- Muestra carpetas y archivos\n- Usa solo caracteres ASCII (compatibles con UTF-8)\n\n🎯 Este archivo es utilizado por otros módulos (como `tiddler_exporter.py`)\npara detectar cambios estructurales\n\n✅ Cómo ejecutarlo:\n\n    python3 rep-export-LINUX/generate_structure.py\n\"\"\"\n\nimport subprocess\nfrom pathlib import Path\n\ndef generate_structure_file():\n    \"\"\"Genera `estructura.txt` con tree -a -F en codificación UTF-8 (Linux).\"\"\"\n    root = Path(__file__).resolve().parents[1]  # Carpeta raíz del proyecto\n    output_path = root / \"estructura.txt\"\n\n    try:\n        with open(output_path, \"w\", encoding=\"utf-8\") as f:\n            subprocess.run([\"tree\", \"-a\", \"-F\"], cwd=root, stdout=f)\n        print(f\"\\n📂 Estructura del proyecto exportada a:\\n   {output_path}\")\n    except FileNotFoundError:\n        print(\"❌ El comando 'tree' no está instalado. Instálalo con:\\n   sudo apt install tree\")\n\n# 🚪 Entrada directa\nif __name__ == \"__main__\":\n    generate_structure_file()\n\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531223113417","modified":"20250531223113417","tmap.id":"6557c28c-1693-47c4-bf6b-eeb87da267e8"},{"title":"-rep-export-LINUX_tag_mapper.py","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```python\n\"\"\"\n📦 Módulo: tag_mapper.py\n🎯 Ubicación esperada: rep-export-LINUX/tag_mapper.py\n\n🧠 Función:\nEste módulo se encarga de asignar tags semánticos a archivos del proyecto,\nbasándose en uno o varios archivos JSON alojados dentro de `tiddler_tag_doc/`.\nCualquiera que sea el nombre del JSON, si termina en `.json` dentro de la carpeta,\nse cargará y se añadirá a la lista de entradas semánticas.\n\n✨ Comportamiento:\n  - Busca la carpeta `tiddler_tag_doc/` en el mismo nivel de este script.\n  - Recorre todos los archivos `*.json` dentro de esa carpeta.\n  - Si la carpeta no existe o no hay JSON, emite un aviso pero continúa sin tags personalizados.\n  - Si un JSON está mal formado, emite un aviso y lo omite, pero carga los demás.\n  - Crea un índice global (clave: \"title\", valor: lista de tags) combinando todos los JSON válidos.\n  - Si un archivo no se encuentra en el índice final, retorna `['[[--- 🧬 Por Clasificar]]']`.\n\"\"\"\n\nimport json\nfrom pathlib import Path\nimport os\n\n# ===================================\n# ⚙️ CONFIGURACIÓN: ruta a la carpeta\n# ===================================\n# Asumimos que este script está en rep-export-LINUX/tag_mapper.py,\n# por lo que el directorio \"tiddler_tag_doc\" está en el mismo nivel que este archivo.\nTIDDLER_TAG_DIR = Path(__file__).resolve().parents[0] / \"tiddler_tag_doc\"\n\n# =====================================\n# 📥 CARGA DE TODOS LOS JSON EN tiddler_tag_doc\n# =====================================\ntag_data = []  # Acá acumularemos todas las entradas de JSON\n\nif TIDDLER_TAG_DIR.exists() and TIDDLER_TAG_DIR.is_dir():\n    # Buscamos todos los archivos con extensión .json en orden alfabético\n    json_files = sorted(TIDDLER_TAG_DIR.glob(\"*.json\"))\n    if not json_files:\n        print(f\"⚠️ No se encontraron archivos .json en: {TIDDLER_TAG_DIR}\")\n    else:\n        for json_path in json_files:\n            try:\n                with open(json_path, 'r', encoding='utf-8') as f:\n                    data = json.load(f)\n                    if isinstance(data, list):\n                        # Si el JSON es una lista de objetos, lo agregamos\n                        tag_data.extend(data)\n                    else:\n                        print(f\"⚠️ El contenido de '{json_path.name}' no es una lista JSON válida. Se omitirá.\")\n            except json.JSONDecodeError:\n                print(f\"⚠️ El archivo existe pero no es un JSON válido: {json_path}\")\n            except Exception as e:\n                print(f\"⚠️ Error al leer '{json_path.name}': {e}\")\nelse:\n    print(f\"⚠️ No se encontró la carpeta tiddler_tag_doc en: {TIDDLER_TAG_DIR}\")\n\n# ============================================================\n# 📑 Construir índice global: título (string) → lista de tags\n# ============================================================\n# Cada objeto en tag_data debería tener al menos:\n#   { \"title\": \"-ruta_relativa_al_archivo\", \"tags\": \"[[TagA]] [[TagB]]\" }\n# Si no cumple, simplemente lo saltamos.\ntitle_to_tags: dict[str, list[str]] = {}\n\nfor item in tag_data:\n    if not isinstance(item, dict):\n        continue  # saltamos cualquier cosa que no sea un dict\n    title = item.get(\"title\", \"\").strip()\n    tags_str = item.get(\"tags\", \"\")\n    if title and isinstance(tags_str, str):\n        # Convertimos la cadena de tags en lista\n        tags_list = tags_str.split()\n        title_to_tags[title] = tags_list\n\n# ================================================================\n# 🔎 FUNCIÓN PRINCIPAL: obtener lista de tags para un archivo dado\n# ================================================================\ndef get_tags_for_file(file_path: Path) -> list[str]:\n    \"\"\"\n    Dado un Path absoluto (o relativo) de un archivo dentro del repo,\n    construye el 'título' (matching con los JSON) y retorna la lista de tags.\n    Si no lo encuentra en el índice, retorna ['[[--- 🧬 Por Clasificar]]'].\n\n    Ejemplo de construcción de título:\n      Si file_path = /.../src/utils/helpers.py\n      y el ROOT (para el índice) es un nivel arriba de este script,\n      entonces rel_title = \"-src_utils_helpers.py\"\n\n    Parámetros:\n    - file_path: Path hacia el archivo real en el repositorio.\n\n    Retorna:\n    - List[str]: lista de tags (p.ej. [\"[[TagA]]\", \"[[TagB]]\"]) o\n                 ['[[--- 🧬 Por Clasificar]]'] si no existe.\n    \"\"\"\n    try:\n        # Determinar carpeta raíz del repo (dos niveles arriba de este script)\n        root_dir = Path(__file__).resolve().parents[1]\n        rel_path_unix = str(file_path.relative_to(root_dir)).replace(os.sep, '_')\n        rel_title = \"-\" + rel_path_unix\n    except Exception:\n        # Si no se puede calcular la ruta relativa, asignamos prefijo por defecto\n        rel_title = \"-\" + file_path.name\n\n    # Devolvemos los tags si existen en el índice, o el fallback si no\n    return title_to_tags.get(rel_title, ['[[--- 🧬 Por Clasificar]]'])\n\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531223113417","modified":"20250531223113417","tmap.id":"6fc1b4b1-7308-453d-a0f2-48930bc7b651"},{"title":"-rep-export-LINUX_tiddler_exporter.py","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```python\n\"\"\"\n📦 Script: tiddler_exporter.py\n📍 Ubicación: rep-export-LINUX/tiddler_exporter.py\n\n🧠 Función:\nEste script recorre todos los archivos fuente del proyecto, detecta si su contenido ha cambiado,\ny si es así, genera un archivo `.json` (un tiddler en formato TiddlyWiki) listo para importar.\n\n🔖 Cada archivo se convierte en un \"tiddler\", con:\n  - Nombre prefijado con `-` (ej: -src_logger.py)\n  - Tags semánticos obtenidos desde `OpenPages.json` a través de `tag_mapper.py`\n  - Bloque markdown con el contenido del archivo y resaltado según su lenguaje\n\n🎯 Compatible con TiddlyWiki, offline, AI-ready y 100% Python puro.\n\n✅ Cómo ejecutarlo:\n\n    # Exporta solo si hay cambios detectados\n    python3 rep-export-LINUX/tiddler_exporter.py\n\n    # Modo simulación (solo imprime qué archivos cambiarían)\n    python3 rep-export-LINUX/tiddler_exporter.py --dry-run\n\"\"\"\n\nimport os\nimport json\nimport hashlib\nimport tag_mapper  # Importa la lógica de tags desde scripts/tag_mapper.py\nfrom datetime import datetime, timezone\nfrom pathlib import Path\nfrom typing import List\n\n# ==========================\n# ⚙️ CONFIGURACIÓN GENERAL\n# ==========================\n\n# __file__ = rep-export-LINUX/tiddler_exporter.py\n# ROOT_DIR apunta a la carpeta raíz del repositorio (dos niveles arriba de este script)\nROOT_DIR = Path(__file__).resolve().parents[1]\nSCRIPT_DIR = Path(__file__).parent\nOUTPUT_DIR = SCRIPT_DIR / \"tiddlers-export\"  # Carpeta donde se escribirán los tiddlers JSON\nHASH_FILE = SCRIPT_DIR / \".hashes.json\"       # Archivo que almacena hashes previos para detectar cambios\n\n# Extensiones válidas (archivos que queremos convertir a tiddlers)\nVALID_EXTENSIONS = ['.py', '.md', '.json', '.sh', '.html', '.css', '.yml', '.txt','.go']\n# Archivos sin extensión que queremos incluir (ej. .gitignore)\nALLOWED_FILENAMES = ['.gitignore']\n\n# Carpetas que NO queremos recorrer (ignorar)\nIGNORE_DIRS = [\n    '__pycache__', 'venv', '.venv', 'dist', 'node_modules', 'output', 'input',\n    '.pytest_cache', 'configs', 'media', 'project_details', 'tiddlers-export'\n]\n\n# Mapa para determinar el lenguaje de resaltado al generar el bloque markdown\nLANGUAGE_MAP = {\n    '.py': 'python',\n    '.md': 'markdown',\n    '.json': 'json',\n    '.sh': 'bash',\n    '.yml': 'bash',\n    '.html': 'html',\n    '.txt': 'txt',\n    '.css': 'css',\n    '.go' : 'go'\n}\n\n# Mapa para archivos especiales por nombre (ej. .gitignore)\nSPECIAL_LANGUAGES = {\n    '.gitignore': 'gitignore'\n}\n\n# ==============================\n# 🔎 FUNCIONES AUXILIARES\n# ==============================\n\ndef get_all_files(directory: Path) -> List[Path]:\n    \"\"\"\n    Recorre recursivamente 'directory' y devuelve una lista de Path\n    solo con archivos válidos (según VALID_EXTENSIONS o ALLOWED_FILENAMES),\n    saltando carpetas definidas en IGNORE_DIRS.\n    \"\"\"\n    all_files: List[Path] = []\n    for root, dirs, files in os.walk(directory):\n        # Filtramos directorios ignorados\n        dirs[:] = [d for d in dirs if d not in IGNORE_DIRS]\n        for filename in files:\n            ext = Path(filename).suffix\n            if ext in VALID_EXTENSIONS or filename in ALLOWED_FILENAMES:\n                all_files.append(Path(root) / filename)\n    return all_files\n\ndef get_hash(content: str) -> str:\n    \"\"\"\n    Recibe una cadena (\"content\") y retorna su hash SHA-1 en hexadecimal.\n    Se usa para detectar cambios en el contenido de archivos.\n    \"\"\"\n    return hashlib.sha1(content.encode('utf-8')).hexdigest()\n\ndef safe_title(path: Path) -> str:\n    \"\"\"\n    Dado un Path absoluto o relativo dentro de ROOT_DIR,\n    retorna un título válido para un tiddler:\n      - Prefijo \"-\" (para cumplir con convención TiddlyWiki).\n      - Reemplazo de separadores por guión bajo.\n    Ejemplo: si 'path' es /repo/src/utils/helpers.py,\n    y ROOT_DIR = /repo, title será \"-src_utils_helpers.py\"\n    \"\"\"\n    return '-' + str(path.relative_to(ROOT_DIR)).replace(os.sep, '_')\n\ndef detect_language(file_path: Path) -> str:\n    \"\"\"\n    Determina el lenguaje para el bloque de código en markdown:\n      - Si el nombre del archivo está en SPECIAL_LANGUAGES, lo retorna.\n      - En otro caso, busca la extensión en LANGUAGE_MAP.\n      - Si no lo encuentra, usa \"text\" por defecto.\n    \"\"\"\n    name = file_path.name\n    if name in SPECIAL_LANGUAGES:\n        return SPECIAL_LANGUAGES[name]\n    ext = file_path.suffix\n    return LANGUAGE_MAP.get(ext, 'text')\n\n# ==============================\n# 🚀 EXPORTADOR PRINCIPAL\n# ==============================\n\ndef export_tiddlers(dry_run: bool = False):\n    \"\"\"\n    Recorre todos los archivos válidos en ROOT_DIR, calcula su hash y\n    comprueba si ha cambiado desde la última ejecución (almacenada en .hashes.json).\n\n    Para cada archivo que cambió:\n      1. Genera un \"title\" válido con safe_title().\n      2. Obtiene sus tags usando tag_mapper.get_tags_for_file().\n      3. Construye el contenido markdown del tiddler (con bloque de código).\n      4. Escribe un JSON de tiddler en OUTPUT_DIR (salvo que sea dry_run).\n      5. Actualiza la lista de archivos modificados.\n\n    Parámetros:\n    - dry_run: Si es True, solo imprime qué archivos cambiarían, sin escribir nada.\n    \"\"\"\n    # Asegurarse de que OUTPUT_DIR existe\n    OUTPUT_DIR.mkdir(parents=True, exist_ok=True)\n\n    # Cargar hashes anteriores (si existe .hashes.json); sino, empezar con dict vacío\n    if HASH_FILE.exists():\n        try:\n            with open(HASH_FILE, 'r', encoding='utf-8') as f:\n                old_hashes = json.load(f)\n        except Exception:\n            print(f\"⚠️ No se pudo leer {HASH_FILE}. Se re-iniciarán todos los hashes.\")\n            old_hashes = {}\n    else:\n        old_hashes = {}\n\n    new_hashes: dict[str, str] = {}\n    changed_files: List[str] = []\n\n    # Recorrer cada archivo válido en el repositorio\n    for file_path in get_all_files(ROOT_DIR):\n        # Ruta relativa como string (ej: \"src/utils/helpers.py\")\n        rel_path = str(file_path.relative_to(ROOT_DIR))\n\n        # Detectar lenguaje para resaltar código en markdown\n        lang = detect_language(file_path)\n\n        # Leer contenido del archivo\n        try:\n            content = file_path.read_text(encoding='utf-8')\n        except Exception as e:\n            print(f\"⚠️ Error leyendo {rel_path}: {e}\")\n            # Si no pudo leer, saltar este archivo\n            continue\n\n        # Calcular hash SHA1 del contenido\n        hash_now = get_hash(content)\n        new_hashes[rel_path] = hash_now\n\n        # Si el hash coincide con el anterior, no hubo cambios → saltar\n        if old_hashes.get(rel_path) == hash_now:\n            continue\n\n        # ---------- Ha habido cambio (o es primera vez) ----------\n        # 1) Construir título\n        title = safe_title(file_path)\n\n        # 2) Obtener tags semánticos (o tag por defecto si no existe JSON)\n        tags_list = tag_mapper.get_tags_for_file(file_path)\n        tags_joined = ' '.join(tags_list)\n\n        # 3) Construir bloque de texto Markdown para el tiddler\n        #    - Encabezado con sección Tags\n        #    - Luego bloque de código con el contenido real\n        text_block = (\n            \"## [[Tags]]\\n\"\n            f\"{tags_joined}\\n\\n\"\n            f\"```{lang}\\n\"\n            f\"{content}\\n\"\n            \"```\"\n        )\n\n        # 4) Crear estructura JSON del tiddler\n        tiddler = {\n            \"title\": title,\n            \"text\": text_block,\n            \"tags\": tags_joined,\n            \"type\": \"text/markdown\",\n            # Fechas en formato TiddlyWiki: YYYYMMDDhhmmssSSS (milisegundos)\n            \"created\": datetime.now(timezone.utc).strftime('%Y%m%d%H%M%S%f')[:17],\n            \"modified\": datetime.now(timezone.utc).strftime('%Y%m%d%H%M%S%f')[:17],\n        }\n\n        # Si estamos en modo simulación, imprimimos y saltamos escritura\n        if dry_run:\n            print(f\"[dry-run] Detectado cambio en: {rel_path}\")\n            continue\n\n        # 5) Escribir archivo JSON dentro de OUTPUT_DIR\n        out_file = OUTPUT_DIR / f\"{title}.json\"\n        try:\n            with open(out_file, 'w', encoding='utf-8') as f:\n                json.dump(tiddler, f, indent=2, ensure_ascii=False)\n        except Exception as e:\n            print(f\"⚠️ No se pudo escribir {out_file}: {e}\")\n            continue\n\n        # Agregar a la lista de archivos modificados (para reportar al final)\n        changed_files.append(rel_path)\n\n    # ======= Actualizar archivo de hashes si no es dry_run =======\n    if not dry_run:\n        try:\n            with open(HASH_FILE, 'w', encoding='utf-8') as f:\n                json.dump(new_hashes, f, indent=2)\n        except Exception as e:\n            print(f\"⚠️ No se pudo actualizar {HASH_FILE}: {e}\")\n\n    # ======= Informe final =======\n    print(f\"\\n📦 Archivos modificados: {len(changed_files)}\")\n    if changed_files:\n        for path in changed_files:\n            print(f\"  ✅ Exportado: {path}\")\n    else:\n        print(\"  🔁 Sin cambios detectados.\")\n        \n\n# ==============================\n# 🧪 CLI: Entrada directa\n# ==============================\nif __name__ == \"__main__\":\n    import sys\n    # Detectar bandera --dry-run\n    dry = '--dry-run' in sys.argv\n    export_tiddlers(dry_run=dry)\n\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531224148705","modified":"20250531224148705","tmap.id":"49adc75e-28bd-420b-96e9-cc64ff581e17"},{"title":"-SECURITY.md","text":"## [[Tags]]\n[[--- 🧬 Por Clasificar]]\n\n```markdown\n# 🛡️ Política de Seguridad – OpenPages-Source\n\n---\n\n## 📣 Cómo reportar una vulnerabilidad\n\nSi encuentras un problema de seguridad (por ejemplo: ejecución de código malicioso, lectura no autorizada de archivos, inyección de texto en outputs), por favor:\n\n1. **No abras un issue público.**\n2. Reportalo de forma privada enviando un correo a:\n   📩 [xxx](mailto:xxx) *(o usa el canal de Security Advisories de GitHub)*\n\nIncluí por favor:\n\n* Una descripción clara del problema.\n* Pasos para reproducirlo (si aplica).\n* Opcional: sugerencia de solución o enlace a un PR.\n\nNos comprometemos a:\n\n* 📬 Confirmar la recepción del reporte en un plazo máximo de **5 días hábiles**.\n* 📌 Evaluarlo con cuidado, incluso si es menor.\n* 🛠️ Aplicar un parche o solución en el corto plazo (si aplica).\n* 📢 Informar en el changelog una vez resuelto (con anonimato si así se desea).\n\n---\n\n## 🧠 ¿Y si no es una vulnerabilidad crítica?\n\nSi encontraste un bug o comportamiento inesperado **pero no crítico**, abrí un [Issue](https://github.com/diegoabeltran16/OpenPages-Source/issues) con la etiqueta `bug` o `enhancement`.\n\nTu reporte ayuda a que este proyecto sea más robusto y confiable para tod\\@s.\n\n---\n\n**Gracias por contribuir a que OpenPages-Source sea una herramienta segura, ética y confiable.**\n\n```","tags":"[[--- 🧬 Por Clasificar]]","type":"text/markdown","created":"20250531223113409","modified":"20250531223113409","tmap.id":"b25bbfee-ea76-4c38-a3aa-eeedb4735ffc"},{"created":"20250423034529818","text":"{\n  \"title\": \"⚙️ Automatización\",\n  \"id\": \"⚙️ Automatización\",\n  \"tags\": [\n    \"⚙️ Automatización\",\n    \"--- Codigo\",\n    \"--- 🗂 Principios de programación\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"🧩 Script Orquestador\",\n      \"🧩 Workflow CI/CD\",\n      \"🧩 Pruebas Automatizadas\",\n      \"🧩 Gestión de Dependencias\"\n    ],\n    \"requiere\": [\n      \"--- Codigo\",\n      \"--- 🗂 Principios de programación\"\n    ],\n    \"usa\": [\n      \"🗂 Calidad del Código\",\n      \"🗂 Estructura de commits\",\n      \"🗂 Epigenética Computacional\"\n    ],\n    \"parte_de\": [\n      \"_____Nombre del Proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler representa el subsistema de automatización técnica: orquesta tareas, ejecuta flujos CI/CD, pruebas y asegura consistencia entre ciclos de desarrollo.\",\n  \"textMarkdown\": \"## ⚙️ Sistema de Automatización\\nRegulador técnico del sistema: scripts, CI/CD, validaciones.\\n\\n### Define:\\n- 🧩 Script Orquestador\\n- 🧩 Workflow CI/CD\\n- 🧩 Pruebas Automatizadas\\n- 🧩 Gestión de Dependencias\\n\\n### Requiere:\\n- --- Codigo\\n- --- 🗂 Principios de programación\\n\\n### Usa:\\n- 🗂 Calidad del Código\\n- 🗂 Estructura de commits\\n- 🗂 Epigenética Computacional\\n\\n### Parte de:\\n- _____Nombre del Proyecto\\n\\n---\\n> Este tiddler regula los procesos técnicos del sistema como un sistema endocrino computacional. Clave para flujos reproducibles y colaboración distribuida.\"\n}\n{\"section\": \"⚙️ 🧬 Sistema de Automatización\", \"titulo\": \"Nombre del Sistema\", \"descripcion\": \"Sistema que regula el comportamiento técnico del proyecto mediante scripts, flujos automatizados y acciones continuas. Equivale al sistema endocrino, que regula funciones internas mediante señales específicas.\"}\n\n{\"subsection\": \"🧠 Rol del Sistema de Automatización\", \"comparaciones\": [\n  {\"funcion\": \"Orquestar tareas técnicas\", \"analogía\": \"Coordinación central de actividades internas (Hipotálamo)\"},\n  {\"funcion\": \"Construcción y despliegue\", \"analogía\": \"Maduración y reproducción técnica (Hormonas de crecimiento / CI/CD)\"},\n  {\"funcion\": \"Validación y pruebas\", \"analogía\": \"Defensa y homeostasis técnica (Hormonas inmunológicas)\"},\n  {\"funcion\": \"Ejecutar flujos locales o remotos\", \"analogía\": \"Liberación de señales que activan acciones específicas\"}\n]}\n\n{\"subsection\": \"📦 Componentes Funcionales\", \"componentes\": [\n  {\"tipo\": \"Script Orquestador\", \"descripcion\": \"Define tareas recurrentes como compilación, pruebas, limpieza o formateo de código. Ej.: Makefile, Rakefile, NPM scripts\"},\n  {\"tipo\": \"Workflow CI/CD\", \"descripcion\": \"Define flujos automatizados para integración y despliegue continuo. Ej.: GitHub Actions, GitLab CI, Jenkinsfile\"},\n  {\"tipo\": \"Script de Utilidad\", \"descripcion\": \"Herramientas auxiliares para validación, estadísticas, limpieza, conversión de formatos\"},\n  {\"tipo\": \"Pruebas Automatizadas\", \"descripcion\": \"Tests unitarios, de integración o validación que se ejecutan localmente o en CI\"},\n  {\"tipo\": \"Gestión de Dependencias\", \"descripcion\": \"Archivos que definen y verifican el entorno de ejecución (módulos, bibliotecas, versiones)\"},\n  {\"tipo\": \"Documentación Evolutiva\", \"descripcion\": \"Archivos de planificación que determinan en qué fases aplicar automatización o escalar procesos\"}\n]}\n\n{\"subsection\": \"🔁 Interacción con otros sistemas\", \"interacciones\": [\n  {\"conecta_con\": \"Sistema de Entrada / Coordinación\", \"motivo\": \"Automatiza comandos de ejecución o validación desde interfaz principal\"},\n  {\"conecta_con\": \"Sistema de Validación\", \"motivo\": \"Ejecuta pruebas automáticas sobre datos o funciones\"},\n  {\"conecta_con\": \"Sistema de Transformación / Salida\", \"motivo\": \"Verifica salidas o limpia resultados antes de distribuir\"},\n  {\"conecta_con\": \"Repositorio y Servidor CI\", \"motivo\": \"Ejecuta flujos en eventos de código: push, pull request, release\"}\n]}\n\n{\"subsection\": \"📎 Notas Técnicas\", \"descripcion\": \"Este sistema permite mantener consistencia técnica, calidad del código y ciclos de desarrollo reproducibles. Ideal para equipos distribuidos y flujos CI/CD modernos.\"}\n","title":"⚙️ Automatización","modified":"20250531035442594","tags":"[[⚙️ Automatización]] [[--- Codigo]]","tmap.id":"82432622-5ac7-4a03-8836-125d7dcf88bd","type":"application/json"},{"created":"20250531042342198","text":"","tags":"[[--- Codigo]]","title":"⚙️ Seguridad","modified":"20250531042359702","type":"application/json","tmap.id":"60559ff0-ea44-4885-8ed8-5c9ae043a62a"},{"created":"20250423145805723","text":"{\n  \"title\": \"⚙️📘 Documentacion\",\n  \"id\": \"⚙️📘 Documentacion\",\n  \"tags\": [\n    \"⚙️📘 Documentacion\",\n    \"--- Codigo\",\n    \"--- 🗂 Principios de programación\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"📘 Tipos de Documentos Técnicos\",\n      \"📘 Registro de Cambios\",\n      \"📘 Convenciones de Contribución\"\n    ],\n    \"requiere\": [\n      \"--- Codigo\",\n      \"--- 🗂 Principios de programación\",\n      \"⚙️ Automatización\"\n    ],\n    \"usa\": [\n      \"🎯 1. Objetivos\",\n      \"🎯 5. Arquitectura\",\n      \"🎯 9. Plan de desarrollo\",\n      \"🗂 Estructura de commits\",\n      \"🗂 Epigenética Computacional\"\n    ],\n    \"parte_de\": [\n      \"_____Nombre del Proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler representa el sistema cognitivo del proyecto. Conserva el conocimiento estructural, registra el cambio, comunica propósitos y facilita el aprendizaje autónomo.\",\n  \"textMarkdown\": \"## 📘 Sistema de Documentación\\nEje cognitivo del sistema: memoria, comunicación y entendimiento autónomo.\\n\\n### Define:\\n- 📘 Tipos de Documentos Técnicos\\n- 📘 Registro de Cambios\\n- 📘 Convenciones de Contribución\\n\\n### Requiere:\\n- --- Codigo\\n- --- 🗂 Principios de programación\\n- ⚙️ Automatización\\n\\n### Usa:\\n- 🎯 1. Objetivos\\n- 🎯 5. Arquitectura\\n- 🎯 9. Plan de desarrollo\\n- 🗂 Estructura de commits\\n- 🗂 Epigenética Computacional\\n\\n### Parte de:\\n- _____Nombre del Proyecto\\n\\n---\\n> Este subsistema sostiene la evolución y sostenibilidad del proyecto al consolidar y comunicar su conocimiento operativo.\"\n}\n{\"section\": \"📚 Sistema de Documentación\", \"titulo\": \"Nombre del Sistema\", \"descripcion\": \"Este sistema mantiene, organiza y comunica el conocimiento estructural de un proyecto. Opera como un sistema cognitivo: consolida la arquitectura, guarda historia, facilita el aprendizaje y comunica hacia afuera.\"}\n\n{\"subsection\": \"🧠 Rol del Sistema de Documentación\", \"comparaciones\": [\n  {\"funcion\": \"Describir la arquitectura y relaciones del sistema\", \"analogía_biológica\": \"Modelo estructural de la corteza frontal\"},\n  {\"funcion\": \"Registrar cambios, versiones y maduración del sistema\", \"analogía_biológica\": \"Memoria episódica (hipocampo)\"},\n  {\"funcion\": \"Comunicar propósito, instalación y uso\", \"analogía_biológica\": \"Lenguaje como función de expresión\"},\n  {\"funcion\": \"Permitir entendimiento sin supervisión directa\", \"analogía_biológica\": \"Capacidad de aprendizaje autónomo del neocórtex\"}\n]}\n\n{\"subsection\": \"📄 Tipos de Documentos Técnicos\", \"tipos\": [\n  {\"tipo\": \"README\", \"descripcion\": \"Visión general, propósito, instalación y ejemplo de uso\"},\n  {\"tipo\": \"Plan de Desarrollo\", \"descripcion\": \"Roadmap o estrategia de evolución (por versiones o vueltas)\"},\n  {\"tipo\": \"Arquitectura\", \"descripcion\": \"Estructura interna, dependencias, flujo de datos, componentes\"},\n  {\"tipo\": \"Guías de Contribución\", \"descripcion\": \"Convenciones, estructura del repositorio, testeo, licencias\"},\n  {\"tipo\": \"Bitácora de Cambios\", \"descripcion\": \"Changelog, DOFA, decisiones técnicas clave\"}\n]}\n\n{\"subsection\": \"🔗 Integración con Otros Sistemas\", \"interacciones\": [\n  {\"conecta_con\": \"Sistema de Automatización\", \"motivo\": \"Los scripts y workflows usan y validan documentación para reproducibilidad\"},\n  {\"conecta_con\": \"Sistema Nervioso / CLI\", \"motivo\": \"Ayuda y flags documentados forman parte del sistema cognitivo\"},\n  {\"conecta_con\": \"Sistema Inmunológico\", \"motivo\": \"Las políticas y validaciones están definidas en la documentación técnica\"},\n  {\"conecta_con\": \"Usuarios y colaboradores\", \"motivo\": \"Permite la comprensión y uso del sistema sin intervención directa\"}\n]}\n\n{\"subsection\": \"📎 Notas Técnicas\", \"descripcion\": \"El sistema de documentación es clave para la sostenibilidad del proyecto. Permite onboarding, evolución, colaboración externa y auditabilidad. Debe mantenerse versionado, accesible y alineado con el código funcional.\"}\n","type":"application/json","title":"⚙️📘 Documentacion","modified":"20250531035640668","tags":"[[⚙️📘 Documentacion]] [[--- Codigo]]","tmap.id":"4dfbf1cf-2b67-45f2-908d-42df2ac41aff"},{"created":"20250423034500542","text":"{\n  \"title\": \"⚙️🧪 tests/\",\n  \"id\": \"⚙️🧪 tests/\",\n  \"tags\": [\n    \"⚙️🧪 tests/\",\n    \"--- Codigo\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"⚙️🧪 Tipos de Validación\",\n      \"⚙️🧪 Métodos de Activación\",\n      \"⚙️🧪 Sistema Inmunológico\"\n    ],\n    \"usa\": [\n      \"🎯 2. Requisitos\",\n      \"🎯 4. Flujo de interaccion\",\n      \"🎯 6. Componentes\"\n    ],\n    \"requiere\": [\n      \"🗂 Usabilidad y Robustez\",\n      \"🗂 Modularidad y Estado\"\n    ],\n    \"parte_de\": [\n      \"--- Codigo\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler representa el sistema inmunológico del código: evita que estructuras inválidas contaminen el sistema. Aplica validaciones antes de integrar entradas al flujo, y está conectado al parser, writer y CI/CD.\",\n  \"textMarkdown\": \"## ⚙️🧪 Sistema Inmunológico de Tests\\n\\nEste nodo valida y protege el sistema antes de permitir que datos pasen a otras fases.\\n\\n### Define:\\n- ⚙️🧪 Tipos de Validación\\n- ⚙️🧪 Métodos de Activación\\n- ⚙️🧪 Sistema Inmunológico\\n\\n### Usa:\\n- 🎯 2. Requisitos\\n- 🎯 4. Flujo de interaccion\\n- 🎯 6. Componentes\\n\\n### Requiere:\\n- 🗂 Usabilidad y Robustez\\n- 🗂 Modularidad y Estado\\n\\n### Parte de:\\n- --- Codigo\\n\\n---\\n> Este sistema inmunológico previene fallas silenciosas y promueve integridad estructural desde el diseño del flujo, no como parche posterior.\"\n}\n{\n  \"section\": \"🧪 Sistema Inmunológico\",\n  \"titulo\": \"Nombre del Proyecto o Componente\",\n  \"descripcion\": \"Este sistema previene fallas al detectar datos inválidos, estructuras corruptas o entradas malformadas antes de que se integren al sistema principal o sean escritas como salida definitiva.\"\n}\n{\n  \"subsection\": \"🧠 Propósito Biológico\",\n  \"funcion\": \"Validar estructuras, formatos y valores antes de continuar el flujo\",\n  \"accion\": \"Detener, reportar o transformar entradas inválidas según reglas explícitas\",\n  \"contexto\": \"Evita contaminación de datos de salida, errores en el runtime o fallas lógicas downstream\"\n}\n{\n  \"subsection\": \"🧪 Tipos de Validación\",\n  \"validaciones\": [\n    {\n      \"tipo\": \"Formato de entrada\",\n      \"objetivo\": \"Verificar que archivos sean parseables y cumplan con el esquema esperado\"\n    },\n    {\n      \"tipo\": \"Campos requeridos\",\n      \"objetivo\": \"Asegurar presencia de claves mínimas como `title`, `text`, `id`\"\n    },\n    {\n      \"tipo\": \"Valores únicos\",\n      \"objetivo\": \"Evitar duplicados en campos clave como `slug`, `uuid`, `record_id`\"\n    },\n    {\n      \"tipo\": \"Fechas válidas\",\n      \"objetivo\": \"Detectar y normalizar timestamps inválidos o ausentes\"\n    },\n    {\n      \"tipo\": \"Rangos numéricos o longitudes\",\n      \"objetivo\": \"Rechazar entradas con valores extremos, negativos o mal definidos\"\n    }\n  ]\n}\n{\n  \"subsection\": \"🧩 Métodos de Activación\",\n  \"detalles\": [\n    {\n      \"modo\": \"En tiempo de ejecución\",\n      \"tecnica\": \"Validaciones previas a transformaciones o escritura\"\n    },\n    {\n      \"modo\": \"Automatizado\",\n      \"tecnica\": \"Pruebas unitarias o integración que simulan entradas inválidas\"\n    },\n    {\n      \"modo\": \"En CI/CD\",\n      \"tecnica\": \"Linter, test de sanitización, validadores de esquemas\"\n    }\n  ]\n}\n{\n  \"subsection\": \"🔗 Integración con Otros Sistemas\",\n  \"interacciones\": [\n    {\n      \"conecta_con\": \"Sistema Genético / Parser\",\n      \"motivo\": \"Solo transforma si los datos son válidos\"\n    },\n    {\n      \"conecta_con\": \"Sistema Excretor / Writer\",\n      \"motivo\": \"Previene que datos corruptos sean exportados como salida final\"\n    },\n    {\n      \"conecta_con\": \"Sistema de Automatización\",\n      \"motivo\": \"Ejecución automática de validadores y pruebas sanitarias\"\n    }\n  ]\n}\n{\n  \"subsection\": \"📎 Notas Técnicas\",\n  \"descripcion\": \"El sistema inmunológico debe ser modular, reutilizable y observable. Los errores deben ser claros, trazables y no destructivos. Se recomienda aislar validaciones en funciones puras y usar mensajes consistentes para facilitar debugging y soporte.\"\n}\n","title":"⚙️🧪 tests/","modified":"20250531035831986","tags":"[[⚙️🧪 tests/]] [[--- Codigo]]","tmap.id":"1fb449db-e799-42e9-a47a-5ebac65a5fef","type":"application/json"},{"created":"20250423034437663","text":"{\n  \"title\": \"⚙️🧬 src/\",\n  \"id\": \"⚙️🧬 src/\",\n  \"tags\": [\n    \"⚙️🧬 src/\",\n    \"--- Codigo\"\n  ],\n  \"relations\": {\n    \"parte_de\": [\n      \"--- Codigo\"\n    ],\n    \"usa\": [\n      \"⚙️🧪 tests/\",\n      \"🎯 6. Componentes\",\n      \"🎯 7. Algoritmos y matematicas\"\n    ],\n    \"requiere\": [\n      \"🗂 Modularidad y Estado\",\n      \"🗂 Diseño\",\n      \"🗂 Calidad del Código\"\n    ],\n    \"define\": [\n      \"⚙️🧬 src/ estructura\",\n      \"⚙️🧬 src/ módulos\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler representa el contenedor del código fuente activo del sistema. Se basa en principios de diseño y calidad, e implementa directamente módulos funcionales. Usa componentes, algoritmos y se conecta con tests. Es parte del núcleo de Código.\",\n  \"textMarkdown\": \"## ⚙️🧬 src/\\nContenedor principal del código fuente funcional y operativo del sistema.\\n\\n### Parte de:\\n- --- Codigo\\n\\n### Usa:\\n- ⚙️🧪 tests/\\n- 🎯 6. Componentes\\n- 🎯 7. Algoritmos y matematicas\\n\\n### Requiere:\\n- 🗂 Modularidad y Estado\\n- 🗂 Diseño\\n- 🗂 Calidad del Código\\n\\n### Define:\\n- ⚙️🧬 src/ estructura\\n- ⚙️🧬 src/ módulos\\n\\n---\\n> src/ contiene la evolución activa del sistema. Es el espacio donde las decisiones arquitectónicas se hacen código. Respeta jerarquía, separa dominios y prepara el sistema para escalar.\"\n}\n\n{\n  \"section\": \"🧱 ¿Qué es src/ en [Nombre del Proyecto]?\",\n  \"descripcion\": \"Contenedor principal del código fuente funcional. Representa el núcleo estructural del proyecto donde se alojan los módulos activos y sistemas que ejecutan la lógica central.\"\n}\n{\n  \"subsection\": \"✅ ¿Por qué usar src/ en este proyecto?\",\n  \"justificacion\": [\n    {\n      \"ventaja\": \"🔍 Claridad estructural\",\n      \"resultado\": \"Separa explícitamente el código fuente de otras áreas como documentación, scripts o pruebas automatizadas\"\n    },\n    {\n      \"ventaja\": \"🧪 Organización de pruebas\",\n      \"resultado\": \"Permite mantener una jerarquía limpia al tener tests/ como carpeta paralela, evitando mezclas entre lógica y verificación\"\n    },\n    {\n      \"ventaja\": \"🚀 Escalabilidad\",\n      \"resultado\": \"Permite integrar estructuras avanzadas como cmd/, pkg/, internal/, adaptándose a arquitecturas más complejas sin romper orden\"\n    },\n    {\n      \"ventaja\": \"🧬 Evolución modular\",\n      \"resultado\": \"Cada componente o módulo puede crecer y refactorizarse dentro de src sin afectar archivos raíz ni la arquitectura general\"\n    },\n    {\n      \"ventaja\": \"📦 Empaquetado coherente\",\n      \"resultado\": \"Facilita distribución binaria o empaquetado del sistema sin incluir archivos no esenciales\"\n    }\n  ]\n}\n","title":"⚙️🧬 src/","modified":"20250531035952662","tags":"[[⚙️🧬 src/]] [[--- Codigo]]","tmap.id":"c46c9026-89e4-4895-9856-698e0bea13d6","type":"application/json"},{"created":"20250423151515431","text":"{\n  \"title\": \"⚙️🛠 scripts/\",\n  \"id\": \"⚙️🛠 scripts/\",\n  \"tags\": [\n    \"⚙️🛠 scripts/\",\n    \"--- Codigo\"\n  ],\n  \"relations\": {\n    \"parte_de\": [\n      \"--- Codigo\"\n    ],\n    \"usa\": [\n      \"🧾 Módulo de salida (writer)\",\n      \"⚙️🧪 tests/\",\n      \"⚙️🧬 src/\"\n    ],\n    \"requiere\": [\n      \"🗂 Calidad del Código\"\n    ],\n    \"define\": [\n      \"⚙️🛠 scripts/tools\",\n      \"⚙️🛠 scripts/stats\",\n      \"⚙️🛠 scripts/validate\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler representa el conjunto de scripts externos que apoyan la verificación, análisis o diagnóstico del sistema. Son herramientas auxiliares que se ejecutan fuera del núcleo, pero que permiten revisar outputs sin alterar la lógica.\",\n  \"textMarkdown\": \"## ⚙️🛠 scripts/\\nSubsistema de análisis auxiliar post-ejecución.\\n\\n### Parte de:\\n- --- Codigo\\n\\n### Usa:\\n- 🧾 Módulo de salida (writer)\\n- ⚙️🧪 tests/\\n- ⚙️🧬 src/\\n\\n### Requiere:\\n- 🗂 Calidad del Código\\n\\n### Define:\\n- ⚙️🛠 scripts/tools\\n- ⚙️🛠 scripts/stats\\n- ⚙️🛠 scripts/validate\\n\\n---\\n> Este subsistema permite observar, validar y analizar resultados sin tocar el núcleo lógico. Su diseño mantiene el sistema limpio y desacoplado, respetando el principio KISS y fomentando una evolución trazable.\"\n}\n{\n  \"section\": \"🧬 scripts/ – Sistema Digestivo Auxiliar\",\n  \"descripcion\": \"Contiene herramientas externas al núcleo funcional que permiten observar, analizar y validar los datos procesados. Actúa como un sistema auxiliar que complementa la excreción informacional sin modificar la lógica principal.\"\n}\n{\n  \"subsection\": \"🧠 Rol Biológico\",\n  \"analogía\": \"Sistema Digestivo Secundario\",\n  \"funcion\": \"Preprocesar, verificar o analizar salidas de datos generadas por el núcleo del sistema\",\n  \"utilidad\": \"Permite evaluar resultados, hacer debug o extraer estadísticas sin alterar el flujo interno\"\n}\n{\n  \"subsection\": \"📦 Archivos Clave en scripts/\",\n  \"scripts\": [\n    {\n      \"archivo\": \"scripts/[nombre]_tools.sh\",\n      \"descripcion\": \"Comandos auxiliares para visualizar y depurar salidas (por ejemplo, con jq, grep, awk)\"\n    },\n    {\n      \"archivo\": \"scripts/[nombre]_stats.sh\",\n      \"descripcion\": \"Resumen cuantitativo de las salidas: conteo, distribución, métricas por campo\"\n    },\n    {\n      \"archivo\": \"scripts/[nombre]_validate.sh\",\n      \"descripcion\": \"Validación externa de estructura o campos críticos antes de pasar a otros sistemas\"\n    }\n  ]\n}\n{\n  \"subsection\": \"🔁 Integración con otros sistemas\",\n  \"conexiones\": [\n    {\n      \"conecta_con\": \"🧾 Módulo de salida (writer)\",\n      \"motivo\": \"Permite inspeccionar o validar el output inmediatamente después de su generación\"\n    },\n    {\n      \"conecta_con\": \"🌐 Sistema CI/CD o workflows automáticos\",\n      \"motivo\": \"Se puede ejecutar como paso de validación previa a releases o despliegues\"\n    },\n    {\n      \"conecta_con\": \"👁️ Usuario técnico\",\n      \"motivo\": \"Facilita la auditoría visual desde la terminal sin necesidad de herramientas gráficas\"\n    }\n  ]\n}\n","title":"⚙️🛠 scripts/","modified":"20250531040136560","tags":"[[⚙️🛠 scripts/]] [[--- Codigo]]","tmap.id":"0d632de4-5701-4d2d-be06-940322406f0c","type":"application/json"},{"created":"20250414234000289","text":"{\n  \"title\": \"🎯 1. Objetivos\",\n  \"id\": \"🎯 1. Objetivos\",\n  \"tags\": [\n    \"🎯 1. Objetivos\",\n    \"🎯 2. Requisitos\",\n    \"🎯 3. DOFA\",\n    \"🎯 6. Componentes\",\n    \"🎯 8. Estructura\",\n    \"--- 🎯 Detalles del proyecto\",\n    \"--- 🗂 Principios de programación\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"🎯 2. Requisitos\",\n      \"🎯 8. Estructura\",\n      \"🎯 6. Componentes\"\n    ],\n    \"usa\": [\n      \"🎯 3. DOFA\",\n      \"🎯 9. Plan de desarrollo\",\n      \"🎯 Espectros de desarrollo\"\n    ],\n    \"requiere\": [\n      \"--- 🎯 Detalles del proyecto\"\n    ],\n    \"parte_de\": [\n      \"--- 🎯 Detalles del proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler establece el marco de intención del sistema: qué resuelve, para quién, y cómo. Sus objetivos guían los requisitos, componentes, y la estructura funcional. Se conecta directamente al diagnóstico, al plan de desarrollo y a la arquitectura general.\",\n  \"textMarkdown\": \"## 🎯 1. Objetivos\\n\\nDefine el propósito general y específico del sistema. Estos objetivos estructuran lo que será requerido, diseñado, probado e implementado.\\n\\n### Define:\\n- 🎯 2. Requisitos\\n- 🎯 8. Estructura\\n- 🎯 6. Componentes\\n\\n### Usa:\\n- 🎯 3. DOFA\\n- 🎯 9. Plan de desarrollo\\n- 🎯 Espectros de desarrollo\\n\\n### Requiere:\\n- --- 🎯 Detalles del proyecto\\n\\n### Parte de:\\n- --- 🎯 Detalles del proyecto\\n\\n---\\n> Este nodo funciona como semilla estratégica: orienta todo lo que vendrá después desde una lógica funcional, técnica y medible.\"\n}\n{\n  \"section\": \"📄 Objetivos y Alcance del Proyecto\",\n  \"subsection\": \"🎯 Objetivo General\",\n  \"contenido\": \"[Nombre del Proyecto] tiene como propósito: [frase funcional precisa, centrada en lo que transforma o resuelve el sistema]. Este proceso no realiza [lo que no hace], sino que [acción estructural que sí realiza] para [propósito final técnico].\"\n}\n{\n  \"section\": \"📄 Objetivos y Alcance del Proyecto\",\n  \"subsection\": \"🧱 Objetivos Específicos\",\n  \"items\": [\n    \"Ingestar [tipo de entrada esperada, ej. archivos, señales, datos de usuario]\",\n    \"Soportar estructuras [planas / jerárquicas / mixtas]\",\n    \"Transformar la entrada en [formato de salida objetivo: .jsonl, .csv, .sql...]\",\n    \"Normalizar campos esenciales: [campos clave según el dominio]\",\n    \"Permitir consumo por [sistemas objetivo: IA, dashboards, ETL...]\",\n    \"Integrarse con [nombre del ecosistema posterior, si aplica]\",\n    \"Ofrecer un CLI / API / servicio portable, usable en CI/CD o despliegues automatizados\"\n  ]\n}\n{\n  \"section\": \"📦 Alcance del Proyecto (versión inicial)\",\n  \"items\": [\n    {\"elemento\": \"✅ Entrada soportada\", \"alcance\": \"[tipo de archivo o estructura válida]\"},\n    {\"elemento\": \"✅ Salida generada\", \"alcance\": \"[formato y finalidad de la salida]\"},\n    {\"elemento\": \"✅ Procesamiento básico\", \"alcance\": \"[tipo de transformación que realiza]\"},\n    {\"elemento\": \"✅ Interfaz disponible\", \"alcance\": \"[CLI, API REST, Web UI, etc.]\"},\n    {\"elemento\": \"✅ Compatibilidad\", \"alcance\": \"[otros sistemas con los que se comunica]\"},\n    {\"elemento\": \"🔜 Entradas futuras\", \"alcance\": \"[otros formatos o fuentes que se planean soportar]\"},\n    {\"elemento\": \"🔜 Procesamiento avanzado\", \"alcance\": \"[procesos que se delegan o están fuera de alcance inicial]\"},\n    {\"elemento\": \"🔜 Interfaz gráfica\", \"alcance\": \"No contemplada en esta fase (si aplica)\"}\n  ]\n}\n{\n  \"section\": \"🧠 Justificación\",\n  \"contenido\": \"[Problema concreto que resuelve el sistema y por qué es relevante en contextos reales. Enfocado a eficiencia, compatibilidad, estructuración o accesibilidad para otras herramientas.]\"\n}\n{\n  \"section\": \"🚀 Resultado Esperado\",\n  \"contenido\": \"[Descripción técnica de la salida final, incluyendo formato, estructura y finalidad en términos de integración, consumo o reutilización.]\"\n}\n","tags":"[[🎯 1. Objetivos]] [[🎯 2. Requisitos]] [[🎯 8. Estructura]] [[🎯 3. DOFA]] [[🎯 6. Componentes]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]]","title":"🎯 1. Objetivos","modified":"20250531040312390","text/x-markdown":"","type":"application/json","color":"#00c3db","tmap.id":"a30a6844-bece-4f9c-add6-6f2d45090b42"},{"created":"20250414235517306","text":"{\n  \"title\": \"🎯 2. Requisitos\",\n  \"id\": \"🎯 2. Requisitos\",\n  \"tags\": [\n    \"🎯 2. Requisitos\",\n    \"🎯 4. Flujo de interaccion\",\n    \"🎯 8. Estructura\",\n    \"🎯 6. Componentes\",\n    \"--- 🎯 Detalles del proyecto\",\n    \"--- 🗂 Principios de programación\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"🎯 4. Flujo de interaccion\",\n      \"🎯 8. Estructura\",\n      \"🎯 6. Componentes\"\n    ],\n    \"usa\": [\n      \"🎯 1. Objetivos\",\n      \"🎯 3. DOFA\",\n      \"🎯 9. Plan de desarrollo\"\n    ],\n    \"requiere\": [\n      \"🗂 Calidad del Código\",\n      \"🗂 Usabilidad y Robustez\"\n    ],\n    \"parte_de\": [\n      \"--- 🎯 Detalles del proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler traduce los objetivos del proyecto en condiciones específicas, técnicas y verificables. Define qué debe hacer el sistema, cómo debe comportarse y bajo qué criterios se valida su funcionalidad.\",\n  \"textMarkdown\": \"## 🎯 2. Requisitos\\n\\nEste nodo traduce objetivos en condiciones que guían la arquitectura, flujo y validaciones.\\n\\n### Define:\\n- 🎯 4. Flujo de interaccion\\n- 🎯 8. Estructura\\n- 🎯 6. Componentes\\n\\n### Usa:\\n- 🎯 1. Objetivos\\n- 🎯 3. DOFA\\n- 🎯 9. Plan de desarrollo\\n\\n### Requiere:\\n- 🗂 Calidad del Código\\n- 🗂 Usabilidad y Robustez\\n\\n### Parte de:\\n- --- 🎯 Detalles del proyecto\\n\\n---\\n> Este tiddler constituye el contrato técnico del sistema. Todo lo que se desarrolla, se valida o se prueba debe estar sustentado en uno de estos requisitos.\"\n}\n{\n  \"section\": \"✅ Requerimientos Funcionales\",\n  \"items\": [\n    {\"id\": \"RF-01\", \"requisito\": \"El sistema debe aceptar como entrada [tipo de archivo, fuente o señal esperada].\"},\n    {\"id\": \"RF-02\", \"requisito\": \"El sistema debe procesar cada unidad de entrada como [unidad mínima de trabajo].\"},\n    {\"id\": \"RF-03\", \"requisito\": \"El sistema debe generar [tipo de salida esperada], con [estructura específica].\"},\n    {\"id\": \"RF-04\", \"requisito\": \"Debe extraer campos clave como [campo1, campo2, campo3].\"},\n    {\"id\": \"RF-05\", \"requisito\": \"Debe normalizar los campos y asegurar consistencia en [aspectos específicos].\"},\n    {\"id\": \"RF-06\", \"requisito\": \"El CLI debe permitir configuración mediante [flags o parámetros específicos].\"}\n  ]\n}\n{\n  \"section\": \"⚙️ Requerimientos No Funcionales\",\n  \"items\": [\n    {\"id\": \"RNF-01\", \"requisito\": \"Debe ejecutar tareas comunes en menos de [tiempo] con hasta [n] elementos.\"},\n    {\"id\": \"RNF-02\", \"requisito\": \"Debe compilarse o ejecutarse sin dependencias externas.\"},\n    {\"id\": \"RNF-03\", \"requisito\": \"Debe seguir convenciones del lenguaje o framework elegido (estilo, formato, lint).\"},\n    {\"id\": \"RNF-04\", \"requisito\": \"Debe funcionar completamente offline.\"}\n  ]\n}\n{\n  \"section\": \"💻 Requerimientos de Software\",\n  \"items\": [\n    {\"id\": \"RS-01\", \"requisito\": \"Lenguaje: [versión mínima requerida]\"},\n    {\"id\": \"RS-02\", \"requisito\": \"Compatibilidad con sistemas operativos: [lista]\"},\n    {\"id\": \"RS-03\", \"requisito\": \"Entorno de desarrollo sugerido: [editores o herramientas]\"},\n    {\"id\": \"RS-04\", \"requisito\": \"(Opcional) Script de automatización para tareas comunes (build/test/run)\"}\n  ]\n}\n{\n  \"section\": \"🧑‍💻 Requerimientos Técnicos\",\n  \"items\": [\n    {\"id\": \"RT-01\", \"requisito\": \"Estructura modular del código en carpetas como cmd/, internal/, parser/.\"},\n    {\"id\": \"RT-02\", \"requisito\": \"Modelado fuerte de datos mediante structs/clases.\"},\n    {\"id\": \"RT-03\", \"requisito\": \"Manejo explícito de errores en entradas, salidas y formatos.\"},\n    {\"id\": \"RT-04\", \"requisito\": \"Uso de identificadores únicos o legibles cuando sea necesario (slugs, UUIDs).\"}\n  ]\n}\n{\n  \"section\": \"📦 Librerías Utilizadas\",\n  \"items\": [\n    {\"uso\": \"[componente o propósito]\", \"libreria\": \"[nombre de la librería o módulo]\"},\n    {\"uso\": \"[manejo de archivos, flags, estructuras]\", \"libreria\": \"[estándar o externo]\"}\n  ]\n}\n{\n  \"section\": \"✅ Requerimientos de Pruebas\",\n  \"items\": [\n    {\"id\": \"RP-01\", \"requisito\": \"Debe incluir pruebas unitarias para cubrir al menos [porcentaje o cantidad mínima].\"},\n    {\"id\": \"RP-02\", \"requisito\": \"Validación de formatos de salida con [herramienta o script externo].\"},\n    {\"id\": \"RP-03\", \"requisito\": \"Verificación específica de [caso de uso o campo clave].\"},\n    {\"id\": \"RP-04\", \"requisito\": \"Asegurar generación correcta de [campo derivado o estructurado].\"}\n  ]\n}\n{\n  \"section\": \"🧪 Requisitos de Calidad\",\n  \"items\": [\n    {\"id\": \"RC-01\", \"requisito\": \"El código debe estar formateado y libre de errores de estilo (ej. gofmt, linter).\"},\n    {\"id\": \"RC-02\", \"requisito\": \"El CLI debe ofrecer ayuda y documentación mínima integrada.\"},\n    {\"id\": \"RC-03\", \"requisito\": \"Manejo de errores con mensajes explícitos y no crípticos.\"},\n    {\"id\": \"RC-04\", \"requisito\": \"La salida estructurada debe ser validable con herramientas estándar (jq, jsonlint, etc).\"}\n  ]\n}\n{\n  \"section\": \"🔐 Requisitos de Seguridad\",\n  \"items\": [\n    {\"id\": \"SEC-01\", \"requisito\": \"No se debe ejecutar ni interpretar código proveniente de la entrada.\"},\n    {\"id\": \"SEC-02\", \"requisito\": \"La entrada debe ser verificada como válida antes de procesarla.\"},\n    {\"id\": \"SEC-03\", \"requisito\": \"Evitar sobrescritura de archivos sin confirmación o control del usuario.\"},\n    {\"id\": \"SEC-04\", \"requisito\": \"No se debe permitir acceso a rutas absolutas o externas sin autorización.\"}\n  ]\n}\n{\n  \"section\": \"🚀 Tecnologías Base\",\n  \"items\": [\n    {\"area\": \"Lenguaje\", \"tecnologia\": \"[Go, Python, Rust, etc.]\"},\n    {\"area\": \"Entrada\", \"tecnologia\": \"[formato estructurado esperado, ej. .json, .csv, .md]\"},\n    {\"area\": \"Salida\", \"tecnologia\": \"[formato estructurado producido]\"},\n    {\"area\": \"Interfaz\", \"tecnologia\": \"[CLI, REST API, Web UI, etc.]\"},\n    {\"area\": \"Integración\", \"tecnologia\": \"[otros módulos, pipelines o frameworks conectados]\"}\n  ]\n}\n","title":"🎯 2. Requisitos","modified":"20250531040425976","type":"application/json","tags":"[[🎯 2. Requisitos]] [[🎯 8. Estructura]] [[🎯 4. Flujo de interaccion]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]]","color":"#00c3db","tmap.id":"b5be6915-32c3-4468-b4c2-768185bb58eb"},{"created":"20250417011018809","text":"{\n  \"title\": \"🎯 3. DOFA\",\n  \"id\": \"🎯 3. DOFA\",\n  \"tags\": [\n    \"🎯 3. DOFA\",\n    \"🎯 2. Requisitos\",\n    \"🎯 5. Arquitectura\",\n    \"🎯 9. Plan de desarrollo\",\n    \"--- 🎯 Detalles del proyecto\",\n    \"--- 🗂 Principios de programación\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"🎯 Estrategia DOFA resumida\",\n      \"🎯 9. Plan de desarrollo\"\n    ],\n    \"usa\": [\n      \"🎯 1. Objetivos\",\n      \"🎯 2. Requisitos\",\n      \"🎯 5. Arquitectura\"\n    ],\n    \"requiere\": [\n      \"--- 🎯 Detalles del proyecto\"\n    ],\n    \"parte_de\": [\n      \"--- 🎯 Detalles del proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler contiene el análisis DOFA del sistema. Examina fortalezas, debilidades, oportunidades y amenazas desde una perspectiva funcional y estratégica. Genera una estrategia priorizada de acción que impacta la planificación y diseño técnico.\",\n  \"textMarkdown\": \"## 🎯 3. DOFA\\n\\nDiagnóstico estratégico del sistema.\\n\\n### Define:\\n- 🎯 Estrategia DOFA resumida\\n- 🎯 9. Plan de desarrollo\\n\\n### Usa:\\n- 🎯 1. Objetivos\\n- 🎯 2. Requisitos\\n- 🎯 5. Arquitectura\\n\\n### Requiere:\\n- --- 🎯 Detalles del proyecto\\n\\n### Parte de:\\n- --- 🎯 Detalles del proyecto\\n\\n---\\n> Este tiddler es una herramienta viva para evaluar riesgos, oportunidades y capacidades del sistema. Genera conocimiento que alimenta decisiones de arquitectura, desarrollo y roadmap evolutivo.\"\n}\n{\n  \"section\": \"🧠 DOFA – Fortalezas\",\n  \"items\": [\n    {\"fortaleza\": \"[fortaleza identificada]\", \"potencializacion\": \"✅ [acción concreta que la potencia]\"}\n  ]\n}\n{\n  \"section\": \"❗ DOFA – Debilidades\",\n  \"items\": [\n    {\"debilidad\": \"[debilidad detectada]\", \"mitigacion\": \"✅ [estrategia para disminuir su impacto]\"}\n  ]\n}\n{\n  \"section\": \"🚀 DOFA – Oportunidades\",\n  \"items\": [\n    {\"oportunidad\": \"[oportunidad externa]\", \"potencializacion\": \"✅ [acción para aprovecharla]\"}\n  ]\n}\n{\n  \"section\": \"⚠️ DOFA – Amenazas\",\n  \"items\": [\n    {\"amenaza\": \"[riesgo externo o estructural]\", \"mitigacion\": \"✅ [acción preventiva o correctiva]\"}\n  ]\n}\n{\n  \"section\": \"🎯 Estrategia DOFA resumida\",\n  \"acciones\": [\n    {\"accion\": \"✅ [acción prioritaria a realizar]\", \"resultado\": \"[beneficio directo o mitigación]\"}\n  ]\n}\n{\n  \"section\": \"🧠 Reflexión final\",\n  \"formato\": \"estilo [tipo de enfoque reflexivo]\",\n  \"contenido\": \"[idea abstracta o principio estratégico]\",\n  \"metafora\": \"[metáfora técnica o conceptual que resuma el enfoque]\"\n}\n","tags":"[[🎯 3. DOFA]] [[🎯 2. Requisitos]] [[🎯 5. Arquitectura]] [[🎯 9. Plan de desarrollo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]]","title":"🎯 3. DOFA","modified":"20250531040523433","type":"application/json","color":"#00c3db","tmap.id":"4fd827ad-66c0-4733-b0fb-66a83f4ad752"},{"created":"20250417011202744","text":"{\n  \"title\": \"🎯 4. Flujo de interaccion\",\n  \"id\": \"🎯 4. Flujo de interaccion\",\n  \"tags\": [\n    \"🎯 4. Flujo de interaccion\",\n    \"🎯 2. Requisitos\",\n    \"⚙️🧪 tests/\",\n    \"🧾 Módulo de salida (writer)\",\n    \"--- 🎯 Detalles del proyecto\",\n    \"--- 🗂 Principios de programación\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"🧾 Módulo de salida (writer)\",\n      \"⚙️🧪 tests/\"\n    ],\n    \"usa\": [\n      \"🎯 2. Requisitos\",\n      \"⚙️🧬 src/\",\n      \"⚙️🛠 scripts/\"\n    ],\n    \"requiere\": [\n      \"🗂 Usabilidad y Robustez\",\n      \"🗂 Diseño\"\n    ],\n    \"parte_de\": [\n      \"--- 🎯 Detalles del proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler define los flujos de interacción del sistema, tanto con usuarios humanos como con procesos automatizados. Explica cómo los datos entran, se procesan, se validan y salen del sistema.\",\n  \"textMarkdown\": \"## 🎯 4. Flujo de Interacción\\n\\nModela las rutas funcionales entre usuario, sistema y ejecución técnica.\\n\\n### Define:\\n- 🧾 Módulo de salida (writer)\\n- ⚙️🧪 tests/\\n\\n### Usa:\\n- 🎯 2. Requisitos\\n- ⚙️🧬 src/\\n- ⚙️🛠 scripts/\\n\\n### Requiere:\\n- 🗂 Usabilidad y Robustez\\n- 🗂 Diseño\\n\\n### Parte de:\\n- --- 🎯 Detalles del proyecto\\n\\n---\\n> Este nodo garantiza que cada interacción, ya sea humana o automatizada, sea trazable, validada y coherente con el flujo lógico del sistema.\"\n}\n{\n  \"section\": \"🧠 Flujo 1 – Interacción Código ↔ Usuario\",\n  \"descripcion\": \"[Describe cómo un usuario interactúa con la herramienta desde la entrada de datos hasta obtener una salida útil]\"\n}\n{\n  \"flujo\": \"🎯 CLI → Usuario\",\n  \"etapas\": [\n    \"[1. Usuario prepara su archivo de entrada]\",\n    \"[2. Ejecuta el CLI con los argumentos necesarios]\",\n    \"[3. CLI procesa y muestra feedback]\",\n    \"[4. Se genera la salida esperada]\",\n    \"[5. El usuario reutiliza la salida o la visualiza]\",\n    \"✅ Fin: [objetivo logrado]\"\n  ]\n}\n{\n  \"subsection\": \"🧑‍💻 Interacciones visibles para el usuario\",\n  \"mensajes\": [\n    {\"momento\": \"[Caso de uso]\", \"mensaje\": \"[Mensaje mostrado por el CLI]\"}\n  ],\n  \"nota\": \"💡 Interfaz conversacional mínima para mejorar experiencia del usuario.\"\n}\n{\n  \"section\": \"⚙️ Flujo 2 – Interacción Código ↔ Binario\",\n  \"descripcion\": \"[Describe cómo el código fuente se transforma en ejecutable y cómo ese binario es utilizado en producción o CI/CD]\"\n}\n{\n  \"flujo\": \"🧱 Construcción y ejecución del binario\",\n  \"etapas\": [\n    \"[1. Estructura de código fuente]\",\n    \"[2. Comando de compilación]\",\n    \"[3. Binario generado]\",\n    \"[4. Binario ejecutado por usuario o CI/CD]\",\n    \"[5. Comportamiento en ejecución]\"\n  ]\n}\n{\n  \"subsection\": \"🛠️ ¿Por qué es importante este flujo?\",\n  \"propositos\": [\n    {\"concepto\": \"[Tema clave: Modularidad, Portabilidad, etc.]\", \"relevancia\": \"[Explicación de su importancia]\"}\n  ]\n}\n{\n  \"section\": \"🧠 Flujo CLI formal (argumentos y ejecución)\",\n  \"ejemplos\": [\n    {\"tipo\": \"[Forma de ejecución]\", \"comando\": \"[Comando real del CLI]\"}\n  ]\n}\n{\n  \"section\": \"✅ Resumen de Flujos\",\n  \"tabla\": [\n    {\"flujo\": \"[Nombre del flujo]\", \"funcion\": \"[Descripción de su propósito funcional]\"}\n  ]\n}\n","type":"application/json","title":"🎯 4. Flujo de interaccion","modified":"20250531040634574","tags":"[[🎯 4. Flujo de interaccion]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]]","color":"#00c3db","tmap.id":"72822a6f-abd7-4fd0-a517-5f3fd44caba1"},{"created":"20250417012641075","text":"{\n  \"title\": \"🎯 5. Arquitectura\",\n  \"id\": \"🎯 5. Arquitectura\",\n  \"tags\": [\n    \"🎯 5. Arquitectura\",\n    \"🎯 6. Componentes\",\n    \"🎯 7. Algoritmos y matematicas\",\n    \"🎯 8. Estructura\",\n    \"🎯 4. Flujo de interaccion\",\n    \"🎯 3. DOFA\",\n    \"--- 🎯 Detalles del proyecto\",\n    \"--- 🗂 Principios de programación\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"⚙️🧬 src/\",\n      \"🧾 Módulo de salida (writer)\",\n      \"🎯 6. Componentes\",\n      \"🎯 7. Algoritmos y matematicas\"\n    ],\n    \"usa\": [\n      \"🎯 1. Objetivos\",\n      \"🎯 2. Requisitos\",\n      \"🎯 3. DOFA\",\n      \"🎯 4. Flujo de interaccion\",\n      \"🎯 8. Estructura\"\n    ],\n    \"requiere\": [\n      \"🗂 Diseño\",\n      \"🗂 Modularidad y Estado\",\n      \"🗂 Usabilidad y Robustez\"\n    ],\n    \"parte_de\": [\n      \"--- 🎯 Detalles del proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler estructura el sistema en capas funcionales: interacción, lógica, datos, integración y seguridad transversal. Define qué hace cada capa, cómo se relacionan y qué módulos contiene. Es la base de diseño e implementación modular.\",\n  \"textMarkdown\": \"## 🎯 5. Arquitectura\\n\\nModelo de arquitectura en capas funcionales:\\n\\n### Define:\\n- ⚙️🧬 src/\\n- 🧾 Módulo de salida (writer)\\n- 🎯 6. Componentes\\n- 🎯 7. Algoritmos y matematicas\\n\\n### Usa:\\n- 🎯 1. Objetivos\\n- 🎯 2. Requisitos\\n- 🎯 3. DOFA\\n- 🎯 4. Flujo de interaccion\\n- 🎯 8. Estructura\\n\\n### Requiere:\\n- 🗂 Diseño\\n- 🗂 Modularidad y Estado\\n- 🗂 Usabilidad y Robustez\\n\\n### Parte de:\\n- --- 🎯 Detalles del proyecto\\n\\n---\\n> Esta arquitectura distribuye responsabilidades de forma coherente y trazable. Favorece la evolución semántica, la interoperabilidad, y la protección transversal del sistema.\"\n}\n{\n  \"section\": \"🧠 Arquitectura en Capas – [Nombre del Proyecto]\",\n  \"capa\": \"1. 🧑‍💻 Capa de Interacción con el Usuario\",\n  \"descripcion\": \"Gestiona cómo el usuario ejecuta y comunica con la herramienta desde CLI.\",\n  \"componentes\": [\n    \"[Archivo de entrada principal: main.go]\",\n    \"[Parámetros o flags del CLI: --input, --output]\",\n    \"[Mensajes: errores, ayuda, progreso, finalización]\"\n  ],\n  \"funciones\": [\n    \"Validar argumentos CLI\",\n    \"Mostrar mensajes comprensibles al usuario\",\n    \"Delegar tareas a la lógica interna\"\n  ],\n  \"nota\": \"✅ Esta capa debe ser intuitiva, robusta y amigable.\"\n}\n{\n  \"section\": \"🧠 Arquitectura en Capas – [Nombre del Proyecto]\",\n  \"capa\": \"2. 🧠 Capa de Lógica de Aplicación\",\n  \"descripcion\": \"Define las transformaciones, validaciones y operaciones principales del sistema.\",\n  \"componentes\": [\n    \"[parser.go, utils.go, lógica interna de procesamiento]\",\n    \"[Estructuras principales: structs, validaciones, helpers]\"\n  ],\n  \"funciones\": [\n    \"Procesar y transformar datos\",\n    \"Estandarizar salidas\",\n    \"Aplicar reglas del negocio\"\n  ],\n  \"nota\": \"✅ Aquí reside el motor lógico del sistema.\"\n}\n{\n  \"section\": \"🧠 Arquitectura en Capas – [Nombre del Proyecto]\",\n  \"capa\": \"3. 🗃 Capa de Datos\",\n  \"descripcion\": \"Define cómo se representan los datos internamente y cómo se leen/escriben desde el sistema.\",\n  \"componentes\": [\n    \"[Definiciones de modelos: structs de entrada/salida]\",\n    \"[Lectura desde archivos, escritura a formato final]\"\n  ],\n  \"funciones\": [\n    \"Parsear datos de entrada\",\n    \"Serializar salidas (ej. JSONL)\",\n    \"Gestionar errores de I/O\"\n  ],\n  \"nota\": \"✅ Interfaz con el mundo físico de archivos y datos.\"\n}\n{\n  \"section\": \"🧠 Arquitectura en Capas – [Nombre del Proyecto]\",\n  \"capa\": \"4. 🔗 Capa de Integración\",\n  \"descripcion\": \"Permite que el sistema sea utilizado como módulo autónomo o dentro de pipelines más amplios.\",\n  \"componentes\": [\n    \"[CLI con entradas/salidas estándar]\",\n    \"[Compatibilidad con otros lenguajes o sistemas]\",\n    \"[(Opcional) API REST o sockets en el futuro]\"\n  ],\n  \"funciones\": [\n    \"Permitir invocación desde otros entornos\",\n    \"Exportar formatos estandarizados\",\n    \"Mantener modularidad\"\n  ],\n  \"nota\": \"✅ Diseñada para interoperabilidad sin acoplamiento.\"\n}\n{\n  \"section\": \"🧠 Arquitectura en Capas – [Nombre del Proyecto]\",\n  \"capa\": \"5. 🔐 Capa de Seguridad (Transversal)\",\n  \"descripcion\": \"Garantiza el correcto comportamiento del sistema ante inputs maliciosos, errores, o mal uso.\",\n  \"componentes\": [\n    \"Validación de datos de entrada\",\n    \"Control de errores explícito\",\n    \"Prevención de ejecuciones o accesos no autorizados\",\n    \"Protección contra sobrescritura o pérdida de datos\"\n  ],\n  \"futuro\": [\n    \"Firmado o checksum de archivos\",\n    \"Modo seguro: --dry-run o --readonly\",\n    \"Auditoría de entradas procesadas\"\n  ],\n  \"nota\": \"✅ Esta capa atraviesa todas las demás para asegurar fiabilidad y confianza.\"\n}\n","type":"application/json","title":"🎯 5. Arquitectura","modified":"20250531040756456","tags":"[[🎯 5. Arquitectura]] [[🎯 6. Componentes]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[🎯 Espectros de desarrollo]] [[🎯 3. DOFA]] [[🎯 8. Estructura]] [[🎯 4. Flujo de interaccion]] [[🎯 7. Algoritmos y matematicas]] [[🎯 1. Objetivos]] [[🎯 9. Plan de desarrollo]] [[🎯 2. Requisitos]]","color":"#00c3db","tmap.id":"5350baec-c84e-487d-bd02-ea09e1cd5268"},{"created":"20250417013128906","text":"{\n  \"title\": \"🎯 6. Componentes\",\n  \"id\": \"🎯 6. Componentes\",\n  \"tags\": [\n    \"🎯 6. Componentes\",\n    \"🎯 2. Requisitos\",\n    \"🎯 5. Arquitectura\",\n    \"🎯 8. Estructura\",\n    \"🎯 7. Algoritmos y matematicas\",\n    \"--- 🎯 Detalles del proyecto\",\n    \"--- 🗂 Principios de programación\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"⚙️🧬 src/\",\n      \"⚙️🛠 scripts/\"\n    ],\n    \"usa\": [\n      \"🎯 2. Requisitos\",\n      \"🎯 5. Arquitectura\",\n      \"🎯 7. Algoritmos y matematicas\"\n    ],\n    \"requiere\": [\n      \"🗂 Diseño\",\n      \"🗂 Modularidad y Estado\"\n    ],\n    \"parte_de\": [\n      \"--- 🎯 Detalles del proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler describe los componentes activos del sistema. Cada archivo fuente es tratado como un gen con propósito, tipo y función. El sistema evoluciona añadiendo o transformando estos componentes en nuevas vueltas helicoidales.\",\n  \"textMarkdown\": \"## 🎯 6. Componentes\\n\\nMapa de archivos fuente activos del sistema, descritos como genes funcionales.\\n\\n### Define:\\n- ⚙️🧬 src/\\n- ⚙️🛠 scripts/\\n\\n### Usa:\\n- 🎯 2. Requisitos\\n- 🎯 5. Arquitectura\\n- 🎯 7. Algoritmos y matematicas\\n\\n### Requiere:\\n- 🗂 Diseño\\n- 🗂 Modularidad y Estado\\n\\n### Parte de:\\n- --- 🎯 Detalles del proyecto\\n\\n---\\n> Este nodo permite observar y dirigir la evolución del sistema a través de sus archivos. Cada vuelta incorpora nuevos genes o modifica existentes, manteniendo trazabilidad funcional.\"\n}\n{\n  \"section\": \"🧬 Genes funcionales\",\n  \"carpeta\": \"📁 [carpeta_principal]/\",\n  \"descripcion\": \"[Descripción general del rol de esta carpeta: orquestación, lógica, entrada/salida, utilidades, modelos...]\",\n  \"genes\": [\n    {\n      \"archivo\": \"[archivo1.ext]\",\n      \"funcion\": \"[Breve descripción de lo que hace este archivo: entrada, transformación, limpieza, exportación, etc.]\"\n    },\n    {\n      \"archivo\": \"[archivo2.ext]\",\n      \"funcion\": \"[Función clave o contribución de este archivo al sistema]\"\n    }\n  ],\n  \"nota\": \"✅ [Comentario o recomendación sobre esta carpeta: propósito, buenas prácticas, etc.]\"\n}\n\n{\n  \"section\": \"🧬 Tabla resumen de genes\",\n  \"tabla\": [\n    {\n      \"archivo\": \"[archivo1.ext]\",\n      \"tipo\": \"[Orquestador | Transformador | Entrada | Salida | Utilidad | Modelo]\",\n      \"funcion\": \"[Síntesis breve del rol que cumple]\"\n    }\n  ]\n}\n\n{\n  \"section\": \"🧠 Evolución helicoidal futura\",\n  \"subsection\": \"Genes en expansión\",\n  \"futuros\": [\n    {\n      \"archivo\": \"[futuro1.ext]\",\n      \"que_haria\": \"[Qué función incorporaría o qué problema solucionaría este nuevo archivo]\"\n    }\n  ]\n}\n\n{\n  \"section\": \"🔬 Reflexión final\",\n  \"estilo\": \"Mosston\",\n  \"contenido\": \"[Frase o principio pedagógico sobre el diseño modular y evolutivo del sistema]\"\n}\n","type":"application/json","title":"🎯 6. Componentes","modified":"20250531040843267","tags":"[[🎯 6. Componentes]] [[🎯 2. Requisitos]] [[🎯 8. Estructura]] [[🎯 7. Algoritmos y matematicas]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]]","color":"#00c3db","tmap.id":"05ad41c1-67f3-4447-8237-6e3ebc92fdcd"},{"created":"20250417013235155","text":"{\n  \"title\": \"🎯 7. Algoritmos y matematicas\",\n  \"id\": \"🎯 7. Algoritmos y matematicas\",\n  \"tags\": [\n    \"🎯 7. Algoritmos y matematicas\",\n    \"🎯 6. Componentes\",\n    \"🎯 2. Requisitos\",\n    \"🎯 8. Estructura\",\n    \"--- 🎯 Detalles del proyecto\",\n    \"--- 🗂 Principios de programación\",\n    \"🎯 5. Arquitectura\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"🧬 Representación semántica de datos\",\n      \"📐 Estructuras internas del flujo\"\n    ],\n    \"usa\": [\n      \"🎯 2. Requisitos\",\n      \"🎯 5. Arquitectura\",\n      \"🎯 6. Componentes\"\n    ],\n    \"requiere\": [\n      \"🗂 Evolución Semántica\",\n      \"🗂 Epigenética Computacional\"\n    ],\n    \"parte_de\": [\n      \"--- 🎯 Detalles del proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler contiene los algoritmos y fundamentos matemáticos que impulsan el sistema. Define estructuras de datos, transformaciones, métricas e inferencias semánticas.\",\n  \"textMarkdown\": \"## 🎯 7. Algoritmos y Matemáticas\\n\\nDefine la lógica formal y computacional que gobierna el sistema.\\n\\n### Define:\\n- 🧬 Representación semántica de datos\\n- 📐 Estructuras internas del flujo\\n\\n### Usa:\\n- 🎯 2. Requisitos\\n- 🎯 5. Arquitectura\\n- 🎯 6. Componentes\\n\\n### Requiere:\\n- 🗂 Evolución Semántica\\n- 🗂 Epigenética Computacional\\n\\n### Parte de:\\n- --- 🎯 Detalles del proyecto\\n\\n---\\n> Este nodo encapsula el alma lógica del sistema. Sus algoritmos no solo procesan datos: interpretan y transforman conocimiento semántico, alineado con principios biológicos de adaptación y evolución.\"\n}\n{\n  \"section\": \"📚 Algoritmos y Fundamentos Matemáticos\",\n  \"nombre\": \"\",\n  \"descripcion\": \"\",\n  \"aplicacion_en_proyecto\": \"\",\n  \"tipo_dato\": \"\",\n  \"estructura_dato\": \"\",\n  \"implicacion_matematica\": \"\",\n  \"algoritmos_utilizados\": [],\n  \"categoria\": \"\",  \n  \"dependencias\": [],\n  \"riesgos_si_falla\": \"\",\n  \"potenciales_mejoras\": \"\",\n  \"notas\": \"\"\n}\n","type":"application/json","title":"🎯 7. Algoritmos y matematicas","modified":"20250531040934780","tags":"[[🎯 7. Algoritmos y matematicas]] [[🎯 6. Componentes]] [[🎯 2. Requisitos]] [[🎯 8. Estructura]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[🎯 5. Arquitectura]]","color":"#00c3db","tmap.id":"b6627e77-1d0b-450e-94c9-a89ed66a8b66"},{"created":"20250417015323156","text":"{\n  \"title\": \"🎯 8. Estructura\",\n  \"id\": \"🎯 8. Estructura\",\n  \"tags\": [\n    \"🎯 8. Estructura\",\n    \"🎯 1. Objetivos\",\n    \"🎯 2. Requisitos\",\n    \"🎯 5. Arquitectura\",\n    \"🎯 6. Componentes\",\n    \"--- 🎯 Detalles del proyecto\",\n    \"--- 🗂 Principios de programación\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"⚙️🧬 src/\",\n      \"⚙️🛠 scripts/\",\n      \"🧾 Módulo de salida (writer)\"\n    ],\n    \"usa\": [\n      \"🎯 1. Objetivos\",\n      \"🎯 2. Requisitos\",\n      \"🎯 5. Arquitectura\",\n      \"🎯 6. Componentes\"\n    ],\n    \"requiere\": [\n      \"🗂 Diseño\",\n      \"🗂 Modularidad y Estado\"\n    ],\n    \"parte_de\": [\n      \"--- 🎯 Detalles del proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler define la estructura operativa del proyecto. Organiza directorios y archivos en función de sus responsabilidades, siguiendo un modelo funcional-modular. Es base para automatización, trazabilidad y escalabilidad.\",\n  \"textMarkdown\": \"## 🎯 8. Estructura\\n\\nModelo físico y modular de organización del código fuente.\\n\\n### Define:\\n- ⚙️🧬 src/\\n- ⚙️🛠 scripts/\\n- 🧾 Módulo de salida (writer)\\n\\n### Usa:\\n- 🎯 1. Objetivos\\n- 🎯 2. Requisitos\\n- 🎯 5. Arquitectura\\n- 🎯 6. Componentes\\n\\n### Requiere:\\n- 🗂 Diseño\\n- 🗂 Modularidad y Estado\\n\\n### Parte de:\\n- --- 🎯 Detalles del proyecto\\n\\n---\\n> Este nodo transforma la lógica abstracta en estructuras físicas. Cada carpeta y archivo tiene propósito semántico claro y está alineado con las capas de arquitectura y la evolución helicoidal.\"\n}\n{\"section\": \"📂 Estructura General del Proyecto\", \"modelo\": \"Modelo Funcional-Modular\", \"descripcion\": \"La estructura refleja la organización lógica de funciones y responsabilidades del sistema, siguiendo un patrón claro, escalable y comprensible para nuevos colaboradores o sistemas automatizados.\"}\n\n{\"elemento\": \"🔧 Raíz del Proyecto\", \"tipo\": \"directorio\", \"funcion\": \"Contiene archivos de configuración, documentación general y punto de entrada del código\", \"ejemplos\": [\"README.md\", \"Makefile\", \"package.json\", \"go.mod\", \".gitignore\"]}\n\n{\"elemento\": \"📁 src/\", \"tipo\": \"directorio\", \"funcion\": \"Código fuente principal del proyecto. Puede estar dividido en módulos o capas (controller, service, domain...)\", \"ejemplos\": [\"src/main.py\", \"src/core/\", \"src/app/\"]}\n\n{\"elemento\": \"📁 cmd/ (opcional)\", \"tipo\": \"directorio\", \"funcion\": \"Punto de entrada para ejecutables o CLI. Puede haber varios subcomandos si el proyecto los requiere.\", \"ejemplos\": [\"cmd/main.go\", \"cmd/serve.go\"]}\n\n{\"elemento\": \"📁 internal/ o utils/\", \"tipo\": \"directorio\", \"funcion\": \"Funciones de utilidad o helpers internos no expuestos públicamente.\", \"ejemplos\": [\"internal/date.go\", \"utils/validators.py\"]}\n\n{\"elemento\": \"📁 models/ o domain/\", \"tipo\": \"directorio\", \"funcion\": \"Define las estructuras de datos principales: modelos, DTOs, entidades del dominio.\", \"ejemplos\": [\"models/user.go\", \"domain/tiddler.ts\"]}\n\n{\"elemento\": \"📁 io/ o adapters/\", \"tipo\": \"directorio\", \"funcion\": \"Manejo de entrada y salida: lectura/escritura de archivos, base de datos o APIs externas.\", \"ejemplos\": [\"io/reader.go\", \"adapters/jsonParser.ts\"]}\n\n{\"elemento\": \"📁 output/ o dist/\", \"tipo\": \"directorio\", \"funcion\": \"Archivos generados por el sistema, resultados procesados o compilados.\", \"ejemplos\": [\"output/report.jsonl\", \"dist/bundle.js\"]}\n\n{\"elemento\": \"📁 input/\", \"tipo\": \"directorio\", \"funcion\": \"Datos de entrada utilizados para prueba, desarrollo o demostración.\", \"ejemplos\": [\"input/sample.json\"]}\n\n{\"elemento\": \"📁 scripts/\", \"tipo\": \"directorio\", \"funcion\": \"Automatizaciones o herramientas auxiliares en shell, Python, jq, etc.\", \"ejemplos\": [\"scripts/deploy.sh\", \"scripts/jq_tools.sh\"]}\n\n{\"elemento\": \"📁 docs/\", \"tipo\": \"directorio\", \"funcion\": \"Documentación técnica, objetivos del proyecto, manuales o justificaciones de diseño.\", \"ejemplos\": [\"docs/architecture.md\", \"docs/README_FR.md\"]}\n\n{\"elemento\": \"📁 tests/\", \"tipo\": \"directorio\", \"funcion\": \"Pruebas unitarias, de integración o end-to-end.\", \"ejemplos\": [\"tests/test_parser.py\", \"tests/integration/\"]}\n\n{\"elemento\": \"🧪 Configuración de CI/CD\", \"tipo\": \"archivo/directorio\", \"funcion\": \"Automatización de pruebas, builds o despliegues.\", \"ejemplos\": [\".github/workflows/\", \".gitlab-ci.yml\", \"Jenkinsfile\"]}\n","type":"application/json","title":"🎯 8. Estructura","modified":"20250531041038260","tags":"[[🎯 8. Estructura]] [[🎯 2. Requisitos]] [[🎯 1. Objetivos]] [[🎯 9. Plan de desarrollo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]]","icon":":construction_site: ","color":"#00c3db","tmap.id":"79fb44c0-068d-410c-ab14-dc39ca4788ac"},{"created":"20250417015650783","text":"{\n  \"title\": \"🎯 9. Plan de desarrollo\",\n  \"id\": \"🎯 9. Plan de desarrollo\",\n  \"tags\": [\n    \"🎯 9. Plan de desarrollo\",\n    \"--- 🎯 Detalles del proyecto\",\n    \"--- 🗂 Principios de programación\",\n    \"--- 🌀 Helices de desarrollo\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"--- 🌀 Helices de desarrollo\"\n    ],\n    \"usa\": [\n      \"🎯 1. Objetivos\",\n      \"🎯 2. Requisitos\",\n      \"🎯 3. DOFA\",\n      \"🎯 5. Arquitectura\",\n      \"🎯 6. Componentes\",\n      \"🎯 8. Estructura\"\n    ],\n    \"requiere\": [\n      \"🗂 Diseño\",\n      \"🗂 Modularidad y Estado\",\n      \"🗂 Evolución Semántica\"\n    ],\n    \"parte_de\": [\n      \"--- 🎯 Detalles del proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler define la estrategia de evolución helicoidal del sistema. Cada ciclo (V1–V5) introduce funcionalidad, validación, interfaces, automatización u optimización. Es la guía adaptativa para que el sistema crezca como organismo, no como torre.\",\n  \"textMarkdown\": \"## 🎯 9. Plan de desarrollo\\n\\nModelo helicoidal de evolución del sistema por ciclos madurativos.\\n\\n### Define:\\n- --- 🌀 Helices de desarrollo\\n\\n### Usa:\\n- 🎯 1. Objetivos\\n- 🎯 2. Requisitos\\n- 🎯 3. DOFA\\n- 🎯 5. Arquitectura\\n- 🎯 6. Componentes\\n- 🎯 8. Estructura\\n\\n### Requiere:\\n- 🗂 Diseño\\n- 🗂 Modularidad y Estado\\n- 🗂 Evolución Semántica\\n\\n### Parte de:\\n- --- 🎯 Detalles del proyecto\\n\\n---\\n> Cada ciclo es una vuelta vital en la espiral del proyecto. No se escala por acumulación, sino por integración funcional progresiva.\"\n}\n{\"section\": \"🌀 Plan de Desarrollo General\", \"modelo\": \"Modelo Helicoidal\", \"descripcion\": \"Cada ciclo representa una fase natural de maduración en el proyecto: desde un núcleo funcional hasta una integración optimizada. El enfoque es modular, evolutivo y comprobable.\"}\n\n{\"ciclo\": \"V1 – Núcleo funcional mínimo\", \"objetivo\": \"Crear la estructura básica que demuestre el valor esencial del sistema.\", \"entregables\": [\n  {\"componente\": \"Punto de entrada\", \"descripcion\": \"Archivo, script o interfaz base para ejecutar el sistema.\"},\n  {\"componente\": \"Lógica esencial\", \"descripcion\": \"Funcionalidad principal mínima que demuestra el propósito del proyecto.\"},\n  {\"componente\": \"Estructura de carpetas\", \"descripcion\": \"Organización inicial del código y recursos.\"},\n  {\"componente\": \"Instrucciones básicas\", \"descripcion\": \"README o ayuda mínima para ejecutar el sistema.\"}\n], \"madurez\": \"🧪 Demuestra valor, no está validado ni optimizado.\"}\n\n{\"ciclo\": \"V2 – Validación estructural y reglas básicas\", \"objetivo\": \"Agregar estructuras internas, validaciones y pruebas mínimas.\", \"entregables\": [\n  {\"componente\": \"Validación de datos/entradas\", \"descripcion\": \"Revisión básica de errores, formatos o tipos esperados.\"},\n  {\"componente\": \"Modelo de datos o estructura interna\", \"descripcion\": \"Definición clara de cómo se representa y transforma la información.\"},\n  {\"componente\": \"Pruebas unitarias básicas\", \"descripcion\": \"Verificar el comportamiento esperado de funciones clave.\"}\n], \"madurez\": \"✅ Fiable en contexto controlado.\"}\n\n{\"ciclo\": \"V3 – Interfaz e interacción externa\", \"objetivo\": \"Hacer que el sistema sea accesible y usable por humanos o sistemas externos.\", \"entregables\": [\n  {\"componente\": \"CLI / GUI / API\", \"descripcion\": \"Interfaz para entrada/salida externa.\"},\n  {\"componente\": \"Mensajes útiles\", \"descripcion\": \"Errores claros, estados visibles, logs legibles.\"},\n  {\"componente\": \"Soporte para argumentos / parámetros\", \"descripcion\": \"Permitir configuración desde fuera.\"}\n], \"madurez\": \"👨‍💻 Usable por terceros sin editar el código.\"}\n\n{\"ciclo\": \"V4 – Portabilidad y automatización\", \"objetivo\": \"Asegurar que el sistema se pueda distribuir, reproducir y usar en diferentes entornos.\", \"entregables\": [\n  {\"componente\": \"Script de build / setup\", \"descripcion\": \"Facilita instalación o despliegue.\"},\n  {\"componente\": \"CI/CD o automatización mínima\", \"descripcion\": \"Compilación y pruebas en cada cambio.\"},\n  {\"componente\": \"Estandarización de entrada/salida\", \"descripcion\": \"Archivos o APIs predecibles.\"}\n], \"madurez\": \"⚙️ Preparado para integrarse y escalar.\"}\n\n{\"ciclo\": \"V5 – Extensión, métricas y optimización\", \"objetivo\": \"Abrir el sistema a nuevas funcionalidades, mejoras de rendimiento o análisis inteligente.\", \"entregables\": [\n  {\"componente\": \"Métricas internas\", \"descripcion\": \"Estadísticas, logs o dashboards sobre el uso del sistema.\"},\n  {\"componente\": \"Extensibilidad\", \"descripcion\": \"Hooks, flags, plugins o configuración avanzada.\"},\n  {\"componente\": \"Optimizaciones\", \"descripcion\": \"Reducción de tiempo, memoria o redundancias.\"}\n], \"madurez\": \"🔍 Listo para producción avanzada, investigación o expansión.\"}\n\n{\"section\": \"📊 Resumen por Ciclo\", \"tabla\": [\n  {\"ciclo\": \"V1\", \"foco\": \"Estructura + funcionalidad mínima\", \"madurez\": \"Demostración de valor\"},\n  {\"ciclo\": \"V2\", \"foco\": \"Validación + organización interna\", \"madurez\": \"Fiabilidad técnica inicial\"},\n  {\"ciclo\": \"V3\", \"foco\": \"Interacción externa clara\", \"madurez\": \"Usabilidad operativa\"},\n  {\"ciclo\": \"V4\", \"foco\": \"Distribución y automatización\", \"madurez\": \"Escalabilidad y mantenimiento\"},\n  {\"ciclo\": \"V5\", \"foco\": \"Optimización y expansión\", \"madurez\": \"Listo para evolución continua\"}\n]}\n\n{\"section\": \"🧠 Metáfora estructural\", \"contenido\": \"Un buen sistema no crece como una torre, sino como un organismo: cada parte nueva debe ser funcional, integrada y vital para el todo.\", \"analogía\": \"🧬 Cada ciclo es una nueva vuelta en la espiral evolutiva del proyecto.\"}\n","type":"application/json","title":"🎯 9. Plan de desarrollo","modified":"20250531041140189","tags":"[[🎯 9. Plan de desarrollo]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[--- 🌀 Helices de desarrollo]]","color":"#00c3db","tmap.id":"e5c8992c-a0fc-4b3c-a7ee-315a412d2516"},{"created":"20250417024025172","text":"{\n  \"title\": \"🎯 Espectros de desarrollo\",\n  \"id\": \"🎯 Espectros de desarrollo\",\n  \"tags\": [\n    \"🎯 Espectros de desarrollo\",\n    \"🎯🧬 0.1 Pre-Impacto\",\n    \"🎯🧬 0.2 Impacto\",\n    \"🎯🧬 0.3 Post-Impacto\",\n    \"--- 🎯 Detalles del proyecto\",\n    \"--- 🌀 Helices de desarrollo\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"🎯🧬 0.1 Pre-Impacto\",\n      \"🎯🧬 0.2 Impacto\",\n      \"🎯🧬 0.3 Post-Impacto\"\n    ],\n    \"usa\": [\n      \"🎯 9. Plan de desarrollo\",\n      \"🎯 8. Estructura\",\n      \"🎯 4. Flujo de interaccion\"\n    ],\n    \"requiere\": [\n      \"🗂 Evolución Semántica\",\n      \"🗂 Usabilidad y Robustez\"\n    ],\n    \"parte_de\": [\n      \"--- 🎯 Detalles del proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler define los espectros epigenéticos del sistema, que marcan las fases didácticas de desarrollo: Pre-Impacto, Impacto y Post-Impacto. Cada espectro guía una vuelta helicoidal del sistema, articulando intención, implementación y reflexión.\",\n  \"textMarkdown\": \"## 🎯 Espectros de desarrollo\\n\\nDefine el marco didáctico-epigenético que organiza el desarrollo en tres fases:\\n- 🎯🧬 0.1 Pre-Impacto\\n- 🎯🧬 0.2 Impacto\\n- 🎯🧬 0.3 Post-Impacto\\n\\n### Usa:\\n- 🎯 9. Plan de desarrollo\\n- 🎯 8. Estructura\\n- 🎯 4. Flujo de interaccion\\n\\n### Requiere:\\n- 🗂 Evolución Semántica\\n- 🗂 Usabilidad y Robustez\\n\\n### Parte de:\\n- --- 🎯 Detalles del proyecto\\n\\n---\\n> Este modelo permite desarrollar no solo funcionalidad, sino capacidad evolutiva. Cada espectro representa una vuelta viva de aprendizaje y adaptación sistémica.\"\n}\n{\n  \"section\": \"🌀 Espectro de Desarrollo\",\n  \"inspiracion\": \"Muska Mosston\",\n  \"descripcion\": \"Estructura didáctica, reflexiva y evolutiva aplicada al desarrollo de software, compatible con el modelo helicoidal-genético de OpenPages-Source.\"\n}\n{\n  \"principio\": \"1. 🧠 Facilita la metacognición técnica\",\n  \"descripcion\": \"Invita a pensar antes de escribir código. Convierte cada decisión técnica en un acto consciente.\",\n  \"preguntas_reflexivas\": [\n    \"¿Qué se necesita?\",\n    \"¿Por qué ahora?\",\n    \"¿Qué impacto tendrá?\"\n  ]\n}\n{\n  \"principio\": \"2. 🧬 Refuerza la analogía biológica del gen\",\n  \"descripcion\": \"Cada vuelta es como la activación de un gen, y el Espectro de Desarrollo modela su expresión contextual.\",\n  \"etapas\": [\n    {\n      \"etapa\": \"🎯🧬 Pre-Impacto\",\n      \"descripcion\": \"Condiciones de activación. Redactado gramaticalmente en tiempo futuro.\"\n    },\n    {\n      \"etapa\": \"🎯🧬 Impacto\",\n      \"descripcion\": \"Expresión del gen. Código, lógica, cambio. Redactado en tiempo presente.\"\n    },\n    {\n      \"etapa\": \"🎯🧬 Post-Impacto\",\n      \"descripcion\": \"Evaluación y aprendizaje. Redactado en tiempo pasado.\"\n    }\n  ],\n  \"nota\": \"Como en la epigenética: los genes se expresan según contexto, no por defecto.\"\n}\n{\n  \"principio\": \"3. 📈 Aumenta la trazabilidad sin sobrecargar\",\n  \"descripcion\": \"El Espectro de Desarrollo mejora la trazabilidad técnica y semántica sin ser invasivo.\",\n  \"beneficios\": [\n    \"Puede guardarse como markdown o jsonl para dashboards.\",\n    \"Provee contexto semántico para cada ciclo de cambio.\",\n    \"Se vincula a vueltas helicoidales como V2.R3.C1.\"\n  ]\n}\n{\n  \"principio\": \"4. 🔁 Promueve ciclos de mejora continua (CI/CD educativo)\",\n  \"descripcion\": \"Integra la reflexión en el pipeline: no solo codificamos y probamos, también aprendemos y documentamos.\",\n  \"aprendizaje_iterativo\": [\n    \"Lo aprendido\",\n    \"Lo que falló\",\n    \"Lo que podríamos haber hecho mejor\"\n  ],\n  \"resultado\": \"El pipeline se convierte en un entorno de crecimiento.\"\n}\n{\n  \"principio\": \"5. 🎓 Es didáctico para colaboradores y reclutadores\",\n  \"descripcion\": \"Facilita el onboarding y la evaluación externa del proyecto.\",\n  \"beneficios\": [\n    \"Permite entender la intención antes del código.\",\n    \"Expone un historial semántico del desarrollo.\",\n    \"Guía a colaboradores dentro de un marco estructurado y no improvisado.\"\n  ]\n}\n","type":"application/json","title":"🎯 Espectros de desarrollo","modified":"20250531041437566","tags":"[[🎯 Espectros de desarrollo]] [[🎯 9. Plan de desarrollo]] [[🎯 8. Estructura]] [[🎯 4. Flujo de interaccion]] [[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]]","color":"#00c3db","tmap.id":"91d11c09-a695-4f3a-b85a-84261d229ce7"},{"created":"20250424020256953","text":"{\n  \"title\": \"🎯🧬 0.1 Pre-Impacto\",\n  \"id\": \"🎯🧬 0.1 Pre-Impacto\",\n  \"tags\": [\n    \"🎯🧬 0.1 Pre-Impacto\",\n    \"--- 🎯 Detalles del proyecto\",\n    \"--- 🌀 Helices de desarrollo\"\n  ],\n  \"relations\": {\n    \"usa\": [\n      \"🎯 Espectros de desarrollo\",\n      \"🎯 2. Requisitos\",\n      \"🎯 6. Componentes\"\n    ],\n    \"requiere\": [\n      \"🗂 Diseño\",\n      \"🗂 Evolución Semántica\"\n    ],\n    \"parte_de\": [\n      \"--- Codigo\",\n      \"--- 🎯 Detalles del proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler corresponde a la fase de Pre-Impacto de una vuelta helicoidal. Aquí se planifica la acción: qué se quiere mutar, qué requisitos están implicados, qué componente evoluciona. Define la intención semántica previa al desarrollo.\",\n  \"textMarkdown\": \"## 🎯🧬 0.1 Pre-Impacto\\n\\nFase previa a la acción. Aquí se estructura la intención, objetivos, requisitos y criterios de la vuelta a desarrollar.\\n\\n### Usa:\\n- 🎯 Espectros de desarrollo\\n- 🎯 2. Requisitos\\n- 🎯 6. Componentes\\n\\n### Requiere:\\n- 🗂 Diseño\\n- 🗂 Evolución Semántica\\n\\n### Parte de:\\n- --- Codigo\\n- --- 🎯 Detalles del proyecto\\n\\n---\\n> En esta fase el sistema no actúa aún, pero se prepara como un organismo que planea su mutación. Es un punto de conciencia técnica y ética previo al impacto.\"\n}\n{\n  \"section\": \"🎯 Espectro de Desarrollo – Pre-Impacto\",\n  \"titulo\": \"Vuelta {n} – {nombre breve}\",\n  \"descripcion\": \"Anticipa el impacto de la vuelta helicoidal, basada en un diseño evolutivo guiado por necesidad funcional, trazabilidad semántica y extensión ética del sistema.\"\n}\n{\n  \"subsection\": \"🧭 Enfoques a considerar\",\n  \"mejora\": \"{breve descripción del problema}\",\n  \"evaluacion_enfoques\": [\"{enfoque_1}\", \"{enfoque_2}\"],\n  \"criterios_priorizacion\": [\"éticos\", \"modulares\", \"de trazabilidad\"]\n}\n{\n  \"subsection\": \"📂 Archivos por involucrar\",\n  \"archivos\": [\n    {\"archivo\": \"nombre.py\", \"cambio_previsto\": \"{tipo de cambio}\", \"delta_r\": \"+X\", \"delta_c\": \"+Y\"},\n    {\"archivo\": \"otro.formato\", \"cambio_previsto\": \"{tipo de mutación o integración}\", \"delta_r\": \"+X\", \"delta_c\": \"+Y\"}\n  ]\n}\n{\n  \"subsection\": \"🧪 Posibles Dependencias a usar\",\n  \"dependencias\": [\n    {\"paquete\": \"nombre\", \"rol\": \"Abcd\", \"estado\": \"✅ Instalado\"},\n    {\"paquete\": \"nombre\", \"rol\": \"Abcd\", \"estado\": \"⏳ Evaluando\"},\n    {\"paquete\": \"nombre\", \"rol\": \"Abcd\", \"estado\": \"✅ Activo\"}\n  ]\n}\n{\n  \"subsection\": \"🧠 Funciones del Módulo a desarrollar\",\n  \"funciones\": [\n    {\"funcion\": \"funcion_nueva()\", \"proposito\": \"{qué hará}\", \"tipo_expresion\": \"feat\"},\n    {\"funcion\": \"funcion_existente()\", \"proposito\": \"{cómo mutará}\", \"tipo_expresion\": \"refac\"},\n    {\"funcion\": \"test_funcion()\", \"proposito\": \"validación\", \"tipo_expresion\": \"test\"}\n  ]\n}\n{\n  \"subsection\": \"🔧 Detalle Técnico a implementar\",\n  \"detalles\": [\n    \"Se implementará {módulo/clase} con tolerancia a {fallos/detección}\",\n    \"Se habilitará control por `{flag}` o `{condición}`\",\n    \"Se garantizará limpieza de artefactos (archivos, logs, etc.)\",\n    \"Se documentará impacto con `log_evento(...)`\"\n  ]\n}\n{\n  \"subsection\": \"📘 Aprendizajes Clave por adquirir\",\n  \"aprendizajes\": [\n    {\"area\": \"OCR\", \"pregunta\": \"¿Qué tanto mejora la extracción frente a modo Lite?\"},\n    {\"area\": \"Encoding\", \"pregunta\": \"¿Qué patrones se detectan tras aplicar `enhancer`?\"},\n    {\"area\": \"Semántica\", \"pregunta\": \"¿Cómo afecta la limpieza a la clasificación final?\"},\n    {\"area\": \"Diseño\", \"pregunta\": \"¿El gen resultante es modular y extensible?\"}\n  ]\n}\n{\n  \"subsection\": \"📈 Estado del Módulo actual\",\n  \"modulos\": [\n    {\"archivo\": \"ocr.py\", \"estado\": \"🧬 En diseño\", \"observacion\": \"Funciones bosquejadas\"},\n    {\"archivo\": \"parser.py\", \"estado\": \"🧬 Mutado\", \"observacion\": \"Soporta fallback OCR\"},\n    {\"archivo\": \"main.py\", \"estado\": \"🧠 Preparado\", \"observacion\": \"Flujo con `--ocr` listo\"},\n    {\"archivo\": \"tests/\", \"estado\": \"⏳ Pendiente\", \"observacion\": \"Aún sin fixtures finales\"}\n  ]\n}\n{\n  \"nota_final\": \"🌀 Esta planificación antecede la Vuelta #{n}, asegurando que su impacto sea deliberado, trazable y semánticamente medido.\"\n}\n","title":"🎯🧬 0.1 Pre-Impacto","modified":"20250531041512915","tags":"[[🎯🧬 0.1 Pre-Impacto]] [[--- 🎯 Detalles del proyecto]] [[--- Codigo]] [[🎯 Espectros de desarrollo]]","tmap.id":"a6760e48-a9ae-45de-a5e8-5b1b20d47cd6","color":"#00c3db","type":"application/json"},{"created":"20250424020332765","text":"{\n  \"title\": \"🎯🧬 0.2 Impacto\",\n  \"id\": \"🎯🧬 0.2 Impacto\",\n  \"tags\": [\n    \"🎯🧬 0.2 Impacto\",\n    \"--- 🎯 Detalles del proyecto\",\n    \"--- 🌀 Helices de desarrollo\"\n  ],\n  \"relations\": {\n    \"usa\": [\n      \"🎯 6. Componentes\",\n      \"🎯 7. Algoritmos y matematicas\",\n      \"⚙️🧪 tests_\"\n    ],\n    \"requiere\": [\n      \"🎯🧬 0.1 Pre-Impacto\",\n      \"🎯 Espectros de desarrollo\"\n    ],\n    \"parte_de\": [\n      \"--- Codigo\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler representa la fase activa de mutación del sistema: implementación, ejecución, refactorización y generación de pruebas. Se basa en la planificación previa y transforma directamente los componentes y algoritmos del núcleo.\",\n  \"textMarkdown\": \"## 🎯🧬 0.2 Impacto\\n\\nFase activa de codificación, ejecución y validación de la vuelta helicoidal.\\n\\n### Usa:\\n- 🎯 6. Componentes\\n- 🎯 7. Algoritmos y matematicas\\n- ⚙️🧪 tests_\\n\\n### Requiere:\\n- 🎯🧬 0.1 Pre-Impacto\\n- 🎯 Espectros de desarrollo\\n\\n### Parte de:\\n- --- Codigo\\n\\n---\\n> Esta es la fase de impacto sistémico: el sistema muta, se transforma, se expresa. Aquí se materializa la evolución planeada en el Pre-Impacto, y se valida su consistencia.\"\n}\n{\n  \"section\": \"🧬 Impacto Genético\",\n  \"gen\": \"nombre_modulo.py\",\n  \"descripcion\": \"Este gen aporta al sistema una capacidad nueva, adaptativa y trazable. Su incorporación expresa una mutación funcional significativa que se integra con el ecosistema helicoidal sin romperlo.\"\n}\n{\n  \"subsection\": \"📂 Archivos Activados\",\n  \"archivos\": [\n    {\"archivo\": \"src/nombre_modulo.py\", \"cambio_funcional\": \"[breve descripción técnica]\", \"delta_r\": \"+X\", \"delta_c\": \"+Y\"},\n    {\"archivo\": \"otro_modulo.py\", \"cambio_funcional\": \"[ej. integración condicional]\", \"delta_r\": \"+X\", \"delta_c\": \"+Y\"},\n    {\"archivo\": \"tests/test_nombre_modulo.py\", \"cambio_funcional\": \"[ej. testeo por función o flujo]\", \"delta_r\": \"+X\", \"delta_c\": \"+Y\"}\n  ]\n}\n{\n  \"subsection\": \"🧠 Funciones del Gen\",\n  \"modulo\": \"nombre_modulo.py\",\n  \"funciones\": [\n    {\"funcion\": \"funcion_principal()\", \"expresion\": \"[resumen de la expresión]\", \"tipo\": \"Principal\", \"comentario\": \"[ej. núcleo del cambio]\"},\n    {\"funcion\": \"funcion_secundaria()\", \"expresion\": \"[mutación, helper...]\", \"tipo\": \"Adaptativa / Técnica\", \"comentario\": \"[ej. complemento a fallback]\"}\n  ]\n}\n{\n  \"subsection\": \"📈 Trazabilidad Evolutiva\",\n  \"registros\": [\n    {\n      \"vuelta\": \"Vx\",\n      \"radio\": \"Rx\",\n      \"madurez\": \"Cx\",\n      \"gen\": \"nombre\",\n      \"bloque\": \"b=1\",\n      \"commit\": \"feat(D): funcion_principal() – descripción - (Vx.Rx.Cx / gen=nombre, b=1, ∆r=+X, ∆c=+Y)\"\n    }\n  ]\n}\n{\n  \"subsection\": \"📊 Resultados Semánticos del Gen\",\n  \"indicadores\": {\n    \"funciones_nuevas\": \"✅ N\",\n    \"casos_de_uso_cubiertos\": \"✅/⚠️ Detalle\",\n    \"compatibilidad_modular\": \"✅ Total / ⚠️ Parcial\",\n    \"logs_generados\": \"✅ Por evento / función\",\n    \"fallback_robustez\": \"✅ / ⚠️ Detalle\"\n  }\n}\n{\n  \"subsection\": \"🔍 Análisis Diferencial\",\n  \"delta_r\": \"+X.X\",\n  \"delta_c\": \"+Y.Y\",\n  \"descripcion\": \"[madurez alcanzada: test, fallback, logging, doc, etc.]\"\n}\n{\n  \"subsection\": \"🧠 Reflexión Final del Gen\",\n  \"gen\": \"nombre_modulo\",\n  \"reflexion\": \"[Reflexión ética o semántica del cambio. Qué aporta a largo plazo. Qué representa este gen para el sistema.]\",\n  \"autor\": \"Helicodista · OpenPages Pipeline Vx\"\n}\n{\n  \"subsection\": \"📇 Ficha Helicoidal\",\n  \"ficha\": {\n    \"gen\": \"nombre_modulo.py\",\n    \"tag_funcional\": \"🌀 Tag representativo\",\n    \"vuelta_activa\": \"Vx\",\n    \"futuras_vueltas\": \"Vy\",\n    \"funcion_principal\": \"funcion_principal()\",\n    \"tipo_expresion\": \"[Ej. funcional adaptativa / heurística / validación]\",\n    \"r(t)\": \"X.X\",\n    \"c(t)\": \"Y.Y\",\n    \"r'(t)\": \"+X.X\",\n    \"c'(t)\": \"+Y.Y\",\n    \"estado\": \"✅ Integrado / Parcial\",\n    \"relacionado_con\": \"otros_modulos.py\"\n  }\n}\n","title":"🎯🧬 0.2 Impacto","modified":"20250531041548914","tags":"[[🎯🧬 0.2 Impacto]] [[--- 🎯 Detalles del proyecto]] [[--- Codigo]] [[🎯 Espectros de desarrollo]]","tmap.id":"c0e1316e-c46a-4022-989e-d1a75c31c0cf","color":"#00c3db","type":"application/json"},{"created":"20250424020349633","text":"{\n  \"title\": \"🎯🧬 0.3 Post-Impacto\",\n  \"id\": \"🎯🧬 0.3 Post-Impacto\",\n  \"tags\": [\n    \"🎯🧬 0.3 Post-Impacto\",\n    \"--- 🎯 Detalles del proyecto\",\n    \"--- 🌀 Helices de desarrollo\"\n  ],\n  \"relations\": {\n    \"usa\": [\n      \"🎯🧬 0.2 Impacto\",\n      \"⚙️🧪 tests_\",\n      \"🎯 5. Arquitectura\"\n    ],\n    \"define\": [\n      \"mutaciones futuras\",\n      \"mejoras UX\",\n      \"recombinaciones\"\n    ],\n    \"requiere\": [\n      \"🎯 Espectros de desarrollo\"\n    ],\n    \"parte_de\": [\n      \"--- Codigo\",\n      \"--- 🎯 Detalles del proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler evalúa los efectos de la vuelta implementada. Se detectan mutaciones sistémicas, problemas emergentes, y oportunidades de mejora. Es la base para reflexionar, optimizar y alimentar futuras iteraciones helicoidales.\",\n  \"textMarkdown\": \"## 🎯🧬 0.3 Post-Impacto\\n\\nFase de observación, medición y reflexión tras una vuelta helicoidal.\\n\\n### Usa:\\n- 🎯🧬 0.2 Impacto\\n- ⚙️🧪 tests_\\n- 🎯 5. Arquitectura\\n\\n### Define:\\n- mutaciones futuras\\n- mejoras UX\\n- recombinaciones\\n\\n### Requiere:\\n- 🎯 Espectros de desarrollo\\n\\n### Parte de:\\n- --- Codigo\\n- --- 🎯 Detalles del proyecto\\n\\n---\\n> Esta fase mide lo que el sistema aprendió de sí mismo. Evalúa el impacto funcional, semántico y estructural, y siembra el terreno para la próxima evolución controlada.\"\n}\n{\n  \"section\": \"🎯🧬 Post-Impacto\",\n  \"vuelta\": \"Vx\",\n  \"gen\": \"nombre_modulo.py\",\n  \"descripcion\": \"Este informe describe los efectos reales, aprendizajes y mutaciones emergentes tras la activación del gen nombre_modulo.py durante la vuelta Vx. Sirve como bitácora de retroalimentación epigenética, captura los cambios en el ecosistema, y prepara el terreno para futuras vueltas helicoidales.\"\n}\n{\n  \"subsection\": \"✅ Evaluación Funcional\",\n  \"evaluacion\": {\n    \"integracion_modular\": \"✅ Sí / ⚠️ Parcial / ❌ No\",\n    \"resiliencia_sistema\": \"✅\",\n    \"tests_en_CI_CD\": \"✅ / ❌ con observaciones\",\n    \"flujo_main_py\": \"✅ / ⚠️ Con advertencias\",\n    \"nuevos_datos_procesables\": \"[Texto OCR, ecuaciones, baja calidad...]\"\n  }\n}\n{\n  \"subsection\": \"🧠 Aprendizajes Derivados\",\n  \"lecciones\": [\n    {\"area\": \"Diseño del módulo\", \"leccion\": \"[ej. `enhancer.py` requiere expansión para OCR no latino]\"},\n    {\"area\": \"Robustez\", \"leccion\": \"[ej. fallos menores en fallback sin Poppler → plan para V3]\"},\n    {\"area\": \"Semántica\", \"leccion\": \"[ej. nuevos logs enriquecen trazabilidad de errores por OCR]\"},\n    {\"area\": \"Usuario\", \"leccion\": \"[ej. CLI aún confusa para errores OCR → mejorar UX CLI]\"}\n  ]\n}\n{\n  \"subsection\": \"🔄 Mutaciones Emergentes Detectadas\",\n  \"mutaciones\": [\n    {\"observacion\": \"Algunos documentos tienen `cid` + mojibake + fórmulas\", \"potencial\": \"Composición multi-enhancer (pipeline de limpieza inteligente)\"},\n    {\"observacion\": \"Logs multilingües ayudan al debugging\", \"potencial\": \"Logger embebido en `.md` para reproducibilidad\"},\n    {\"observacion\": \"`.jsonl` permite detectar OCR fallido por chunk vacío\", \"potencial\": \"Clasificador de confiabilidad OCR\"}\n  ]\n}\n{\n  \"subsection\": \"📈 Derivadas Observadas\",\n  \"derivadas\": [\n    {\"variable\": \"r′(t)\", \"valor\": \"+2.0\", \"observacion\": \"Alta expansión de alcance funcional\"},\n    {\"variable\": \"c′(t)\", \"valor\": \"+1.5\", \"observacion\": \"Madurez incrementada (tests, logs, fallback)\"}\n  ],\n  \"cita\": \"Esta vuelta fue altamente evolutiva. El sistema ahora escucha documentos que antes eran ruido visual puro.\"\n}\n{\n  \"subsection\": \"🔗 Impacto sobre la arquitectura\",\n  \"impacto\": [\n    {\"capa\": \"🧠 Lógica de Aplicación\", \"cambios\": \"Nuevo flujo adaptativo en `parser.py`, `main.py`\"},\n    {\"capa\": \"📦 Capa de Datos\", \"cambios\": \"Más `.jsonl` semánticamente válidos desde OCR\"},\n    {\"capa\": \"🔌 Integración externa\", \"cambios\": \"Prepara base para LLMs tolerantes al OCR\"},\n    {\"capa\": \"🔐 Ética computacional\", \"cambios\": \"No excluye PDFs difíciles → mayor inclusión\"}\n  ]\n}\n{\n  \"subsection\": \"🌱 Recombinación futura\",\n  \"propuestas\": [\n    {\"area\": \"OCR\", \"propuesta\": \"`lang=\\\"equ\\\"` para ecuaciones científicas\"},\n    {\"area\": \"Exportación\", \"propuesta\": \"`.md` con logs embebidos (`md + YAML + logs`)\"},\n    {\"area\": \"Validación\", \"propuesta\": \"Detección automática de OCR de baja calidad\"}\n  ]\n}\n{\n  \"subsection\": \"📇 Ficha de Cierre Helicoidal\",\n  \"ficha\": {\n    \"gen\": \"nombre_modulo.py\",\n    \"tag_funcional\": \"🌀 OCR Inteligente\",\n    \"vuelta_evaluada\": \"Vx\",\n    \"r_prime\": \"+2.0\",\n    \"c_prime\": \"+1.5\",\n    \"estado_final\": \"✅ Estable con oportunidades de expansión\",\n    \"siguiente_vuelta\": \"Vy → foco en OCR multilingüe, ecuaciones\"\n  },\n  \"cierre\": \"El cierre de una vuelta no es un punto final, sino el inicio de nuevas posibilidades.\",\n  \"firma\": \"Bitácora Epigenética · OpenPages Pipeline\"\n}\n","title":"🎯🧬 0.3 Post-Impacto","modified":"20250531041611069","tags":"[[🎯🧬 0.3 Post-Impacto]] [[--- 🎯 Detalles del proyecto]] [[--- Codigo]] [[🎯 Espectros de desarrollo]]","tmap.id":"0280c962-d63f-4bdb-ba91-8a1c876e24c1","color":"#00c3db","type":"application/json"},{"created":"20250417134213439","text":"{\n  \"title\": \"🗂 Calidad del Código\",\n  \"id\": \"🗂 Calidad del Código\",\n  \"tags\": [\n    \"--- 🗂 Principios de programación\",\n    \"--- 🎯 Detalles del proyecto\",\n    \"🗂 Calidad del Código\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"KISS\",\n      \"YAGNI\",\n      \"DRY\",\n      \"Evitar la Optimización Prematura\",\n      \"Convención sobre Configuración\"\n    ],\n    \"usa\": [\n      \"--- 🗂 Principios de programación\"\n    ],\n    \"requiere\": [\n      \"🗂 Diseño\",\n      \"🗂 Modularidad y Estado\"\n    ],\n    \"parte_de\": [\n      \"--- 🎯 Detalles del proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler define los principios fundamentales de calidad de código: KISS, DRY, YAGNI, Convención sobre Configuración, y Evitar Optimización Prematura. Modela cómo se relacionan, se tensionan creativamente y guían el diseño técnico del sistema.\",\n  \"textMarkdown\": \"## 🗂 Calidad del Código\\n\\nConjunto de principios que aseguran claridad, coherencia y sostenibilidad en el desarrollo:\\n\\n### Principios:\\n- **KISS** – base para todo diseño mantenible.\\n- **YAGNI** – no codifiques antes de tiempo.\\n- **DRY** – evita duplicación.\\n- **Evitar Optimización Prematura** – claridad sobre velocidad.\\n- **Convención sobre Configuración** – reduce configuración innecesaria.\\n\\n### Relaciones internas:\\n- `KISS → base para DRY y YAGNI`\\n- `YAGNI ↔ Optimización Prematura`\\n- `DRY ↔ KISS (tensión creativa)`\\n\\n### Parte de:\\n- --- 🎯 Detalles del proyecto\\n- --- 🗂 Principios de programación\\n\\n---\\n> Este nodo establece las reglas internas de simplicidad y coherencia. No solo guía el estilo del código, sino la estrategia conceptual detrás de cada decisión técnica.\"\n}\n{\n  \"section\": \"✨ Principios de Código Limpio y Simplicidad\",\n  \"principio\": \"Convención sobre Configuración\",\n  \"detalle\": \"Inspirado en frameworks como Rails o Spring, minimiza archivos de configuración utilizando valores por defecto coherentes. Favorece productividad y coherencia entre proyectos.\"\n}\n{\n  \"principio\": \"KISS – Keep It Simple, Stupid\",\n  \"detalle\": \"Diseña de forma clara, directa y comprensible. Es el fundamento de la legibilidad y mantenibilidad. Facilita la aplicación de DRY y YAGNI.\"\n}\n{\n  \"principio\": \"YAGNI – You Aren’t Gonna Need It\",\n  \"detalle\": \"No desarrolles funcionalidades hasta que exista una necesidad real. Reduce sobrecarga técnica y complejidad innecesaria. Complementa a KISS.\"\n}\n{\n  \"principio\": \"DRY – Don’t Repeat Yourself\",\n  \"detalle\": \"Evita duplicaciones de lógica, estructuras o datos. Mejora la mantenibilidad y previene errores de inconsistencia. Tiene una tensión natural con KISS (a veces duplicar clarifica).\"\n}\n{\n  \"principio\": \"Evitar la Optimización Prematura\",\n  \"detalle\": \"Optimiza solo cuando sea necesario. La prioridad es la claridad y luego el rendimiento. Se alinea con YAGNI: “no optimices lo que no vas a usar todavía”.\"\n}\n{\n  \"subsection\": \"🔁 Relaciones internas entre principios\",\n  \"relacion\": \"KISS → base para DRY y YAGNI\",\n  \"explicacion\": \"El diseño simple permite identificar fácilmente duplicaciones o código innecesario.\"\n}\n{\n  \"relacion\": \"YAGNI ↔ Optimización Prematura\",\n  \"explicacion\": \"Ambos advierten sobre la sobrecarga técnica anticipada sin justificación clara.\"\n}\n{\n  \"relacion\": \"DRY ↔ KISS (tensión creativa)\",\n  \"explicacion\": \"Evitar duplicación mejora mantenimiento, pero a veces duplicar clarifica el código.\"\n}\n","type":"application/json","title":"🗂 Calidad del Código","modified":"20250531041815751","tags":"[[--- 🗂 Principios de programación]] [[🗂 Calidad del Código]] [[--- 🎯 Detalles del proyecto]]","color":"#db5f00","tmap.id":"edcd8959-4fd3-47c3-8d26-2d5635409ba8"},{"created":"20250417134125921","text":"{\n  \"title\": \"🗂 Diseño\",\n  \"id\": \"🗂 Diseño\",\n  \"tags\": [\n    \"--- 🗂 Principios de programación\",\n    \"--- 🎯 Detalles del proyecto\",\n    \"🗂 Diseño\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"SRP – Single Responsibility\",\n      \"OCP – Open/Closed\",\n      \"LSP – Liskov Substitution\",\n      \"ISP – Interface Segregation\",\n      \"DIP – Dependency Inversion\",\n      \"Composición sobre Herencia\",\n      \"Encapsulación\"\n    ],\n    \"usa\": [\n      \"🗂 Calidad del Código\",\n      \"🗂 Modularidad y Estado\"\n    ],\n    \"requiere\": [\n      \"KISS\",\n      \"DRY\",\n      \"Evitar la Optimización Prematura\"\n    ],\n    \"parte_de\": [\n      \"--- 🗂 Principios de programación\",\n      \"--- 🎯 Detalles del proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler reúne principios fundamentales de diseño orientado a objetos: SOLID, composición, encapsulación. Define sus relaciones internas, sus beneficios y cómo orientan la arquitectura y evolución del sistema.\",\n  \"textMarkdown\": \"## 🗂 Diseño\\n\\nPrincipios estructurales que rigen el diseño técnico del sistema:\\n\\n### SOLID:\\n- SRP – responsabilidad única\\n- OCP – abierto a extensión, cerrado a modificación\\n- LSP – sustitución de Liskov\\n- ISP – segregación de interfaces\\n- DIP – inversión de dependencias\\n\\n### Complementarios:\\n- Composición sobre Herencia\\n- Encapsulación\\n\\n### Relaciones internas:\\n- Encapsulación → SRP y DIP\\n- Composición sobre Herencia → OCP y LSP\\n\\n### Usa:\\n- 🗂 Calidad del Código\\n- 🗂 Modularidad y Estado\\n\\n### Requiere:\\n- KISS, DRY, Evitar Optimización Prematura\\n\\n### Parte de:\\n- --- 🗂 Principios de programación\\n- --- 🎯 Detalles del proyecto\\n\\n---\\n> Este nodo refuerza la coherencia, escalabilidad y mantenibilidad del sistema. Es la base para diseñar módulos resilientes, claros y testeables.\"\n}\n{\n  \"section\": \"Principios de Diseño Orientado a Objetos (OOP)\",\n  \"principio\": \"SRP – Single Responsibility\",\n  \"detalle\": \"Cada módulo o clase debe tener una sola razón para cambiar. Favorece claridad y facilidad de pruebas.\"\n}\n{\n  \"principio\": \"OCP – Open/Closed\",\n  \"detalle\": \"El código debe estar abierto a extensión pero cerrado a modificación. Se puede agregar funcionalidad sin alterar lo existente.\"\n}\n{\n  \"principio\": \"LSP – Liskov Substitution\",\n  \"detalle\": \"Una subclase debe poder reemplazar a su clase padre sin alterar el comportamiento esperado.\"\n}\n{\n  \"principio\": \"ISP – Interface Segregation\",\n  \"detalle\": \"Se deben definir interfaces específicas y pequeñas, evitando forzar a los módulos a depender de lo que no usan.\"\n}\n{\n  \"principio\": \"DIP – Dependency Inversion\",\n  \"detalle\": \"Los módulos de alto nivel no deben depender de detalles, sino de abstracciones. Facilita pruebas y desacoplamiento.\"\n}\n{\n  \"section\": \"Composición sobre Herencia\",\n  \"enunciado\": \"Has-a vs Is-a\",\n  \"detalle\": \"Prefiere composición o inyección de dependencias sobre la herencia rígida.\"\n}\n{\n  \"enunciado\": \"Mantenimiento\",\n  \"detalle\": \"Facilita modificación, pruebas unitarias y extensión flexible.\"\n}\n{\n  \"enunciado\": \"Relación con otros principios\",\n  \"detalle\": \"Refuerza DIP (inversión de dependencias) y OCP/LSP al permitir estructuras desacopladas.\"\n}\n{\n  \"section\": \"Encapsulación\",\n  \"enunciado\": \"Ocultamiento de estado interno\",\n  \"detalle\": \"Expone solo una API mínima pública, protegiendo la lógica interna del módulo.\"\n}\n{\n  \"enunciado\": \"Modularidad y estado\",\n  \"detalle\": \"Refuerza el control del estado global, facilita la modularidad robusta y mantenible.\"\n}\n{\n  \"section\": \"Relaciones internas entre principios\",\n  \"relacion\": \"Encapsulación → SRP y DIP\",\n  \"explicacion\": \"Ocultar detalles internos facilita tener responsabilidades únicas y manejar abstracciones.\"\n}\n{\n  \"relacion\": \"Composición sobre herencia → OCP y LSP\",\n  \"explicacion\": \"Usar composición permite extender sin modificar y mantener el principio de sustitución.\"\n}\n","type":"application/json","title":"🗂 Diseño","modified":"20250531041910303","tags":"[[--- 🗂 Principios de programación]] [[🗂 Diseño]] [[--- 🎯 Detalles del proyecto]]","color":"#db5f00","tmap.id":"e5b186ac-9ddc-4f40-a57e-d6bcbbe7900d"},{"created":"20250424000251908","text":"{\n  \"title\": \"🗂 Epigenética Computacional\",\n  \"id\": \"🗂 Epigenética Computacional\",\n  \"tags\": [\n    \"--- 🗂 Principios de programación\",\n    \"--- 🎯 Detalles del proyecto\",\n    \"🗂 Epigenética Computacional\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"Condiciones de expresión\",\n      \"Genes autorregulados (feedback)\",\n      \"Diseño orientado por información\"\n    ],\n    \"usa\": [\n      \"🎯 7. Algoritmos y matematicas\",\n      \"🎯 6. Componentes\",\n      \"🎯 9. Plan de desarrollo\"\n    ],\n    \"requiere\": [\n      \"🗂 Diseño\",\n      \"🗂 Modularidad y Estado\",\n      \"🗂 Calidad del Código\"\n    ],\n    \"parte_de\": [\n      \"--- 🗂 Principios de programación\",\n      \"--- 🎯 Detalles del proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler describe una arquitectura viva, inspirada en genética: cada módulo (gen) se expresa sólo bajo ciertas condiciones, se regula a sí mismo, y deja trazas persistentes (herencia). Favorece sistemas resilientes, adaptativos y observables.\",\n  \"textMarkdown\": \"## 🗂 Epigenética Computacional\\n\\nArquitectura basada en el modelo genético vivo:\\n\\n### Conceptos centrales:\\n- **Gen**: función o módulo\\n- **Expresión**: ejecución concreta bajo condición\\n- **Regulación**: control de su activación\\n- **Herencia**: persistencia del efecto\\n\\n### Principios definidos:\\n- Condiciones de expresión (OCR si no hay texto)\\n- Genes autorregulados (feedback loops entre módulos)\\n- Diseño guiado por información (reducción de entropía, trazabilidad)\\n\\n### Usa:\\n- 🎯 7. Algoritmos y matematicas\\n- 🎯 6. Componentes\\n- 🎯 9. Plan de desarrollo\\n\\n### Requiere:\\n- 🗂 Diseño\\n- 🗂 Modularidad y Estado\\n- 🗂 Calidad del Código\\n\\n### Parte de:\\n- --- 🗂 Principios de programación\\n- --- 🎯 Detalles del proyecto\\n\\n---\\n> Esta capa permite que el sistema evolucione como un organismo: no solo reacciona, sino que se adapta, se observa y se autorregula.\"\n}\n{\n  \"seccion\": \"Epigenética Computacional\",\n  \"titulo\": \"Definición\",\n  \"definicion\": \"Epigenética computacional es el diseño de software en el cual los módulos (genes) no solo existen de forma estática, sino que su ejecución (expresión) depende de condiciones internas y externas del sistema, al igual que los genes biológicos dependen del ambiente, energía, y señales bioquímicas.\",\n  \"elementos\": {\n    \"gen\": \"funciones o módulos\",\n    \"expresion\": \"su ejecución concreta\",\n    \"regulacion\": \"control de su activación\",\n    \"herencia\": \"persistencia de su efecto (logs, outputs, cambios en estado global)\"\n  }\n}\n{\n  \"principio\": \"Condiciones de expresión\",\n  \"descripcion\": \"Los genes del sistema no deben ejecutarse siempre. Deben estar condicionados a eventos, como 'si el PDF no tiene texto → activar OCR' o 'si el debug está activo → loguear todo'. Esto reduce costo computacional, aumenta legibilidad y mejora la eficiencia semántica.\"\n}\n{\n  \"principio\": \"Genes autorregulados (feedback loops)\",\n  \"descripcion\": \"Un gen puede afectar su propia expresión futura, o la de otros. Ejemplo: enhancer.py mejora el texto → validator.py detecta mejora → el sistema decide no omitirlo. Si validator ve una mejora menor, puede sugerir una segunda pasada por enhancer. Esto permite sistemas resilientes, adaptativos y con capacidad de corrección automática.\"\n}\n{\n  \"principio\": \"Robustez a la decoherencia (errores)\",\n  \"descripcion\": \"El sistema está diseñado para tolerar errores parciales: si una página falla, el gen sigue procesando las otras. Usa logs trazables para saber qué función se expresó y con qué efecto. Aplica fallbacks activos: si falla Poppler, entra fitz; si no hay texto, entra OCR.\"\n}\n{\n  \"principio\": \"Diseño orientado por información\",\n  \"descripcion\": \"Utiliza principios de física de la información: reducir entropía textual, maximizar densidad semántica y facilitar reversibilidad informacional (logs = trazabilidad completa).\"\n}\n{\n  \"principio\": \"Visualización heurística\",\n  \"flujo\": [\n    \"[PDF escaneado]\",\n    \"↓\",\n    \"necesita_ocr() → True\",\n    \"↓\",\n    \"ocr_completo()\",\n    \"↓\",\n    \"enhancer.py ↻ feedback\",\n    \"↓\",\n    \"validator.py\",\n    \"↓\",\n    \"Exportar o descartar\"\n  ]\n}\n{\n  \"beneficios\": [\n    {\n      \"ventaja\": \"🧠 Inteligencia distribuida\",\n      \"descripcion\": \"Cada gen decide cuándo actuar\"\n    },\n    {\n      \"ventaja\": \"🧩 Modularidad real\",\n      \"descripcion\": \"Genes independientes, pero conectados\"\n    },\n    {\n      \"ventaja\": \"🔁 Reusabilidad dinámica\",\n      \"descripcion\": \"Los mismos genes sirven en flujos distintos\"\n    },\n    {\n      \"ventaja\": \"📈 Observabilidad total\",\n      \"descripcion\": \"Logs, stats, y expresión observable\"\n    },\n    {\n      \"ventaja\": \"🦾 Resiliencia semántica\",\n      \"descripcion\": \"No se rompe por errores, se adapta\"\n    }\n  ]\n}\n","type":"application/json","title":"🗂 Epigenética Computacional","modified":"20250531041959119","tags":"[[--- 🎯 Detalles del proyecto]] [[--- 🗂 Principios de programación]] [[🗂 Epigenética Computacional]]","tmap.id":"1b6a1e0c-b6eb-4a7b-a207-dfde0737d7cc","color":"#db5f00"},{"created":"20250417134249385","text":"{\n  \"title\": \"🗂 Estructura de commits\",\n  \"id\": \"🗂 Estructura de commits\",\n  \"tags\": [\n    \"--- Codigo\",\n    \"--- 🗂 Principios de programación\",\n    \"--- 🎯 Detalles del proyecto\",\n    \"🗂 Estructura de commits\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"Formato de commit semántico\",\n      \"Trazabilidad helicoidal\",\n      \"Genotipo de mutaciones\"\n    ],\n    \"usa\": [\n      \"🗂 Epigenética Computacional\",\n      \"🎯 9. Plan de desarrollo\",\n      \"🎯🧬 0.2 Impacto\",\n      \"⚙️🛠 scripts_\"\n    ],\n    \"requiere\": [\n      \"🗂 Diseño\",\n      \"🗂 Calidad del Código\",\n      \"🗂 Modularidad y Estado\"\n    ],\n    \"parte_de\": [\n      \"--- Codigo\",\n      \"--- 🗂 Principios de programación\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler define la estrategia genética-helicoidal de commits: cada commit es una expresión funcional con trazabilidad semántica. El formato permite auditar cambios por vuelta, componente, madurez y deriva.\",\n  \"textMarkdown\": \"## 🗂 Estructura de commits\\n\\n### Sintaxis:\\n`feat(D): nueva función ocr_completo() - (V2.R2.C1 / gen=ocr, b=1, ∆r=+1, ∆c=+0.5)`\\n\\n### Campos:\\n- `tipo` → feat, fix, refac, test\\n- `estado` → (p) progreso, (D) done\\n- `gen` → módulo activo\\n- `Vx.Ry.Cz` → vuelta, amplitud, madurez\\n- `∆r`, `∆c` → derivadas semánticas\\n\\n### Define:\\n- Formato de commit semántico\\n- Trazabilidad helicoidal\\n- Genotipo de mutaciones\\n\\n### Usa:\\n- 🗂 Epigenética Computacional\\n- 🎯 9. Plan de desarrollo\\n- 🎯🧬 0.2 Impacto\\n- ⚙️🛠 scripts_\\n\\n### Parte de:\\n- --- Codigo\\n- --- 🗂 Principios de programación\\n\\n---\\n> Esta estrategia convierte git en un lenguaje vivo: cada push es una mutación rastreable, cada test una verificación del ADN, cada ciclo una vuelta evolutiva observable.\"\n}\n{\n  \"titulo\": \"🌀 Estrategia de Commits – OpenPages Pipeline (Modelo Genético-Helicoidal)\",\n  \"descripcion\": \"Cada commit representa una expresión genética funcional del sistema. Esta guía asegura que cada cambio pueda ser rastreado semánticamente en el tiempo, auditado, y visualizado en dashboards helicoidales.\"\n}\n{\n  \"estructura_commit\": \"[tipo](estado): descripción breve - (Vx.Ry.Cz / gen=nombre, b=#, ∆r=±n, ∆c=±n)\",\n  \"campos\": [\n    {\n      \"campo\": \"[tipo]\",\n      \"descripcion\": \"Tipo de cambio (`feat`, `fix`, `refac`, `test`)\",\n      \"ejemplo\": \"feat\"\n    },\n    {\n      \"campo\": \"(estado)\",\n      \"descripcion\": \"Estado del cambio: `(p)` progreso, `(D)` done\",\n      \"ejemplo\": \"(D)\"\n    },\n    {\n      \"campo\": \"descripción\",\n      \"descripcion\": \"Acción concreta y concisa\",\n      \"ejemplo\": \"función `ocr_completo()`\"\n    },\n    {\n      \"campo\": \"Vx\",\n      \"descripcion\": \"Vuelta helicoidal (ciclo de madurez)\",\n      \"ejemplo\": \"V2\"\n    },\n    {\n      \"campo\": \"Ry\",\n      \"descripcion\": \"Amplitud del cambio (cuántos módulos se tocaron)\",\n      \"ejemplo\": \"R2\"\n    },\n    {\n      \"campo\": \"Cz\",\n      \"descripcion\": \"Nivel de madurez del sistema alcanzado\",\n      \"ejemplo\": \"C1\"\n    },\n    {\n      \"campo\": \"gen\",\n      \"descripcion\": \"Gen activo o módulo afectado (sin `.py`)\",\n      \"ejemplo\": \"ocr\"\n    },\n    {\n      \"campo\": \"b\",\n      \"descripcion\": \"Bloque o función específica\",\n      \"ejemplo\": \"b=1\"\n    },\n    {\n      \"campo\": \"∆r, ∆c\",\n      \"descripcion\": \"Derivadas opcionales: amplitud y madurez incremental\",\n      \"ejemplo\": \"∆r=+1, ∆c=+0.5\"\n    }\n  ]\n}\n{\n  \"ejemplo_completo\": \"feat(D): función ocr_completo() – primera expresión OCR - (V2.R2.C1 / gen=ocr, b=1, ∆r=+1, ∆c=+0.5)\"\n}\n{\n  \"sintaxis_minima\": \"feat(D): nueva función ocr_completo() - (V2.R2.C1 / gen=ocr, b=1)\",\n  \"nota\": \"Las derivadas pueden calcularse automáticamente por un script externo.\"\n}\n{\n  \"ventajas\": [\n    {\n      \"beneficio\": \"📈 Trazabilidad helicoidal\",\n      \"descripcion\": \"Agrupación por vuelta (Vx), gen, bloque\"\n    },\n    {\n      \"beneficio\": \"🧬 Contexto semántico por commit\",\n      \"descripcion\": \"Cada acción se contextualiza como una mutación o expresión genética\"\n    },\n    {\n      \"beneficio\": \"🔁 Automatización con scripts\",\n      \"descripcion\": \"Permite exportar a `.jsonl` y `.tid` para dashboards y TiddlyWiki\"\n    },\n    {\n      \"beneficio\": \"📦 Dashboards evolutivos posibles\",\n      \"descripcion\": \"Podés graficar ∂c/∂t, evolución por gen, amplitud por vuelta, etc.\"\n    }\n  ]\n}\n{\n  \"recordatorio\": [\n    \"Cada commit es una transcripción genética.\",\n    \"Cada refactor, una mutación.\",\n    \"Cada test, una verificación funcional.\"\n  ],\n  \"final\": \"Este modelo no solo organiza el código, lo vuelve inteligible para IA y humanos por igual.\"\n}\n","type":"application/json","title":"🗂 Estructura de commits","modified":"20250531042054929","tags":"[[--- 🗂 Principios de programación]] [[--- 🎯 Detalles del proyecto]] [[🗂 Estructura de commits]] [[--- Codigo]]","color":"#db5f00","tmap.id":"bf7ef23c-b5b2-4035-8622-71c1635ce7e0"},{"created":"20250423003522758","text":"{\n  \"title\": \"🗂 Evolución Semántica\",\n  \"id\": \"🗂 Evolución Semántica\",\n  \"tags\": [\n    \"--- 🗂 Principios de programación\",\n    \"--- 🎯 Detalles del proyecto\",\n    \"🗂 Evolución Semántica\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"🧬 Modelo de las Hélices de Desarrollo\",\n      \"Equivalencias Genéticas\",\n      \"Trazabilidad Semántica\"\n    ],\n    \"usa\": [\n      \"🗂 Epigenética Computacional\",\n      \"🗂 Estructura de commits\",\n      \"🎯 9. Plan de desarrollo\",\n      \"🎯🧬 0.2 Impacto\",\n      \"🎯🧬 0.3 Post-Impacto\"\n    ],\n    \"requiere\": [\n      \"🗂 Diseño\",\n      \"🗂 Modularidad y Estado\",\n      \"🗂 Calidad del Código\"\n    ],\n    \"parte_de\": [\n      \"--- 🗂 Principios de programación\",\n      \"--- 🎯 Detalles del proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler formaliza el sistema como una hélice genética-semántica: cada módulo es un gen, cada commit una mutación, cada vuelta una maduración. No se construyen versiones, se codifican sistemas vivos que mutan, aprenden y escalan.\",\n  \"textMarkdown\": \"## 🗂 Evolución Semántica\\n\\n### Principios:\\n- Cada módulo es un gen funcional\\n- Cada commit es una mutación\\n- Cada vuelta helicoidal es una expresión de madurez\\n- La trazabilidad es semántica y matemática\\n\\n### Expresión vectorial:\\n- r(t) = [r·cos(t), r·sin(t), c·t]\\n- r'(t) = [-r·sin(t), r·cos(t), c]\\n\\n### Define:\\n- 🧬 Modelo de las Hélices de Desarrollo\\n- Equivalencias Genéticas\\n- Trazabilidad Semántica\\n\\n### Usa:\\n- 🗂 Epigenética Computacional\\n- 🗂 Estructura de commits\\n- 🎯 9. Plan de desarrollo\\n- 🎯🧬 0.2 Impacto\\n- 🎯🧬 0.3 Post-Impacto\\n\\n### Parte de:\\n- --- 🗂 Principios de programación\\n- --- 🎯 Detalles del proyecto\\n\\n---\\n> Aquí no se escriben versiones. Se cultivan helices vivas. Cada commit, cada test, cada refactor es una mutación trazable de un organismo técnico en evolución constante.\"\n}\n{\n  \"titulo\": \"🧬 Modelo de las Hélices de Desarrollo\",\n  \"subtitulo\": \"OpenPages Pipeline como un sistema genético-semántico en espiral\"\n}\n{\n  \"seccion\": \"📘 Introducción\",\n  \"contenido\": [\n    \"Este manifiesto define el marco conceptual y matemático del desarrollo de OpenPages Pipeline a través de hélices de desarrollo, una visión inspirada en la biología molecular, el cálculo diferencial y los sistemas de IA evolutivos.\",\n    \"Aquí no construimos versiones, construimos vueltas de madurez.\",\n    \"No diseñamos código lineal, sino cadenas funcionales que se reescriben con mayor profundidad en cada iteración.\",\n    \"OpenPages Pipeline no crece por bloques: gira, muta, aprende y escala.\"\n  ]\n}\n{\n  \"seccion\": \"🧭 Principios Fundamentales\",\n  \"principios\": [\n    \"Cada módulo funcional del sistema es un gen: Define un comportamiento estable, reutilizable y esencial.\",\n    \"Cada vuelta helicoidal representa una nueva capa de expresión funcional: Más vueltas → más robustez.\",\n    \"El sistema se representa como una hélice tridimensional con evolución temporal, estructural y de madurez.\",\n    \"El cambio puede ser visible (estructura) o invisible (calidad interna, testing, docs).\",\n    \"La IA y el humano deben poder leer esta estructura: cada mutación debe ser navegable y comprensible.\"\n  ],\n  \"expresion_vectorial\": {\n    \"r(t)\": \"[r*cos(t), r*sin(t), c*t]\",\n    \"r'(t)\": \"[-r*sin(t), r*cos(t), c]\"\n  }\n}\n{\n  \"seccion\": \"🧬 Estructura Genética del Desarrollo\",\n  \"tabla_equivalencias\": [\n    {\"biologico\": \"Gen\", \"openpages\": \"Módulo funcional (ej. validator.py)\"},\n    {\"biologico\": \"Genoma\", \"openpages\": \"Proyecto completo\"},\n    {\"biologico\": \"Expresión génica\", \"openpages\": \"Ejecución del módulo (CLI, API, test)\"},\n    {\"biologico\": \"Mutación\", \"openpages\": \"Commit/refactor que cambia comportamiento\"},\n    {\"biologico\": \"Epigenética\", \"openpages\": \"Configuración externa (config.yaml)\"},\n    {\"biologico\": \"Proteína\", \"openpages\": \"Archivo generado (.jsonl, .md, logs…)\"},\n    {\"biologico\": \"Fenotipo\", \"openpages\": \"Resultado visible para el usuario final\"},\n    {\"biologico\": \"Vueltas helicoidales\", \"openpages\": \"Iteraciones de desarrollo con más madurez\"},\n    {\"biologico\": \"Derivadas c'(t), r'(t)\", \"openpages\": \"Tasa de evolución del sistema en funcionalidad y robustez\"}\n  ]\n}\n{\n  \"seccion\": \"🔁 ¿Cómo se aplica esto?\",\n  \"aplicacion\": [\n    \"Cada gen se documenta con historia de mutaciones, expresiones, condiciones y productos.\",\n    \"Cada vuelta representa un momento en que varios genes se activan coordinadamente.\",\n    \"La madurez se mide en integración, automatización, abstracción, tests, documentación.\"\n  ]\n}\n{\n  \"seccion\": \"🌐 Implicaciones del Modelo\",\n  \"documentacion\": [\n    \"Todo módulo debe documentarse como un gen:\",\n    \"¿Qué hace? ¿Cuándo se activa? ¿Cómo ha cambiado? ¿Qué produce?\"\n  ],\n  \"analisis\": [\n    \"Se pueden calcular tasas de madurez y cambio por módulo.\",\n    \"Se puede visualizar como un conjunto de hélices sincronizadas.\"\n  ],\n  \"ia\": [\n    \"La IA puede entender cómo y por qué cambió el sistema.\",\n    \"Puede anticipar errores, identificar puntos críticos, sugerir mejoras.\"\n  ]\n}\n{\n  \"seccion\": \"📘 Conclusión\",\n  \"frases\": [\n    \"OpenPages Pipeline no es solo un proyecto técnico, sino un organismo semántico en evolución constante.\",\n    \"Cada commit es una mutación, cada vuelta una etapa de expresión, cada archivo una proteína de conocimiento útil.\",\n    \"No construimos versiones. Codificamos hélices vivas.\"\n  ]\n}\n","title":"🗂 Evolución Semántica","modified":"20250531042144916","type":"application/json","tmap.id":"21bf1538-2546-4a2d-a53b-1c27b8b83f94","color":"#db5f00","tags":"[[--- 🗂 Principios de programación]] [[🗂 Evolución Semántica]] [[--- 🎯 Detalles del proyecto]]"},{"created":"20250417134313258","text":"{\n  \"title\": \"🗂 Modularidad y Estado\",\n  \"id\": \"🗂 Modularidad y Estado\",\n  \"tags\": [\n    \"--- 🗂 Principios de programación\",\n    \"--- 🎯 Detalles del proyecto\",\n    \"🗂 Modularidad y Estado\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"Separación de Intereses (SoC)\",\n      \"Minimizar Estado Global\",\n      \"Inmutabilidad Siempre que Sea Posible\"\n    ],\n    \"usa\": [\n      \"🗂 Calidad del Código\",\n      \"🗂 Diseño\"\n    ],\n    \"requiere\": [\n      \"KISS\",\n      \"SRP\",\n      \"Encapsulación\"\n    ],\n    \"parte_de\": [\n      \"--- 🗂 Principios de programación\",\n      \"--- 🎯 Detalles del proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler define los principios que aseguran un sistema modular, testeable y sin efectos colaterales impredecibles. SoC, control del estado global e inmutabilidad cooperan para construir componentes claros y desacoplados.\",\n  \"textMarkdown\": \"## 🗂 Modularidad y Estado\\n\\n### Principios:\\n- **Separación de Intereses (SoC)**: un módulo, una responsabilidad\\n- **Minimizar Estado Global**: más independencia, menos errores\\n- **Inmutabilidad Siempre que Sea Posible**: menos efectos colaterales\\n\\n### Relaciones internas:\\n- SoC ↔ SRP\\n- Estado Global ↔ Inmutabilidad\\n- SoC + Inmutabilidad → Testeabilidad\\n\\n### Usa:\\n- 🗂 Calidad del Código\\n- 🗂 Diseño\\n\\n### Requiere:\\n- KISS\\n- SRP\\n- Encapsulación\\n\\n### Parte de:\\n- --- 🗂 Principios de programación\\n- --- 🎯 Detalles del proyecto\\n\\n---\\n> Un sistema robusto se construye desde la modularidad: cada parte cumple su rol, controla su estado y coopera con las demás sin fricción ni confusión.\"\n}\n{\n  \"titulo\": \"🧩 Principios de Modularidad y Estado\",\n  \"descripcion\": \"Aquí se define cómo dividir el sistema en piezas claras que cooperan de forma predecible y robusta.\"\n}\n{\n  \"principio\": \"Separación de Intereses (SoC)\",\n  \"categoria\": \"🧠\",\n  \"detalle\": \"Cada módulo o componente debe abordar una sola responsabilidad. Favorece el Single Responsibility Principle (SRP) y mejora la claridad, mantenibilidad y testeo del sistema.\"\n}\n{\n  \"principio\": \"Minimizar el Estado Global\",\n  \"categoria\": \"🧠\",\n  \"detalle\": \"Limita el uso de variables o configuraciones compartidas globalmente. Esto permite que los módulos sean más predecibles, independientes y fáciles de probar.\"\n}\n{\n  \"principio\": \"Inmutabilidad Siempre que Sea Posible\",\n  \"categoria\": \"🧠\",\n  \"detalle\": \"Promueve la creación de estructuras de datos que no cambien después de ser creadas, lo que reduce efectos secundarios, errores y facilita la depuración.\"\n}\n{\n  \"relacion\": \"Separación de Intereses ↔ SRP (de SOLID)\",\n  \"explicacion\": \"Ambos establecen límites claros de responsabilidad para cada parte del sistema.\"\n}\n{\n  \"relacion\": \"Estado Global ↔ Inmutabilidad\",\n  \"explicacion\": \"Minimizar el estado global se vuelve más efectivo cuando los datos son inmutables.\"\n}\n{\n  \"relacion\": \"SoC + Inmutabilidad → Código más testeable\",\n  \"explicacion\": \"Ambos principios facilitan la creación de módulos desacoplados y con comportamiento predecible.\"\n}\n","type":"application/json","title":"🗂 Modularidad y Estado","modified":"20250531042226303","tags":"[[--- 🗂 Principios de programación]] [[--- 🎯 Detalles del proyecto]] [[🗂 Modularidad y Estado]]","color":"#db5f00","tmap.id":"ebb5625d-d730-44ac-bf4c-61e53f3c079a"},{"created":"20250417134339248","text":"{\n  \"title\": \"🗂 Usabilidad y Robustez\",\n  \"id\": \"🗂 Usabilidad y Robustez\",\n  \"tags\": [\n    \"--- 🗂 Principios de programación\",\n    \"--- 🎯 Detalles del proyecto\",\n    \"🗂 Usabilidad y Robustez\"\n  ],\n  \"relations\": {\n    \"define\": [\n      \"PoLS – Principio del Menor Asombro\",\n      \"Convenciones Lingüísticas y de Framework\",\n      \"Programación Defensiva\"\n    ],\n    \"usa\": [\n      \"🗂 Calidad del Código\",\n      \"🗂 Diseño\",\n      \"⚙️🧪 tests_\"\n    ],\n    \"requiere\": [\n      \"DRY\",\n      \"Convención sobre Configuración\",\n      \"KISS\"\n    ],\n    \"parte_de\": [\n      \"--- 🗂 Principios de programación\",\n      \"--- 🎯 Detalles del proyecto\"\n    ]\n  },\n  \"textPlain\": \"Este tiddler define principios que mejoran la experiencia humana del sistema: interfaces intuitivas, código legible, errores controlados. Asegura que el sistema se comporte como se espera, incluso ante lo inesperado.\",\n  \"textMarkdown\": \"## 🗂 Usabilidad y Robustez\\n\\n### Principios:\\n- **PoLS** – Principio del Menor Asombro\\n- **Convenciones Lingüísticas y de Framework**\\n- **Tratamiento de Errores / Programación Defensiva**\\n\\n### Relaciones internas:\\n- PoLS + Convenciones → interfaces intuitivas\\n- Convenciones + Legibilidad → mantenibilidad\\n- Tratamiento de Errores ↔ TDD\\n\\n### Usa:\\n- 🗂 Calidad del Código\\n- 🗂 Diseño\\n- ⚙️🧪 tests_\\n\\n### Requiere:\\n- DRY\\n- Convención sobre Configuración\\n- KISS\\n\\n### Parte de:\\n- --- 🗂 Principios de programación\\n- --- 🎯 Detalles del proyecto\\n\\n---\\n> Un sistema usable no solo funciona: se entiende, se predice, y se siente seguro. La robustez nace del respeto por el usuario y la anticipación a lo improbable.\"\n}\n{\n  \"titulo\": \"🛡️ Principios de Usabilidad, Robustez y Convecciones\",\n  \"descripcion\": \"Estas prácticas impactan directamente al usuario final y al equipo.\"\n}\n{\n  \"principio\": \"Principio del Menor Asombro (PoLS)\",\n  \"categoria\": \"🧠\",\n  \"detalle\": \"El sistema debe comportarse de la forma más intuitiva y predecible posible para el usuario. Evita decisiones inesperadas.\"\n}\n{\n  \"principio\": \"Convenciones Lingüísticas / de Framework\",\n  \"categoria\": \"🧠\",\n  \"detalle\": \"Mantener nombres, estilos y patrones consistentes facilita la comprensión, colaboración y reduce errores.\"\n}\n{\n  \"principio\": \"Tratamiento de Errores y Programación Defensiva\",\n  \"categoria\": \"🧠\",\n  \"detalle\": \"Validar entradas, manejar excepciones, controlar bordes y documentar comportamientos límite asegura robustez y resiliencia del sistema.\"\n}\n{\n  \"relacion\": \"PoLS + Convenciones\",\n  \"explicacion\": \"Las interfaces intuitivas se refuerzan cuando el código sigue un estilo coherente y familiar.\"\n}\n{\n  \"relacion\": \"Tratamiento de errores ↔ TDD\",\n  \"explicacion\": \"Las pruebas anticipan y verifican errores; la programación defensiva garantiza que se manejen correctamente.\"\n}\n{\n  \"relacion\": \"Convenciones + Legibilidad → Mantenibilidad\",\n  \"explicacion\": \"Códigos predecibles y legibles son más fáciles de mantener en equipo.\"\n}\n","type":"application/json","title":"🗂 Usabilidad y Robustez","modified":"20250531042304620","tags":"[[--- 🗂 Principios de programación]] [[--- 🎯 Detalles del proyecto]] [[🗂 Usabilidad y Robustez]]","color":"#db5f00","tmap.id":"a65af17f-6a20-419b-b5f9-360d03355131"}]